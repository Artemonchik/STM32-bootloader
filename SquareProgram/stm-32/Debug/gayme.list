
gayme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be8  08002be8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002be8  08002be8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002be8  08002be8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  2000000c  08002bfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08002bfc  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073b6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001339  00000000  00000000  000273f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000650  00000000  00000000  00028730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a8  00000000  00000000  00028d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019593  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000608b  00000000  00000000  000428bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009394e  00000000  00000000  00048946  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001884  00000000  00000000  000dc310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b98 	.word	0x08002b98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b98 	.word	0x08002b98

080001c8 <sendData>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t dataBuffer[500];
int wasSend = 0;
int sendData(UART_HandleTypeDef * huart, uint8_t * data, int len, int timeout){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
 80001d4:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*)(&len), sizeof(len), timeout);
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	1d39      	adds	r1, r7, #4
 80001da:	2204      	movs	r2, #4
 80001dc:	68f8      	ldr	r0, [r7, #12]
 80001de:	f001 ffe5 	bl	80021ac <HAL_UART_Transmit>
	wasSend = HAL_UART_Transmit(huart, data, len, timeout);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	68b9      	ldr	r1, [r7, #8]
 80001ea:	68f8      	ldr	r0, [r7, #12]
 80001ec:	f001 ffde 	bl	80021ac <HAL_UART_Transmit>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <sendData+0x3c>)
 80001f6:	601a      	str	r2, [r3, #0]
	return 0;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	20000028 	.word	0x20000028

08000208 <receiveData>:

uint8_t * receiveData(UART_HandleTypeDef * huart, int timeout){
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(huart, dataBuffer, sizeof(int), timeout);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	2204      	movs	r2, #4
 8000216:	4909      	ldr	r1, [pc, #36]	; (800023c <receiveData+0x34>)
 8000218:	6878      	ldr	r0, [r7, #4]
 800021a:	f002 f85a 	bl	80022d2 <HAL_UART_Receive>
	int len = *((int*)dataBuffer);
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <receiveData+0x34>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(huart, dataBuffer + sizeof(int), len, timeout);
 8000224:	4906      	ldr	r1, [pc, #24]	; (8000240 <receiveData+0x38>)
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	b29a      	uxth	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	f002 f850 	bl	80022d2 <HAL_UART_Receive>
	return dataBuffer;
 8000232:	4b02      	ldr	r3, [pc, #8]	; (800023c <receiveData+0x34>)
}
 8000234:	4618      	mov	r0, r3
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	200000ac 	.word	0x200000ac
 8000240:	200000b0 	.word	0x200000b0

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 f9ad 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f8b3 	bl	80003bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000256:	f000 f881 	bl	800035c <MX_USART1_UART_Init>
  //##### HAL_UART_Transmit(&huart1, stringToSend, sizeof(stringToSend), 100);
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	uint8_t * data = receiveData(&huart1, 60000);
 800025a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800025e:	4816      	ldr	r0, [pc, #88]	; (80002b8 <main+0x74>)
 8000260:	f7ff ffd2 	bl	8000208 <receiveData>
 8000264:	60b8      	str	r0, [r7, #8]
	int len = (*(int*)data) ;
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	607b      	str	r3, [r7, #4]
	for(int i = 1; i <= len / sizeof(int); i++){
 800026c:	2301      	movs	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	e013      	b.n	800029a <main+0x56>
		int elem = *((int*)data + i);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	4413      	add	r3, r2
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	603b      	str	r3, [r7, #0]
		elem *= elem;
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	fb02 f303 	mul.w	r3, r2, r3
 8000286:	603b      	str	r3, [r7, #0]
		*((int*)data + i) = elem;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	4413      	add	r3, r2
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	601a      	str	r2, [r3, #0]
	for(int i = 1; i <= len / sizeof(int); i++){
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3301      	adds	r3, #1
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	089a      	lsrs	r2, r3, #2
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d2e6      	bcs.n	8000272 <main+0x2e>
	}
	sendData(&huart1, data + 4, len, 3000);
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	1d19      	adds	r1, r3, #4
 80002a8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4802      	ldr	r0, [pc, #8]	; (80002b8 <main+0x74>)
 80002b0:	f7ff ff8a 	bl	80001c8 <sendData>
  while (1){
 80002b4:	e7d1      	b.n	800025a <main+0x16>
 80002b6:	bf00      	nop
 80002b8:	2000002c 	.word	0x2000002c

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b09e      	sub	sp, #120	; 0x78
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fc5c 	bl	8002b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e0:	463b      	mov	r3, r7
 80002e2:	223c      	movs	r2, #60	; 0x3c
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fc4e 	bl	8002b88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	2310      	movs	r3, #16
 80002f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fc17 	bl	8000b34 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800030c:	f000 f86e 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000314:	2300      	movs	r3, #0
 8000316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000324:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fb0a 	bl	8001944 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000336:	f000 f859 	bl	80003ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033a:	2301      	movs	r3, #1
 800033c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000342:	463b      	mov	r3, r7
 8000344:	4618      	mov	r0, r3
 8000346:	f001 fd33 	bl	8001db0 <HAL_RCCEx_PeriphCLKConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000350:	f000 f84c 	bl	80003ec <Error_Handler>
  }
}
 8000354:	bf00      	nop
 8000356:	3778      	adds	r7, #120	; 0x78
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000362:	4a15      	ldr	r2, [pc, #84]	; (80003b8 <MX_USART1_UART_Init+0x5c>)
 8000364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000366:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000368:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800036c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000382:	220c      	movs	r2, #12
 8000384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_USART1_UART_Init+0x58>)
 80003a0:	f001 feb6 	bl	8002110 <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003aa:	f000 f81f 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	2000002c 	.word	0x2000002c
 80003b8:	40013800 	.word	0x40013800

080003bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003cc:	6153      	str	r3, [r2, #20]
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_GPIO_Init+0x2c>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <HAL_MspInit+0x44>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a08      	ldr	r2, [pc, #32]	; (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <HAL_MspInit+0x44>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <HAL_UART_MspInit+0x80>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d129      	bne.n	80004ba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000466:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <HAL_UART_MspInit+0x84>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a17      	ldr	r2, [pc, #92]	; (80004c8 <HAL_UART_MspInit+0x84>)
 800046c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_UART_MspInit+0x84>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_UART_MspInit+0x84>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <HAL_UART_MspInit+0x84>)
 8000484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_UART_MspInit+0x84>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000496:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004a8:	2307      	movs	r3, #7
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b6:	f000 f9c3 	bl	8000840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004ba:	bf00      	nop
 80004bc:	3728      	adds	r7, #40	; 0x28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40013800 	.word	0x40013800
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f888 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <SystemInit+0x28>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <SystemInit+0x28>)
 8000534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <SystemInit+0x28>)
 800053e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000542:	609a      	str	r2, [r3, #8]
#endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800058c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000558:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800055a:	e003      	b.n	8000564 <LoopCopyDataInit>

0800055c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800055e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000560:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000562:	3104      	adds	r1, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000568:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800056a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800056c:	d3f6      	bcc.n	800055c <CopyDataInit>
	ldr	r2, =_sbss
 800056e:	4a0b      	ldr	r2, [pc, #44]	; (800059c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000570:	e002      	b.n	8000578 <LoopFillZerobss>

08000572 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000572:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000574:	f842 3b04 	str.w	r3, [r2], #4

08000578 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <LoopForever+0x16>)
	cmp	r2, r3
 800057a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800057c:	d3f9      	bcc.n	8000572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff ffd3 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000582:	f002 fadd 	bl	8002b40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000586:	f7ff fe5d 	bl	8000244 <main>

0800058a <LoopForever>:

LoopForever:
    b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800058c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000590:	08002bf0 	.word	0x08002bf0
	ldr	r0, =_sdata
 8000594:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000598:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800059c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005a0:	200002a4 	.word	0x200002a4

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x28>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f90d 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f7ff ff1a 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f917 	bl	8000826 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f8ed 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000000 	.word	0x20000000
 800062c:	20000008 	.word	0x20000008
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000008 	.word	0x20000008
 8000658:	200002a0 	.word	0x200002a0

0800065c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200002a0 	.word	0x200002a0

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff47 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff5c 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffb0 	bl	8000794 <SysTick_Config>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084e:	e154      	b.n	8000afa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	2101      	movs	r1, #1
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	fa01 f303 	lsl.w	r3, r1, r3
 800085c:	4013      	ands	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f000 8146 	beq.w	8000af4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d00b      	beq.n	8000888 <HAL_GPIO_Init+0x48>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d007      	beq.n	8000888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087c:	2b11      	cmp	r3, #17
 800087e:	d003      	beq.n	8000888 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	2b12      	cmp	r3, #18
 8000886:	d130      	bne.n	80008ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	2203      	movs	r2, #3
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	43db      	mvns	r3, r3
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	693a      	ldr	r2, [r7, #16]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008be:	2201      	movs	r2, #1
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	f003 0201 	and.w	r2, r3, #1
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	689a      	ldr	r2, [r3, #8]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d003      	beq.n	800092a <HAL_GPIO_Init+0xea>
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b12      	cmp	r3, #18
 8000928:	d123      	bne.n	8000972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	08da      	lsrs	r2, r3, #3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3208      	adds	r2, #8
 8000932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	220f      	movs	r2, #15
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4013      	ands	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	08da      	lsrs	r2, r3, #3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3208      	adds	r2, #8
 800096c:	6939      	ldr	r1, [r7, #16]
 800096e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0203 	and.w	r2, r3, #3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f000 80a0 	beq.w	8000af4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b4:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a57      	ldr	r2, [pc, #348]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <HAL_GPIO_Init+0x2d8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009cc:	4a53      	ldr	r2, [pc, #332]	; (8000b1c <HAL_GPIO_Init+0x2dc>)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	f003 0303 	and.w	r3, r3, #3
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	220f      	movs	r2, #15
 80009e4:	fa02 f303 	lsl.w	r3, r2, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4013      	ands	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009f6:	d019      	beq.n	8000a2c <HAL_GPIO_Init+0x1ec>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <HAL_GPIO_Init+0x2e0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d013      	beq.n	8000a28 <HAL_GPIO_Init+0x1e8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a48      	ldr	r2, [pc, #288]	; (8000b24 <HAL_GPIO_Init+0x2e4>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d00d      	beq.n	8000a24 <HAL_GPIO_Init+0x1e4>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a47      	ldr	r2, [pc, #284]	; (8000b28 <HAL_GPIO_Init+0x2e8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d007      	beq.n	8000a20 <HAL_GPIO_Init+0x1e0>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <HAL_GPIO_Init+0x2ec>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d101      	bne.n	8000a1c <HAL_GPIO_Init+0x1dc>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	e008      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x1ee>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a3e:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x2dc>)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a4c:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a70:	4a2f      	ldr	r2, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a9a:	4a25      	ldr	r2, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_GPIO_Init+0x2f0>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f47f aea3 	bne.w	8000850 <HAL_GPIO_Init+0x10>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	371c      	adds	r7, #28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	48001000 	.word	0x48001000
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	f000 bef4 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	f000 816a 	beq.w	8000e32 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b5e:	4bb3      	ldr	r3, [pc, #716]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d00c      	beq.n	8000b84 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6a:	4bb0      	ldr	r3, [pc, #704]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d159      	bne.n	8000c2a <HAL_RCC_OscConfig+0xf6>
 8000b76:	4bad      	ldr	r3, [pc, #692]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b82:	d152      	bne.n	8000c2a <HAL_RCC_OscConfig+0xf6>
 8000b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b88:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b90:	fa93 f3a3 	rbit	r3, r3
 8000b94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b98:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	fab3 f383 	clz	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d102      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x82>
 8000bb0:	4b9e      	ldr	r3, [pc, #632]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	e015      	b.n	8000be2 <HAL_RCC_OscConfig+0xae>
 8000bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000bc2:	fa93 f3a3 	rbit	r3, r3
 8000bc6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000bd2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000bde:	4b93      	ldr	r3, [pc, #588]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000bea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000bee:	fa92 f2a2 	rbit	r2, r2
 8000bf2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000bf6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	f042 0220 	orr.w	r2, r2, #32
 8000c04:	b2d2      	uxtb	r2, r2
 8000c06:	f002 021f 	and.w	r2, r2, #31
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 810c 	beq.w	8000e30 <HAL_RCC_OscConfig+0x2fc>
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8106 	bne.w	8000e30 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f000 be86 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c34:	d106      	bne.n	8000c44 <HAL_RCC_OscConfig+0x110>
 8000c36:	4b7d      	ldr	r3, [pc, #500]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7c      	ldr	r2, [pc, #496]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e030      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0x134>
 8000c4e:	4b77      	ldr	r3, [pc, #476]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a76      	ldr	r2, [pc, #472]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b74      	ldr	r3, [pc, #464]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a73      	ldr	r2, [pc, #460]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e01e      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0x15a>
 8000c74:	4b6d      	ldr	r3, [pc, #436]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6c      	ldr	r2, [pc, #432]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a69      	ldr	r2, [pc, #420]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e00b      	b.n	8000ca6 <HAL_RCC_OscConfig+0x172>
 8000c8e:	4b67      	ldr	r3, [pc, #412]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a66      	ldr	r2, [pc, #408]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	4b64      	ldr	r3, [pc, #400]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a63      	ldr	r2, [pc, #396]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000ca0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ca6:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	f023 020f 	bic.w	r2, r3, #15
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	495d      	ldr	r1, [pc, #372]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d059      	beq.n	8000d78 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fcca 	bl	800065c <HAL_GetTick>
 8000cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ccc:	e00a      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cce:	f7ff fcc5 	bl	800065c <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d902      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f000 be29 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
 8000ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cf8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d102      	bne.n	8000d16 <HAL_RCC_OscConfig+0x1e2>
 8000d10:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x20e>
 8000d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d4e:	fa92 f2a2 	rbit	r2, r2
 8000d52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d56:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	f002 021f 	and.w	r2, r2, #31
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0ab      	beq.n	8000cce <HAL_RCC_OscConfig+0x19a>
 8000d76:	e05c      	b.n	8000e32 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fc70 	bl	800065c <HAL_GetTick>
 8000d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d80:	e00a      	b.n	8000d98 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fc6b 	bl	800065c <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d902      	bls.n	8000d98 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f000 bdcf 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
 8000d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000dac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d102      	bne.n	8000dca <HAL_RCC_OscConfig+0x296>
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x2c2>
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000de6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000dfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e02:	fa92 f2a2 	rbit	r2, r2
 8000e06:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e0a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	f042 0220 	orr.w	r2, r2, #32
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	f002 021f 	and.w	r2, r2, #31
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1ab      	bne.n	8000d82 <HAL_RCC_OscConfig+0x24e>
 8000e2a:	e002      	b.n	8000e32 <HAL_RCC_OscConfig+0x2fe>
 8000e2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 816f 	beq.w	8001120 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e42:	4bd0      	ldr	r3, [pc, #832]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 030c 	and.w	r3, r3, #12
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00b      	beq.n	8000e66 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e4e:	4bcd      	ldr	r3, [pc, #820]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d16c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x400>
 8000e5a:	4bca      	ldr	r3, [pc, #808]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d166      	bne.n	8000f34 <HAL_RCC_OscConfig+0x400>
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7c:	fab3 f383 	clz	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d102      	bne.n	8000e96 <HAL_RCC_OscConfig+0x362>
 8000e90:	4bbc      	ldr	r3, [pc, #752]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	e013      	b.n	8000ebe <HAL_RCC_OscConfig+0x38a>
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000eae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000eba:	4bb2      	ldr	r3, [pc, #712]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000ec4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000ec8:	fa92 f2a2 	rbit	r2, r2
 8000ecc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000ed0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000ed4:	fab2 f282 	clz	r2, r2
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	f042 0220 	orr.w	r2, r2, #32
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	f002 021f 	and.w	r2, r2, #31
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d007      	beq.n	8000f00 <HAL_RCC_OscConfig+0x3cc>
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d002      	beq.n	8000f00 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f000 bd1b 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	4ba0      	ldr	r3, [pc, #640]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	21f8      	movs	r1, #248	; 0xf8
 8000f10:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000f18:	fa91 f1a1 	rbit	r1, r1
 8000f1c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000f20:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000f24:	fab1 f181 	clz	r1, r1
 8000f28:	b2c9      	uxtb	r1, r1
 8000f2a:	408b      	lsls	r3, r1
 8000f2c:	4995      	ldr	r1, [pc, #596]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f32:	e0f5      	b.n	8001120 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8085 	beq.w	800104a <HAL_RCC_OscConfig+0x516>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	461a      	mov	r2, r3
 8000f68:	2301      	movs	r3, #1
 8000f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fb76 	bl	800065c <HAL_GetTick>
 8000f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f76:	f7ff fb71 	bl	800065c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d902      	bls.n	8000f8c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f000 bcd5 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	095b      	lsrs	r3, r3, #5
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <HAL_RCC_OscConfig+0x488>
 8000fb6:	4b73      	ldr	r3, [pc, #460]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	e013      	b.n	8000fe4 <HAL_RCC_OscConfig+0x4b0>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fee:	fa92 f2a2 	rbit	r2, r2
 8000ff2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000ff6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000ffa:	fab2 f282 	clz	r2, r2
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	f042 0220 	orr.w	r2, r2, #32
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	f002 021f 	and.w	r2, r2, #31
 800100a:	2101      	movs	r1, #1
 800100c:	fa01 f202 	lsl.w	r2, r1, r2
 8001010:	4013      	ands	r3, r2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0af      	beq.n	8000f76 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001016:	4b5b      	ldr	r3, [pc, #364]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	21f8      	movs	r1, #248	; 0xf8
 8001026:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800102e:	fa91 f1a1 	rbit	r1, r1
 8001032:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001036:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800103a:	fab1 f181 	clz	r1, r1
 800103e:	b2c9      	uxtb	r1, r1
 8001040:	408b      	lsls	r3, r1
 8001042:	4950      	ldr	r1, [pc, #320]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e06a      	b.n	8001120 <HAL_RCC_OscConfig+0x5ec>
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001054:	fa93 f3a3 	rbit	r3, r3
 8001058:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800105c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001060:	fab3 f383 	clz	r3, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800106a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	461a      	mov	r2, r3
 8001072:	2300      	movs	r3, #0
 8001074:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff faf1 	bl	800065c <HAL_GetTick>
 800107a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	e00a      	b.n	8001096 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001080:	f7ff faec 	bl	800065c <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d902      	bls.n	8001096 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	f000 bc50 	b.w	8001936 <HAL_RCC_OscConfig+0xe02>
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80010a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d102      	bne.n	80010c6 <HAL_RCC_OscConfig+0x592>
 80010c0:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	e013      	b.n	80010ee <HAL_RCC_OscConfig+0x5ba>
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010ea:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_OscConfig+0x650>)
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2202      	movs	r2, #2
 80010f0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001100:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	f002 021f 	and.w	r2, r2, #31
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1af      	bne.n	8001080 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80da 	beq.w	80012e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d069      	beq.n	800120e <HAL_RCC_OscConfig+0x6da>
 800113a:	2301      	movs	r3, #1
 800113c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800114c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_RCC_OscConfig+0x654>)
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	461a      	mov	r2, r3
 8001160:	2301      	movs	r3, #1
 8001162:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fa7a 	bl	800065c <HAL_GetTick>
 8001168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116c:	e00e      	b.n	800118c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fa75 	bl	800065c <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d906      	bls.n	800118c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e3d9      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000
 8001188:	10908120 	.word	0x10908120
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800119e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011a2:	2202      	movs	r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	fa93 f2a3 	rbit	r2, r3
 80011b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011ba:	2202      	movs	r2, #2
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	fa93 f2a3 	rbit	r2, r3
 80011c8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80011cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	4ba5      	ldr	r3, [pc, #660]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80011d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011d6:	2102      	movs	r1, #2
 80011d8:	6019      	str	r1, [r3, #0]
 80011da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	fa93 f1a3 	rbit	r1, r3
 80011e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011e8:	6019      	str	r1, [r3, #0]
  return result;
 80011ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	4013      	ands	r3, r2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0b0      	beq.n	800116e <HAL_RCC_OscConfig+0x63a>
 800120c:	e06a      	b.n	80012e4 <HAL_RCC_OscConfig+0x7b0>
 800120e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001212:	2201      	movs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	fa93 f2a3 	rbit	r2, r3
 8001220:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001224:	601a      	str	r2, [r3, #0]
  return result;
 8001226:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800122a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <HAL_RCC_OscConfig+0x934>)
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	461a      	mov	r2, r3
 800123c:	2300      	movs	r3, #0
 800123e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fa0c 	bl	800065c <HAL_GetTick>
 8001244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001248:	e009      	b.n	800125e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124a:	f7ff fa07 	bl	800065c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e36b      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 800125e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001262:	2202      	movs	r2, #2
 8001264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fa93 f2a3 	rbit	r2, r3
 8001270:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800127a:	2202      	movs	r2, #2
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	fa93 f2a3 	rbit	r2, r3
 8001288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001292:	2202      	movs	r2, #2
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fa93 f2a3 	rbit	r2, r3
 80012a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012ae:	2102      	movs	r1, #2
 80012b0:	6019      	str	r1, [r3, #0]
 80012b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	fa93 f1a3 	rbit	r1, r3
 80012bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012c0:	6019      	str	r1, [r3, #0]
  return result;
 80012c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1b2      	bne.n	800124a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8158 	beq.w	80015a4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b57      	ldr	r3, [pc, #348]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a56      	ldr	r2, [pc, #344]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b54      	ldr	r3, [pc, #336]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_OscConfig+0x938>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001334:	2b00      	cmp	r3, #0
 8001336:	d11a      	bne.n	800136e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001338:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_RCC_OscConfig+0x938>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_RCC_OscConfig+0x938>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001342:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001344:	f7ff f98a 	bl	800065c <HAL_GetTick>
 8001348:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e009      	b.n	8001362 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff f985 	bl	800065c <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e2e9      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x938>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0ef      	beq.n	800134e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x852>
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a39      	ldr	r2, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	e02f      	b.n	80013e6 <HAL_RCC_OscConfig+0x8b2>
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x876>
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	4a30      	ldr	r2, [pc, #192]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013a2:	f023 0304 	bic.w	r3, r3, #4
 80013a6:	6213      	str	r3, [r2, #32]
 80013a8:	e01d      	b.n	80013e6 <HAL_RCC_OscConfig+0x8b2>
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d10c      	bne.n	80013ce <HAL_RCC_OscConfig+0x89a>
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013ba:	f043 0304 	orr.w	r3, r3, #4
 80013be:	6213      	str	r3, [r2, #32]
 80013c0:	4b28      	ldr	r3, [pc, #160]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	e00b      	b.n	80013e6 <HAL_RCC_OscConfig+0x8b2>
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 80013e0:	f023 0304 	bic.w	r3, r3, #4
 80013e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d06b      	beq.n	80014c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f0:	f7ff f934 	bl	800065c <HAL_GetTick>
 80013f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f8:	e00b      	b.n	8001412 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff f92f 	bl	800065c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e291      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 8001412:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001416:	2202      	movs	r2, #2
 8001418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	fa93 f2a3 	rbit	r2, r3
 8001424:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800142e:	2202      	movs	r2, #2
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	fa93 f2a3 	rbit	r2, r3
 800143c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001440:	601a      	str	r2, [r3, #0]
  return result;
 8001442:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001446:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001448:	fab3 f383 	clz	r3, r3
 800144c:	b2db      	uxtb	r3, r3
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d109      	bne.n	8001470 <HAL_RCC_OscConfig+0x93c>
 800145c:	4b01      	ldr	r3, [pc, #4]	; (8001464 <HAL_RCC_OscConfig+0x930>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	e014      	b.n	800148c <HAL_RCC_OscConfig+0x958>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	10908120 	.word	0x10908120
 800146c:	40007000 	.word	0x40007000
 8001470:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001474:	2202      	movs	r2, #2
 8001476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fa93 f2a3 	rbit	r2, r3
 8001482:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	4bbb      	ldr	r3, [pc, #748]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001490:	2102      	movs	r1, #2
 8001492:	6011      	str	r1, [r2, #0]
 8001494:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	fa92 f1a2 	rbit	r1, r2
 800149e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014a2:	6011      	str	r1, [r2, #0]
  return result;
 80014a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	fab2 f282 	clz	r2, r2
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	f002 021f 	and.w	r2, r2, #31
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d099      	beq.n	80013fa <HAL_RCC_OscConfig+0x8c6>
 80014c6:	e063      	b.n	8001590 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f8c8 	bl	800065c <HAL_GetTick>
 80014cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff f8c3 	bl	800065c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e225      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 80014ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014ee:	2202      	movs	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001506:	2202      	movs	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001518:	601a      	str	r2, [r3, #0]
  return result;
 800151a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800151e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f043 0302 	orr.w	r3, r3, #2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d102      	bne.n	800153a <HAL_RCC_OscConfig+0xa06>
 8001534:	4b90      	ldr	r3, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	e00d      	b.n	8001556 <HAL_RCC_OscConfig+0xa22>
 800153a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800153e:	2202      	movs	r2, #2
 8001540:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f2a3 	rbit	r2, r3
 800154c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	4b89      	ldr	r3, [pc, #548]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800155a:	2102      	movs	r1, #2
 800155c:	6011      	str	r1, [r2, #0]
 800155e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	fa92 f1a2 	rbit	r1, r2
 8001568:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800156c:	6011      	str	r1, [r2, #0]
  return result;
 800156e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f002 021f 	and.w	r2, r2, #31
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1a0      	bne.n	80014d2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001590:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 81c2 	beq.w	8001934 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	f000 819c 	beq.w	80018f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	f040 8114 	bne.w	80017f2 <HAL_RCC_OscConfig+0xcbe>
 80015ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80015d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	fa93 f2a3 	rbit	r2, r3
 80015de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015e2:	601a      	str	r2, [r3, #0]
  return result;
 80015e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	2300      	movs	r3, #0
 80015fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff f82c 	bl	800065c <HAL_GetTick>
 8001604:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001608:	e009      	b.n	800161e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160a:	f7ff f827 	bl	800065c <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e18b      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 800161e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001636:	601a      	str	r2, [r3, #0]
  return result;
 8001638:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800163c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	fab3 f383 	clz	r3, r3
 8001642:	b2db      	uxtb	r3, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b01      	cmp	r3, #1
 8001650:	d102      	bne.n	8001658 <HAL_RCC_OscConfig+0xb24>
 8001652:	4b49      	ldr	r3, [pc, #292]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	e01b      	b.n	8001690 <HAL_RCC_OscConfig+0xb5c>
 8001658:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800165c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001660:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001676:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001694:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001698:	6011      	str	r1, [r2, #0]
 800169a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	fa92 f1a2 	rbit	r1, r2
 80016a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016a8:	6011      	str	r1, [r2, #0]
  return result;
 80016aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	fab2 f282 	clz	r2, r2
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	f042 0220 	orr.w	r2, r2, #32
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	f002 021f 	and.w	r2, r2, #31
 80016c0:	2101      	movs	r1, #1
 80016c2:	fa01 f202 	lsl.w	r2, r1, r2
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d19e      	bne.n	800160a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001700:	601a      	str	r2, [r3, #0]
  return result;
 8001702:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001706:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001712:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	461a      	mov	r2, r3
 800171a:	2301      	movs	r3, #1
 800171c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7fe ff9d 	bl	800065c <HAL_GetTick>
 8001722:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001726:	e009      	b.n	800173c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7fe ff98 	bl	800065c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0fc      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 800173c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001740:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001744:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001754:	601a      	str	r2, [r3, #0]
  return result;
 8001756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0xc48>
 8001770:	4b01      	ldr	r3, [pc, #4]	; (8001778 <HAL_RCC_OscConfig+0xc44>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e01e      	b.n	80017b4 <HAL_RCC_OscConfig+0xc80>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001780:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fa93 f2a3 	rbit	r2, r3
 8001790:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800179a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_RCC_OscConfig+0xe0c>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017bc:	6011      	str	r1, [r2, #0]
 80017be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	fa92 f1a2 	rbit	r1, r2
 80017c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017cc:	6011      	str	r1, [r2, #0]
  return result;
 80017ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fab2 f282 	clz	r2, r2
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f002 021f 	and.w	r2, r2, #31
 80017e4:	2101      	movs	r1, #1
 80017e6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d09b      	beq.n	8001728 <HAL_RCC_OscConfig+0xbf4>
 80017f0:	e0a0      	b.n	8001934 <HAL_RCC_OscConfig+0xe00>
 80017f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180a:	601a      	str	r2, [r3, #0]
  return result;
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	461a      	mov	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe ff18 	bl	800065c <HAL_GetTick>
 800182c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e009      	b.n	8001846 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001832:	f7fe ff13 	bl	800065c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e077      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	fa93 f2a3 	rbit	r2, r3
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	601a      	str	r2, [r3, #0]
  return result;
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0xd4c>
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0xe0c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0xd84>
 8001880:	f107 0320 	add.w	r3, r7, #32
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_RCC_OscConfig+0xe0c>)
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	f107 0210 	add.w	r2, r7, #16
 80018bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	f107 0210 	add.w	r2, r7, #16
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fa92 f1a2 	rbit	r1, r2
 80018cc:	f107 020c 	add.w	r2, r7, #12
 80018d0:	6011      	str	r1, [r2, #0]
  return result;
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	fab2 f282 	clz	r2, r2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0220 	orr.w	r2, r2, #32
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	f002 021f 	and.w	r2, r2, #31
 80018e8:	2101      	movs	r1, #1
 80018ea:	fa01 f202 	lsl.w	r2, r1, r2
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d19e      	bne.n	8001832 <HAL_RCC_OscConfig+0xcfe>
 80018f4:	e01e      	b.n	8001934 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e018      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_RCC_OscConfig+0xe0c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800190c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	429a      	cmp	r2, r3
 800191c:	d108      	bne.n	8001930 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800191e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09e      	sub	sp, #120	; 0x78
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e162      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	498b      	ldr	r1, [pc, #556]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e14a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001998:	4b82      	ldr	r3, [pc, #520]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	497f      	ldr	r1, [pc, #508]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80dc 	beq.w	8001b70 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d13c      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xf6>
 80019c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80019ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_ClockConfig+0xa6>
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e00f      	b.n	8001a0a <HAL_RCC_ClockConfig+0xc6>
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	667b      	str	r3, [r7, #100]	; 0x64
 80019f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fc:	663b      	str	r3, [r7, #96]	; 0x60
 80019fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a06:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a12:	fa92 f2a2 	rbit	r2, r2
 8001a16:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001a18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d17b      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0f3      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d13c      	bne.n	8001abc <HAL_RCC_ClockConfig+0x178>
 8001a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	095b      	lsrs	r3, r3, #5
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_ClockConfig+0x148>
 8001a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8001a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a88:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a90:	63ba      	str	r2, [r7, #56]	; 0x38
 8001a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a94:	fa92 f2a2 	rbit	r2, r2
 8001a98:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a9c:	fab2 f282 	clz	r2, r2
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f042 0220 	orr.w	r2, r2, #32
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f002 021f 	and.w	r2, r2, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d13a      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b2      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
 8001abc:	2302      	movs	r3, #2
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x1a0>
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e00d      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1bc>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	61fb      	str	r3, [r7, #28]
 8001afc:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2202      	movs	r2, #2
 8001b02:	61ba      	str	r2, [r7, #24]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	fa92 f2a2 	rbit	r2, r2
 8001b0a:	617a      	str	r2, [r7, #20]
  return result;
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f002 021f 	and.w	r2, r2, #31
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e079      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	491a      	ldr	r1, [pc, #104]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7fe fd8c 	bl	800065c <HAL_GetTick>
 8001b44:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7fe fd88 	bl	800065c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e061      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_RCC_ClockConfig+0x260>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d214      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_RCC_ClockConfig+0x25c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e040      	b.n	8001c22 <HAL_RCC_ClockConfig+0x2de>
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_RCC_ClockConfig+0x2e8>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	491a      	ldr	r1, [pc, #104]	; (8001c2c <HAL_RCC_ClockConfig+0x2e8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_ClockConfig+0x2e8>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4912      	ldr	r1, [pc, #72]	; (8001c2c <HAL_RCC_ClockConfig+0x2e8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001be6:	f000 f829 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8001bea:	4601      	mov	r1, r0
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_RCC_ClockConfig+0x2e8>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf4:	22f0      	movs	r2, #240	; 0xf0
 8001bf6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	fa92 f2a2 	rbit	r2, r2
 8001bfe:	60fa      	str	r2, [r7, #12]
  return result;
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	fab2 f282 	clz	r2, r2
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	40d3      	lsrs	r3, r2
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x2ec>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_RCC_ClockConfig+0x2f0>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_RCC_ClockConfig+0x2f4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fcda 	bl	80005d4 <HAL_InitTick>
  
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3778      	adds	r7, #120	; 0x78
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08002bb0 	.word	0x08002bb0
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b08b      	sub	sp, #44	; 0x2c
 8001c40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x30>
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x36>
 8001c6a:	e03c      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c6e:	623b      	str	r3, [r7, #32]
      break;
 8001c70:	e03c      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	607a      	str	r2, [r7, #4]
  return result;
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	40d3      	lsrs	r3, r2
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	fa92 f2a2 	rbit	r2, r2
 8001ca8:	60fa      	str	r2, [r7, #12]
  return result;
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	fab2 f282 	clz	r2, r2
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	40d3      	lsrs	r3, r2
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd4:	e004      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	623b      	str	r3, [r7, #32]
      break;
 8001ce4:	e002      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce8:	623b      	str	r3, [r7, #32]
      break;
 8001cea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	372c      	adds	r7, #44	; 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	007a1200 	.word	0x007a1200
 8001d04:	08002bc8 	.word	0x08002bc8
 8001d08:	08002bd8 	.word	0x08002bd8
 8001d0c:	003d0900 	.word	0x003d0900

08001d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d2e:	f7ff ffef 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d32:	4601      	mov	r1, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	603a      	str	r2, [r7, #0]
  return result;
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	40d3      	lsrs	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08002bc0 	.word	0x08002bc0

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d72:	f7ff ffcd 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d76:	4601      	mov	r1, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	603a      	str	r2, [r7, #0]
  return result;
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	fab2 f282 	clz	r2, r2
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	40d3      	lsrs	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08002bc0 	.word	0x08002bc0

08001db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b092      	sub	sp, #72	; 0x48
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80d7 	beq.w	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd4:	4b4e      	ldr	r3, [pc, #312]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10e      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	61d3      	str	r3, [r2, #28]
 8001dec:	4b48      	ldr	r3, [pc, #288]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a41      	ldr	r2, [pc, #260]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fc21 	bl	800065c <HAL_GetTick>
 8001e1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fc1d 	bl	800065c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	; 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e169      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 8084 	beq.w	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d07c      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	461a      	mov	r2, r3
 8001e86:	2301      	movs	r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d04b      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fbcd 	bl	800065c <HAL_GetTick>
 8001ec2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	e00a      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec6:	f7fe fbc9 	bl	800065c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e113      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8001edc:	2302      	movs	r3, #2
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d108      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f0a:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	e00d      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40007000 	.word	0x40007000
 8001f18:	10908100 	.word	0x10908100
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	613a      	str	r2, [r7, #16]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	60fa      	str	r2, [r7, #12]
  return result;
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0b7      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f56:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	496a      	ldr	r1, [pc, #424]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	4a65      	ldr	r2, [pc, #404]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f88:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	f023 0203 	bic.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	495d      	ldr	r1, [pc, #372]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa6:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4956      	ldr	r1, [pc, #344]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fc4:	4b51      	ldr	r3, [pc, #324]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	494e      	ldr	r1, [pc, #312]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0320 	and.w	r3, r3, #32
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe2:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f023 0210 	bic.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4947      	ldr	r1, [pc, #284]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	493f      	ldr	r1, [pc, #252]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800201e:	4b3b      	ldr	r3, [pc, #236]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f023 0220 	bic.w	r2, r3, #32
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4938      	ldr	r1, [pc, #224]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	4930      	ldr	r1, [pc, #192]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800205a:	4b2c      	ldr	r3, [pc, #176]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	4929      	ldr	r1, [pc, #164]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	4921      	ldr	r1, [pc, #132]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002096:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	491a      	ldr	r1, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	4912      	ldr	r1, [pc, #72]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	490b      	ldr	r1, [pc, #44]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3748      	adds	r7, #72	; 0x48
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000

08002110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e040      	b.n	80021a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe f986 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f97a 	bl	8002448 <UART_SetConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e022      	b.n	80021a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fb88 	bl	800287c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800217a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800218a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 fc0f 	bl	80029c0 <UART_CheckIdleState>
 80021a2:	4603      	mov	r3, r0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	2b20      	cmp	r3, #32
 80021c2:	f040 8081 	bne.w	80022c8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_UART_Transmit+0x26>
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e079      	b.n	80022ca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Transmit+0x38>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e072      	b.n	80022ca <HAL_UART_Transmit+0x11e>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe fa30 	bl	800065c <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	d108      	bne.n	800222a <HAL_UART_Transmit+0x7e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	e003      	b.n	8002232 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002232:	e02d      	b.n	8002290 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2200      	movs	r2, #0
 800223c:	2180      	movs	r1, #128	; 0x80
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fc03 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e03d      	b.n	80022ca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002260:	b292      	uxth	r2, r2
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	3302      	adds	r3, #2
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	e008      	b.n	800227e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	781a      	ldrb	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b292      	uxth	r2, r2
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3301      	adds	r3, #1
 800227c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1cb      	bne.n	8002234 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2200      	movs	r2, #0
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fbcf 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e009      	b.n	80022ca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b08a      	sub	sp, #40	; 0x28
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	f040 80a8 	bne.w	800243c <HAL_UART_Receive+0x16a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_UART_Receive+0x26>
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0a0      	b.n	800243e <HAL_UART_Receive+0x16c>
    }

    __HAL_LOCK(huart);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_UART_Receive+0x38>
 8002306:	2302      	movs	r3, #2
 8002308:	e099      	b.n	800243e <HAL_UART_Receive+0x16c>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2222      	movs	r2, #34	; 0x22
 800231c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800231e:	f7fe f99d 	bl	800065c <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	88fa      	ldrh	r2, [r7, #6]
 8002330:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233c:	d10e      	bne.n	800235c <HAL_UART_Receive+0x8a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_UART_Receive+0x80>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f240 12ff 	movw	r2, #511	; 0x1ff
 800234c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002350:	e01a      	b.n	8002388 <HAL_UART_Receive+0xb6>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800235a:	e015      	b.n	8002388 <HAL_UART_Receive+0xb6>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <HAL_UART_Receive+0xae>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d104      	bne.n	8002376 <HAL_UART_Receive+0xa4>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002374:	e008      	b.n	8002388 <HAL_UART_Receive+0xb6>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	227f      	movs	r2, #127	; 0x7f
 800237a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800237e:	e003      	b.n	8002388 <HAL_UART_Receive+0xb6>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800238e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002398:	d108      	bne.n	80023ac <HAL_UART_Receive+0xda>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <HAL_UART_Receive+0xda>
    {
      pdata8bits  = NULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	e003      	b.n	80023b4 <HAL_UART_Receive+0xe2>
    }
    else
    {
      pdata8bits  = pData;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023b4:	e033      	b.n	800241e <HAL_UART_Receive+0x14c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2120      	movs	r1, #32
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb42 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Receive+0xfe>
      {
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e036      	b.n	800243e <HAL_UART_Receive+0x16c>
      }
      if (pdata8bits == NULL)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <HAL_UART_Receive+0x11e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80023dc:	b29a      	uxth	r2, r3
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	3302      	adds	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	e00d      	b.n	800240c <HAL_UART_Receive+0x13a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	8a7b      	ldrh	r3, [r7, #18]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	4013      	ands	r3, r2
 8002400:	b2da      	uxtb	r2, r3
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3301      	adds	r3, #1
 800240a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1c5      	bne.n	80023b6 <HAL_UART_Receive+0xe4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_UART_Receive+0x16c>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3720      	adds	r7, #32
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800247a:	f023 030c 	bic.w	r3, r3, #12
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	6939      	ldr	r1, [r7, #16]
 8002484:	430b      	orrs	r3, r1
 8002486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4aa9      	ldr	r2, [pc, #676]	; (800276c <UART_SetConfig+0x324>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d121      	bne.n	8002510 <UART_SetConfig+0xc8>
 80024cc:	4ba8      	ldr	r3, [pc, #672]	; (8002770 <UART_SetConfig+0x328>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d817      	bhi.n	8002508 <UART_SetConfig+0xc0>
 80024d8:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <UART_SetConfig+0x98>)
 80024da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024de:	bf00      	nop
 80024e0:	080024f1 	.word	0x080024f1
 80024e4:	080024fd 	.word	0x080024fd
 80024e8:	08002503 	.word	0x08002503
 80024ec:	080024f7 	.word	0x080024f7
 80024f0:	2301      	movs	r3, #1
 80024f2:	77fb      	strb	r3, [r7, #31]
 80024f4:	e0b2      	b.n	800265c <UART_SetConfig+0x214>
 80024f6:	2302      	movs	r3, #2
 80024f8:	77fb      	strb	r3, [r7, #31]
 80024fa:	e0af      	b.n	800265c <UART_SetConfig+0x214>
 80024fc:	2304      	movs	r3, #4
 80024fe:	77fb      	strb	r3, [r7, #31]
 8002500:	e0ac      	b.n	800265c <UART_SetConfig+0x214>
 8002502:	2308      	movs	r3, #8
 8002504:	77fb      	strb	r3, [r7, #31]
 8002506:	e0a9      	b.n	800265c <UART_SetConfig+0x214>
 8002508:	2310      	movs	r3, #16
 800250a:	77fb      	strb	r3, [r7, #31]
 800250c:	bf00      	nop
 800250e:	e0a5      	b.n	800265c <UART_SetConfig+0x214>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a97      	ldr	r2, [pc, #604]	; (8002774 <UART_SetConfig+0x32c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d123      	bne.n	8002562 <UART_SetConfig+0x11a>
 800251a:	4b95      	ldr	r3, [pc, #596]	; (8002770 <UART_SetConfig+0x328>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002526:	d012      	beq.n	800254e <UART_SetConfig+0x106>
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d802      	bhi.n	8002534 <UART_SetConfig+0xec>
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <UART_SetConfig+0xfa>
 8002532:	e012      	b.n	800255a <UART_SetConfig+0x112>
 8002534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002538:	d00c      	beq.n	8002554 <UART_SetConfig+0x10c>
 800253a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800253e:	d003      	beq.n	8002548 <UART_SetConfig+0x100>
 8002540:	e00b      	b.n	800255a <UART_SetConfig+0x112>
 8002542:	2300      	movs	r3, #0
 8002544:	77fb      	strb	r3, [r7, #31]
 8002546:	e089      	b.n	800265c <UART_SetConfig+0x214>
 8002548:	2302      	movs	r3, #2
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	e086      	b.n	800265c <UART_SetConfig+0x214>
 800254e:	2304      	movs	r3, #4
 8002550:	77fb      	strb	r3, [r7, #31]
 8002552:	e083      	b.n	800265c <UART_SetConfig+0x214>
 8002554:	2308      	movs	r3, #8
 8002556:	77fb      	strb	r3, [r7, #31]
 8002558:	e080      	b.n	800265c <UART_SetConfig+0x214>
 800255a:	2310      	movs	r3, #16
 800255c:	77fb      	strb	r3, [r7, #31]
 800255e:	bf00      	nop
 8002560:	e07c      	b.n	800265c <UART_SetConfig+0x214>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a84      	ldr	r2, [pc, #528]	; (8002778 <UART_SetConfig+0x330>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d123      	bne.n	80025b4 <UART_SetConfig+0x16c>
 800256c:	4b80      	ldr	r3, [pc, #512]	; (8002770 <UART_SetConfig+0x328>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002574:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002578:	d012      	beq.n	80025a0 <UART_SetConfig+0x158>
 800257a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800257e:	d802      	bhi.n	8002586 <UART_SetConfig+0x13e>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <UART_SetConfig+0x14c>
 8002584:	e012      	b.n	80025ac <UART_SetConfig+0x164>
 8002586:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800258a:	d00c      	beq.n	80025a6 <UART_SetConfig+0x15e>
 800258c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002590:	d003      	beq.n	800259a <UART_SetConfig+0x152>
 8002592:	e00b      	b.n	80025ac <UART_SetConfig+0x164>
 8002594:	2300      	movs	r3, #0
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	e060      	b.n	800265c <UART_SetConfig+0x214>
 800259a:	2302      	movs	r3, #2
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	e05d      	b.n	800265c <UART_SetConfig+0x214>
 80025a0:	2304      	movs	r3, #4
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e05a      	b.n	800265c <UART_SetConfig+0x214>
 80025a6:	2308      	movs	r3, #8
 80025a8:	77fb      	strb	r3, [r7, #31]
 80025aa:	e057      	b.n	800265c <UART_SetConfig+0x214>
 80025ac:	2310      	movs	r3, #16
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	bf00      	nop
 80025b2:	e053      	b.n	800265c <UART_SetConfig+0x214>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a70      	ldr	r2, [pc, #448]	; (800277c <UART_SetConfig+0x334>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d123      	bne.n	8002606 <UART_SetConfig+0x1be>
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <UART_SetConfig+0x328>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80025c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ca:	d012      	beq.n	80025f2 <UART_SetConfig+0x1aa>
 80025cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d0:	d802      	bhi.n	80025d8 <UART_SetConfig+0x190>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <UART_SetConfig+0x19e>
 80025d6:	e012      	b.n	80025fe <UART_SetConfig+0x1b6>
 80025d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025dc:	d00c      	beq.n	80025f8 <UART_SetConfig+0x1b0>
 80025de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025e2:	d003      	beq.n	80025ec <UART_SetConfig+0x1a4>
 80025e4:	e00b      	b.n	80025fe <UART_SetConfig+0x1b6>
 80025e6:	2300      	movs	r3, #0
 80025e8:	77fb      	strb	r3, [r7, #31]
 80025ea:	e037      	b.n	800265c <UART_SetConfig+0x214>
 80025ec:	2302      	movs	r3, #2
 80025ee:	77fb      	strb	r3, [r7, #31]
 80025f0:	e034      	b.n	800265c <UART_SetConfig+0x214>
 80025f2:	2304      	movs	r3, #4
 80025f4:	77fb      	strb	r3, [r7, #31]
 80025f6:	e031      	b.n	800265c <UART_SetConfig+0x214>
 80025f8:	2308      	movs	r3, #8
 80025fa:	77fb      	strb	r3, [r7, #31]
 80025fc:	e02e      	b.n	800265c <UART_SetConfig+0x214>
 80025fe:	2310      	movs	r3, #16
 8002600:	77fb      	strb	r3, [r7, #31]
 8002602:	bf00      	nop
 8002604:	e02a      	b.n	800265c <UART_SetConfig+0x214>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <UART_SetConfig+0x338>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d123      	bne.n	8002658 <UART_SetConfig+0x210>
 8002610:	4b57      	ldr	r3, [pc, #348]	; (8002770 <UART_SetConfig+0x328>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261c:	d012      	beq.n	8002644 <UART_SetConfig+0x1fc>
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002622:	d802      	bhi.n	800262a <UART_SetConfig+0x1e2>
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <UART_SetConfig+0x1f0>
 8002628:	e012      	b.n	8002650 <UART_SetConfig+0x208>
 800262a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800262e:	d00c      	beq.n	800264a <UART_SetConfig+0x202>
 8002630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002634:	d003      	beq.n	800263e <UART_SetConfig+0x1f6>
 8002636:	e00b      	b.n	8002650 <UART_SetConfig+0x208>
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	e00e      	b.n	800265c <UART_SetConfig+0x214>
 800263e:	2302      	movs	r3, #2
 8002640:	77fb      	strb	r3, [r7, #31]
 8002642:	e00b      	b.n	800265c <UART_SetConfig+0x214>
 8002644:	2304      	movs	r3, #4
 8002646:	77fb      	strb	r3, [r7, #31]
 8002648:	e008      	b.n	800265c <UART_SetConfig+0x214>
 800264a:	2308      	movs	r3, #8
 800264c:	77fb      	strb	r3, [r7, #31]
 800264e:	e005      	b.n	800265c <UART_SetConfig+0x214>
 8002650:	2310      	movs	r3, #16
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	bf00      	nop
 8002656:	e001      	b.n	800265c <UART_SetConfig+0x214>
 8002658:	2310      	movs	r3, #16
 800265a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002664:	f040 808e 	bne.w	8002784 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002668:	7ffb      	ldrb	r3, [r7, #31]
 800266a:	2b08      	cmp	r3, #8
 800266c:	d85e      	bhi.n	800272c <UART_SetConfig+0x2e4>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <UART_SetConfig+0x22c>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002699 	.word	0x08002699
 8002678:	080026b9 	.word	0x080026b9
 800267c:	080026d9 	.word	0x080026d9
 8002680:	0800272d 	.word	0x0800272d
 8002684:	080026f5 	.word	0x080026f5
 8002688:	0800272d 	.word	0x0800272d
 800268c:	0800272d 	.word	0x0800272d
 8002690:	0800272d 	.word	0x0800272d
 8002694:	08002715 	.word	0x08002715
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002698:	f7ff fb46 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 800269c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	005a      	lsls	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	61bb      	str	r3, [r7, #24]
        break;
 80026b6:	e03c      	b.n	8002732 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026b8:	f7ff fb58 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 80026bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	005a      	lsls	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	61bb      	str	r3, [r7, #24]
        break;
 80026d6:	e02c      	b.n	8002732 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80026e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6852      	ldr	r2, [r2, #4]
 80026ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	61bb      	str	r3, [r7, #24]
        break;
 80026f2:	e01e      	b.n	8002732 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026f4:	f7ff faa2 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 80026f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	085b      	lsrs	r3, r3, #1
 8002704:	441a      	add	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	fbb2 f3f3 	udiv	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	61bb      	str	r3, [r7, #24]
        break;
 8002712:	e00e      	b.n	8002732 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	fbb2 f3f3 	udiv	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	61bb      	str	r3, [r7, #24]
        break;
 800272a:	e002      	b.n	8002732 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
        break;
 8002730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b0f      	cmp	r3, #15
 8002736:	d916      	bls.n	8002766 <UART_SetConfig+0x31e>
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273e:	d212      	bcs.n	8002766 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f023 030f 	bic.w	r3, r3, #15
 8002748:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	b29a      	uxth	r2, r3
 8002756:	897b      	ldrh	r3, [r7, #10]
 8002758:	4313      	orrs	r3, r2
 800275a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	897a      	ldrh	r2, [r7, #10]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	e07e      	b.n	8002864 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
 800276a:	e07b      	b.n	8002864 <UART_SetConfig+0x41c>
 800276c:	40013800 	.word	0x40013800
 8002770:	40021000 	.word	0x40021000
 8002774:	40004400 	.word	0x40004400
 8002778:	40004800 	.word	0x40004800
 800277c:	40004c00 	.word	0x40004c00
 8002780:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d85b      	bhi.n	8002842 <UART_SetConfig+0x3fa>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <UART_SetConfig+0x348>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027d3 	.word	0x080027d3
 8002798:	080027f1 	.word	0x080027f1
 800279c:	08002843 	.word	0x08002843
 80027a0:	0800280d 	.word	0x0800280d
 80027a4:	08002843 	.word	0x08002843
 80027a8:	08002843 	.word	0x08002843
 80027ac:	08002843 	.word	0x08002843
 80027b0:	0800282b 	.word	0x0800282b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b4:	f7ff fab8 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 80027b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	085a      	lsrs	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	441a      	add	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	61bb      	str	r3, [r7, #24]
        break;
 80027d0:	e03a      	b.n	8002848 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d2:	f7ff facb 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 80027d6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	085a      	lsrs	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	441a      	add	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	61bb      	str	r3, [r7, #24]
        break;
 80027ee:	e02b      	b.n	8002848 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80027fa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6852      	ldr	r2, [r2, #4]
 8002802:	fbb3 f3f2 	udiv	r3, r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	61bb      	str	r3, [r7, #24]
        break;
 800280a:	e01d      	b.n	8002848 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800280c:	f7ff fa16 	bl	8001c3c <HAL_RCC_GetSysClockFreq>
 8002810:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	085a      	lsrs	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	441a      	add	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	61bb      	str	r3, [r7, #24]
        break;
 8002828:	e00e      	b.n	8002848 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	b29b      	uxth	r3, r3
 800283e:	61bb      	str	r3, [r7, #24]
        break;
 8002840:	e002      	b.n	8002848 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
        break;
 8002846:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	d908      	bls.n	8002860 <UART_SetConfig+0x418>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d204      	bcs.n	8002860 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e001      	b.n	8002864 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002870:	7dfb      	ldrb	r3, [r7, #23]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop

0800287c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01a      	beq.n	8002992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297a:	d10a      	bne.n	8002992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80029ce:	f7fd fe45 	bl	800065c <HAL_GetTick>
 80029d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d10e      	bne.n	8002a00 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f82a 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e020      	b.n	8002a42 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d10e      	bne.n	8002a2c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f814 	bl	8002a4a <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e00a      	b.n	8002a42 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5a:	e05d      	b.n	8002b18 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d059      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a64:	f7fd fdfa 	bl	800065c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d302      	bcc.n	8002a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11b      	bne.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e042      	b.n	8002b38 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02b      	beq.n	8002b18 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ace:	d123      	bne.n	8002b18 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ae8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e00f      	b.n	8002b38 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	4013      	ands	r3, r2
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d092      	beq.n	8002a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <__libc_init_array>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	4e0d      	ldr	r6, [pc, #52]	; (8002b78 <__libc_init_array+0x38>)
 8002b44:	4c0d      	ldr	r4, [pc, #52]	; (8002b7c <__libc_init_array+0x3c>)
 8002b46:	1ba4      	subs	r4, r4, r6
 8002b48:	10a4      	asrs	r4, r4, #2
 8002b4a:	2500      	movs	r5, #0
 8002b4c:	42a5      	cmp	r5, r4
 8002b4e:	d109      	bne.n	8002b64 <__libc_init_array+0x24>
 8002b50:	4e0b      	ldr	r6, [pc, #44]	; (8002b80 <__libc_init_array+0x40>)
 8002b52:	4c0c      	ldr	r4, [pc, #48]	; (8002b84 <__libc_init_array+0x44>)
 8002b54:	f000 f820 	bl	8002b98 <_init>
 8002b58:	1ba4      	subs	r4, r4, r6
 8002b5a:	10a4      	asrs	r4, r4, #2
 8002b5c:	2500      	movs	r5, #0
 8002b5e:	42a5      	cmp	r5, r4
 8002b60:	d105      	bne.n	8002b6e <__libc_init_array+0x2e>
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b68:	4798      	blx	r3
 8002b6a:	3501      	adds	r5, #1
 8002b6c:	e7ee      	b.n	8002b4c <__libc_init_array+0xc>
 8002b6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b72:	4798      	blx	r3
 8002b74:	3501      	adds	r5, #1
 8002b76:	e7f2      	b.n	8002b5e <__libc_init_array+0x1e>
 8002b78:	08002be8 	.word	0x08002be8
 8002b7c:	08002be8 	.word	0x08002be8
 8002b80:	08002be8 	.word	0x08002be8
 8002b84:	08002bec 	.word	0x08002bec

08002b88 <memset>:
 8002b88:	4402      	add	r2, r0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d100      	bne.n	8002b92 <memset+0xa>
 8002b90:	4770      	bx	lr
 8002b92:	f803 1b01 	strb.w	r1, [r3], #1
 8002b96:	e7f9      	b.n	8002b8c <memset+0x4>

08002b98 <_init>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr

08002ba4 <_fini>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

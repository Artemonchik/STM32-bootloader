
code-transmition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c0c  08004c0c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000098  08004ca8  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004ca8  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ecd  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c56  00000000  00000000  00029f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000890  00000000  00000000  0002bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019e80  00000000  00000000  0002cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fd5  00000000  00000000  00046aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000948ad  00000000  00000000  0004ea75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3322  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024cc  00000000  00000000  000e33a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800471c 	.word	0x0800471c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800471c 	.word	0x0800471c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <sendData>:
/* USER CODE BEGIN 0 */
/**
 * integer length value of data you want to send in special format
 */
HAL_StatusTypeDef sendData(UART_HandleTypeDef *huart, int32_t messageCode,
		uint8_t *data, uint32_t len, uint32_t timeout) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) (&len), sizeof(len), timeout);
 800028e:	4639      	mov	r1, r7
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	2204      	movs	r2, #4
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 fba5 	bl	80029e4 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*) (&messageCode), sizeof(messageCode),
 800029a:	f107 0108 	add.w	r1, r7, #8
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	2204      	movs	r2, #4
 80002a2:	68f8      	ldr	r0, [r7, #12]
 80002a4:	f002 fb9e 	bl	80029e4 <HAL_UART_Transmit>
			timeout);
	return HAL_UART_Transmit(huart, data, len, timeout);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	68f8      	ldr	r0, [r7, #12]
 80002b2:	f002 fb97 	bl	80029e4 <HAL_UART_Transmit>
 80002b6:	4603      	mov	r3, r0
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <HAL_printf>:

/**
 * As you can see, max size of sending string after formating must be at most 255 characters*/
HAL_StatusTypeDef HAL_printf(const char *format, ...) {
 80002c0:	b40f      	push	{r0, r1, r2, r3}
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b0c4      	sub	sp, #272	; 0x110
 80002c6:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg;
	va_start(arg, format);
 80002c8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80002cc:	463b      	mov	r3, r7
 80002ce:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 80002d0:	463b      	mov	r3, r7
 80002d2:	1d38      	adds	r0, r7, #4
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80002da:	f003 fe39 	bl	8003f50 <vsiprintf>
	HAL_StatusTypeDef result = sendData(&huart1, STR, (uint8_t*) buff,
			(int32_t) strlen(buff), 3000);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff75 	bl	80001d0 <strlen>
 80002e6:	4601      	mov	r1, r0
	HAL_StatusTypeDef result = sendData(&huart1, STR, (uint8_t*) buff,
 80002e8:	1d3a      	adds	r2, r7, #4
 80002ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	460b      	mov	r3, r1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <HAL_printf+0x54>)
 80002f6:	f7ff ffc3 	bl	8000280 <sendData>
 80002fa:	4603      	mov	r3, r0
 80002fc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(arg);
	return result;
 8000300:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8000304:	4618      	mov	r0, r3
 8000306:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800030a:	46bd      	mov	sp, r7
 800030c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000310:	b004      	add	sp, #16
 8000312:	4770      	bx	lr
 8000314:	200001c0 	.word	0x200001c0

08000318 <HAL_eprintf>:
HAL_StatusTypeDef HAL_eprintf(const char *format, ...) {
 8000318:	b40f      	push	{r0, r1, r2, r3}
 800031a:	b580      	push	{r7, lr}
 800031c:	b0c4      	sub	sp, #272	; 0x110
 800031e:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg;
	va_start(arg, format);
 8000320:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000324:	463b      	mov	r3, r7
 8000326:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 8000328:	463b      	mov	r3, r7
 800032a:	1d38      	adds	r0, r7, #4
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000332:	f003 fe0d 	bl	8003f50 <vsiprintf>
	HAL_StatusTypeDef result = sendData(&huart1, ERRORSTR, (uint8_t*) buff,
			(int) strlen(buff), 3000);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff49 	bl	80001d0 <strlen>
 800033e:	4601      	mov	r1, r0
	HAL_StatusTypeDef result = sendData(&huart1, ERRORSTR, (uint8_t*) buff,
 8000340:	1d3a      	adds	r2, r7, #4
 8000342:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	460b      	mov	r3, r1
 800034a:	2102      	movs	r1, #2
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <HAL_eprintf+0x54>)
 800034e:	f7ff ff97 	bl	8000280 <sendData>
 8000352:	4603      	mov	r3, r0
 8000354:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(arg);
	return result;
 8000358:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 800035c:	4618      	mov	r0, r3
 800035e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000362:	46bd      	mov	sp, r7
 8000364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000368:	b004      	add	sp, #16
 800036a:	4770      	bx	lr
 800036c:	200001c0 	.word	0x200001c0

08000370 <receive_uint_32>:

/**
 * @return uint_32 from UART or -1 if occurred and error
 */
int32_t receive_uint_32(UART_HandleTypeDef *huart, uint32_t timeout) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	int32_t result = -1;
 800037a:	f04f 33ff 	mov.w	r3, #4294967295
 800037e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(huart, (uint8_t*) (&result), sizeof(int32_t), timeout);
 8000380:	f107 010c 	add.w	r1, r7, #12
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	2204      	movs	r2, #4
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f002 fbbe 	bl	8002b0a <HAL_UART_Receive>
	return result;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <receive256bit>:

HAL_StatusTypeDef receive256bit(UART_HandleTypeDef *huart, uint8_t *buff,
		uint32_t timeout) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
	return HAL_UART_Receive(huart, buff, (uint16_t) BUF_SIZE, timeout);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2210      	movs	r2, #16
 80003a8:	68b9      	ldr	r1, [r7, #8]
 80003aa:	68f8      	ldr	r0, [r7, #12]
 80003ac:	f002 fbad 	bl	8002b0a <HAL_UART_Receive>
 80003b0:	4603      	mov	r3, r0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3710      	adds	r7, #16
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <sendStartCode>:
void sendStartCode(UART_HandleTypeDef *huart) {
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b084      	sub	sp, #16
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	uint8_t code = 0xAE;
 80003c2:	23ae      	movs	r3, #174	; 0xae
 80003c4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &code, sizeof(uint8_t), 100);
 80003c6:	f107 010f 	add.w	r1, r7, #15
 80003ca:	2364      	movs	r3, #100	; 0x64
 80003cc:	2201      	movs	r2, #1
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f002 fb08 	bl	80029e4 <HAL_UART_Transmit>
}
 80003d4:	bf00      	nop
 80003d6:	3710      	adds	r7, #16
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <store256bit>:

/**
 * @note Do not forget unlock memory and erase pages where you want to store data
 */
HAL_StatusTypeDef store256bit(uint8_t *buff, uint32_t address) {
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b087      	sub	sp, #28
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result = HAL_OK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < BUF_SIZE; i += 4) {
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
 80003ee:	e01c      	b.n	800042a <store256bit+0x4e>
		HAL_StatusTypeDef currResult = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80003f0:	693a      	ldr	r2, [r7, #16]
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	18d1      	adds	r1, r2, r3
				address + i, ((uint32_t*) buff)[i / 4]);
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	da00      	bge.n	80003fe <store256bit+0x22>
 80003fc:	3303      	adds	r3, #3
 80003fe:	109b      	asrs	r3, r3, #2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	681b      	ldr	r3, [r3, #0]
		HAL_StatusTypeDef currResult = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000408:	f04f 0400 	mov.w	r4, #0
 800040c:	461a      	mov	r2, r3
 800040e:	4623      	mov	r3, r4
 8000410:	2002      	movs	r0, #2
 8000412:	f000 fc59 	bl	8000cc8 <HAL_FLASH_Program>
 8000416:	4603      	mov	r3, r0
 8000418:	73fb      	strb	r3, [r7, #15]
		if (currResult != HAL_OK) {
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <store256bit+0x48>
			result = currResult;
 8000420:	7bfb      	ldrb	r3, [r7, #15]
 8000422:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < BUF_SIZE; i += 4) {
 8000424:	693b      	ldr	r3, [r7, #16]
 8000426:	3304      	adds	r3, #4
 8000428:	613b      	str	r3, [r7, #16]
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	2b0f      	cmp	r3, #15
 800042e:	dddf      	ble.n	80003f0 <store256bit+0x14>
		}
	}
	return result;
 8000430:	7dfb      	ldrb	r3, [r7, #23]
}
 8000432:	4618      	mov	r0, r3
 8000434:	371c      	adds	r7, #28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd90      	pop	{r4, r7, pc}

0800043a <bootloader_jump_to_user_app>:

/**
 * @param address contains address where we store the main program
 */
void bootloader_jump_to_user_app(uint32_t address) {
 800043a:	b580      	push	{r7, lr}
 800043c:	b086      	sub	sp, #24
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]

	uint32_t jumpAddress;

	// Initialize the user application Stack Pointer

	__set_MSP(*(__IO uint32_t*) address);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f383 8808 	msr	MSP, r3

	// The stack pointer lives at APPLICATION_ADDRESS

	// The reset vector is at APPLICATION_ADDRESS + 4

	jumpAddress = *(__IO uint32_t*) (address + 4);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3304      	adds	r3, #4
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	617b      	str	r3, [r7, #20]

	JumpToApplication = (pFunction) jumpAddress;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	613b      	str	r3, [r7, #16]

	JumpToApplication();
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	4798      	blx	r3
}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <preparePages>:

/**
 * @note Do not forget unlock memory before cleaning any data
 */
HAL_StatusTypeDef preparePages(uint32_t address, uint32_t len) {
 8000466:	b580      	push	{r7, lr}
 8000468:	b088      	sub	sp, #32
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
	uint32_t numberOfPages = (len / PAGE_SIZE) + 1;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	0adb      	lsrs	r3, r3, #11
 8000474:	3301      	adds	r3, #1
 8000476:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseConfig = { FLASH_TYPEERASE_PAGES, address,
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	617b      	str	r3, [r7, #20]
 8000480:	69fb      	ldr	r3, [r7, #28]
 8000482:	61bb      	str	r3, [r7, #24]
			numberOfPages };
	uint32_t PageError;
	return HAL_FLASHEx_Erase(&eraseConfig, &PageError);
 8000484:	f107 020c 	add.w	r2, r7, #12
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fd4e 	bl	8000f30 <HAL_FLASHEx_Erase>
 8000494:	4603      	mov	r3, r0
}
 8000496:	4618      	mov	r0, r3
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <askForNext128bit>:

void askForNext128bit(UART_HandleTypeDef *huart) {
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af02      	add	r7, sp, #8
 80004a4:	6078      	str	r0, [r7, #4]
	uint8_t buff[1];
	sendData(huart, REQUEST, buff, 0, 1000);
 80004a6:	f107 020c 	add.w	r2, r7, #12
 80004aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2300      	movs	r3, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff fee3 	bl	8000280 <sendData>
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <decrypt>:
uint8_t key[33] = "11111111111111111111111111111111";
struct AES_ctx ctx;

void decrypt(uint8_t * buff, size_t length){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	AES_CBC_decrypt_buffer(&ctx, buff, length);
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	4803      	ldr	r0, [pc, #12]	; (80004e0 <decrypt+0x1c>)
 80004d4:	f003 fcb3 	bl	8003e3e <AES_CBC_decrypt_buffer>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200000c0 	.word	0x200000c0

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	AES_init_ctx_iv(&ctx, key, key);
 80004ea:	4a68      	ldr	r2, [pc, #416]	; (800068c <main+0x1a8>)
 80004ec:	4967      	ldr	r1, [pc, #412]	; (800068c <main+0x1a8>)
 80004ee:	4868      	ldr	r0, [pc, #416]	; (8000690 <main+0x1ac>)
 80004f0:	f003 f82e 	bl	8003550 <AES_init_ctx_iv>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa9c 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f8ee 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f96c 	bl	80007d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f93a 	bl	8000778 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	uint32_t address = 0x08020000;
 8000504:	4b63      	ldr	r3, [pc, #396]	; (8000694 <main+0x1b0>)
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timeout = 500;
 8000508:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800050c:	61fb      	str	r3, [r7, #28]
	sendStartCode(&huart1);
 800050e:	4862      	ldr	r0, [pc, #392]	; (8000698 <main+0x1b4>)
 8000510:	f7ff ff53 	bl	80003ba <sendStartCode>
	int32_t len = receive_uint_32(&huart1, timeout);
 8000514:	69f9      	ldr	r1, [r7, #28]
 8000516:	4860      	ldr	r0, [pc, #384]	; (8000698 <main+0x1b4>)
 8000518:	f7ff ff2a 	bl	8000370 <receive_uint_32>
 800051c:	61b8      	str	r0, [r7, #24]
	int32_t dataCode = receive_uint_32(&huart1, timeout);
 800051e:	69f9      	ldr	r1, [r7, #28]
 8000520:	485d      	ldr	r0, [pc, #372]	; (8000698 <main+0x1b4>)
 8000522:	f7ff ff25 	bl	8000370 <receive_uint_32>
 8000526:	6178      	str	r0, [r7, #20]
	HAL_printf("%d - bytes going to be received", len);
 8000528:	69b9      	ldr	r1, [r7, #24]
 800052a:	485c      	ldr	r0, [pc, #368]	; (800069c <main+0x1b8>)
 800052c:	f7ff fec8 	bl	80002c0 <HAL_printf>
	HAL_printf("%u - data code was received", dataCode);
 8000530:	6979      	ldr	r1, [r7, #20]
 8000532:	485b      	ldr	r0, [pc, #364]	; (80006a0 <main+0x1bc>)
 8000534:	f7ff fec4 	bl	80002c0 <HAL_printf>
	if (len == -1) {
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800053e:	d105      	bne.n	800054c <main+0x68>
		bootloader_jump_to_user_app(address);
 8000540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000542:	f7ff ff7a 	bl	800043a <bootloader_jump_to_user_app>
		HAL_printf("No data was received, starts the main program");
 8000546:	4857      	ldr	r0, [pc, #348]	; (80006a4 <main+0x1c0>)
 8000548:	f7ff feba 	bl	80002c0 <HAL_printf>
	}
	if (len % BUF_SIZE != 0) {
 800054c:	69bb      	ldr	r3, [r7, #24]
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	2b00      	cmp	r3, #0
 8000554:	d004      	beq.n	8000560 <main+0x7c>
		HAL_eprintf("Length of the file must be divisible by BUF_SIZE");
 8000556:	4854      	ldr	r0, [pc, #336]	; (80006a8 <main+0x1c4>)
 8000558:	f7ff fede 	bl	8000318 <HAL_eprintf>
		return 2;
 800055c:	2302      	movs	r3, #2
 800055e:	e090      	b.n	8000682 <main+0x19e>
	}

	if (dataCode == PROGRAM) {
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	2b03      	cmp	r3, #3
 8000564:	f040 8084 	bne.w	8000670 <main+0x18c>
		HAL_printf("Program is pending");
 8000568:	4850      	ldr	r0, [pc, #320]	; (80006ac <main+0x1c8>)
 800056a:	f7ff fea9 	bl	80002c0 <HAL_printf>
		if (HAL_FLASH_Unlock() == HAL_OK) {
 800056e:	f000 fc1b 	bl	8000da8 <HAL_FLASH_Unlock>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d103      	bne.n	8000580 <main+0x9c>
			HAL_printf("Unlocking was successful");
 8000578:	484d      	ldr	r0, [pc, #308]	; (80006b0 <main+0x1cc>)
 800057a:	f7ff fea1 	bl	80002c0 <HAL_printf>
 800057e:	e002      	b.n	8000586 <main+0xa2>
		} else {
			HAL_eprintf("Unlocking failed");
 8000580:	484c      	ldr	r0, [pc, #304]	; (80006b4 <main+0x1d0>)
 8000582:	f7ff fec9 	bl	8000318 <HAL_eprintf>
		};
		HAL_StatusTypeDef result = preparePages(address, len);
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	4619      	mov	r1, r3
 800058a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800058c:	f7ff ff6b 	bl	8000466 <preparePages>
 8000590:	4603      	mov	r3, r0
 8000592:	74fb      	strb	r3, [r7, #19]
		if (result != HAL_OK) {
 8000594:	7cfb      	ldrb	r3, [r7, #19]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d005      	beq.n	80005a6 <main+0xc2>
			HAL_eprintf(
 800059a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800059c:	4846      	ldr	r0, [pc, #280]	; (80006b8 <main+0x1d4>)
 800059e:	f7ff febb 	bl	8000318 <HAL_eprintf>
					"An error occurred while erasing pages started with the address",
					address);
			return 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	e06d      	b.n	8000682 <main+0x19e>
		}
		if (result == HAL_OK) {
 80005a6:	7cfb      	ldrb	r3, [r7, #19]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <main+0xce>
			HAL_printf("Pages was erased successfully");
 80005ac:	4843      	ldr	r0, [pc, #268]	; (80006bc <main+0x1d8>)
 80005ae:	f7ff fe87 	bl	80002c0 <HAL_printf>
		}

		for (int32_t i = 0; i < len; i += BUF_SIZE, address += BUF_SIZE) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
 80005b6:	e055      	b.n	8000664 <main+0x180>
			uint8_t buff[BUF_SIZE];
			askForNext128bit(&huart1);
 80005b8:	4837      	ldr	r0, [pc, #220]	; (8000698 <main+0x1b4>)
 80005ba:	f7ff ff70 	bl	800049e <askForNext128bit>
			HAL_StatusTypeDef result = receive256bit(&huart1, buff,
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4833      	ldr	r0, [pc, #204]	; (8000698 <main+0x1b4>)
 80005ca:	f7ff fee5 	bl	8000398 <receive256bit>
 80005ce:	4603      	mov	r3, r0
 80005d0:	74bb      	strb	r3, [r7, #18]
					timeout + 400);
			decrypt(buff, BUF_SIZE);
 80005d2:	463b      	mov	r3, r7
 80005d4:	2110      	movs	r1, #16
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff74 	bl	80004c4 <decrypt>
			if (result != HAL_OK) {
 80005dc:	7cbb      	ldrb	r3, [r7, #18]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d00a      	beq.n	80005f8 <main+0x114>
				HAL_eprintf(
 80005e2:	6a3b      	ldr	r3, [r7, #32]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <main+0x106>
 80005e8:	330f      	adds	r3, #15
 80005ea:	111b      	asrs	r3, r3, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4834      	ldr	r0, [pc, #208]	; (80006c0 <main+0x1dc>)
 80005f0:	f7ff fe92 	bl	8000318 <HAL_eprintf>
						"An error occurred while transferring data: %d block",
						i / BUF_SIZE);
				return 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	e044      	b.n	8000682 <main+0x19e>
			}
			if (result == HAL_OK) {
 80005f8:	7cbb      	ldrb	r3, [r7, #18]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10d      	bne.n	800061a <main+0x136>
				HAL_printf("%d block was received", i / BUF_SIZE);
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	2b00      	cmp	r3, #0
 8000602:	da00      	bge.n	8000606 <main+0x122>
 8000604:	330f      	adds	r3, #15
 8000606:	111b      	asrs	r3, r3, #4
 8000608:	4619      	mov	r1, r3
 800060a:	482e      	ldr	r0, [pc, #184]	; (80006c4 <main+0x1e0>)
 800060c:	f7ff fe58 	bl	80002c0 <HAL_printf>
				HAL_printf("message is: %s", buff);
 8000610:	463b      	mov	r3, r7
 8000612:	4619      	mov	r1, r3
 8000614:	482c      	ldr	r0, [pc, #176]	; (80006c8 <main+0x1e4>)
 8000616:	f7ff fe53 	bl	80002c0 <HAL_printf>
			}

			HAL_StatusTypeDef writeResult = store256bit(buff, address);
 800061a:	463b      	mov	r3, r7
 800061c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fedc 	bl	80003dc <store256bit>
 8000624:	4603      	mov	r3, r0
 8000626:	747b      	strb	r3, [r7, #17]
			if (writeResult == HAL_OK) {
 8000628:	7c7b      	ldrb	r3, [r7, #17]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10a      	bne.n	8000644 <main+0x160>
				HAL_printf("%d block was received and stored at 0x%x address",
 800062e:	6a3b      	ldr	r3, [r7, #32]
 8000630:	2b00      	cmp	r3, #0
 8000632:	da00      	bge.n	8000636 <main+0x152>
 8000634:	330f      	adds	r3, #15
 8000636:	111b      	asrs	r3, r3, #4
 8000638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800063a:	4619      	mov	r1, r3
 800063c:	4823      	ldr	r0, [pc, #140]	; (80006cc <main+0x1e8>)
 800063e:	f7ff fe3f 	bl	80002c0 <HAL_printf>
 8000642:	e009      	b.n	8000658 <main+0x174>
						i / BUF_SIZE, address);
			} else {
				HAL_printf(
 8000644:	6a3b      	ldr	r3, [r7, #32]
 8000646:	2b00      	cmp	r3, #0
 8000648:	da00      	bge.n	800064c <main+0x168>
 800064a:	330f      	adds	r3, #15
 800064c:	111b      	asrs	r3, r3, #4
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	481f      	ldr	r0, [pc, #124]	; (80006d0 <main+0x1ec>)
 8000654:	f7ff fe34 	bl	80002c0 <HAL_printf>
		for (int32_t i = 0; i < len; i += BUF_SIZE, address += BUF_SIZE) {
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	3310      	adds	r3, #16
 800065c:	623b      	str	r3, [r7, #32]
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	3310      	adds	r3, #16
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
 8000664:	6a3a      	ldr	r2, [r7, #32]
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	429a      	cmp	r2, r3
 800066a:	dba5      	blt.n	80005b8 <main+0xd4>
						"An error occurred while writing data: %d block in 0x%x address",
						i / BUF_SIZE, address);
			}

		}
		HAL_FLASH_Lock();
 800066c:	f000 fbc2 	bl	8000df4 <HAL_FLASH_Lock>
	}

	HAL_printf(
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0x1f0>)
 8000672:	f7ff fe25 	bl	80002c0 <HAL_printf>
			"#####\n#####\n All data was received and successfully stored \n#####\n#####\n");
	address = 0x08020000;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <main+0x1b0>)
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
	bootloader_jump_to_user_app(address);
 800067a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800067c:	f7ff fedd 	bl	800043a <bootloader_jump_to_user_app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000680:	e7fe      	b.n	8000680 <main+0x19c>

    /* USER CODE BEGIN 3 */
	}

  /* USER CODE END 3 */
}
 8000682:	4618      	mov	r0, r3
 8000684:	3728      	adds	r7, #40	; 0x28
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000000 	.word	0x20000000
 8000690:	200000c0 	.word	0x200000c0
 8000694:	08020000 	.word	0x08020000
 8000698:	200001c0 	.word	0x200001c0
 800069c:	08004734 	.word	0x08004734
 80006a0:	08004754 	.word	0x08004754
 80006a4:	08004770 	.word	0x08004770
 80006a8:	080047a0 	.word	0x080047a0
 80006ac:	080047d4 	.word	0x080047d4
 80006b0:	080047e8 	.word	0x080047e8
 80006b4:	08004804 	.word	0x08004804
 80006b8:	08004818 	.word	0x08004818
 80006bc:	08004858 	.word	0x08004858
 80006c0:	08004878 	.word	0x08004878
 80006c4:	080048ac 	.word	0x080048ac
 80006c8:	080048c4 	.word	0x080048c4
 80006cc:	080048d4 	.word	0x080048d4
 80006d0:	08004908 	.word	0x08004908
 80006d4:	08004948 	.word	0x08004948

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09e      	sub	sp, #120	; 0x78
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e2:	2228      	movs	r2, #40	; 0x28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 fc13 	bl	8003f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	223c      	movs	r2, #60	; 0x3c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fc05 	bl	8003f12 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fe25 	bl	800136c <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000728:	f000 f86e 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fd18 	bl	800217c <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000752:	f000 f859 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000756:	2301      	movs	r3, #1
 8000758:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4618      	mov	r0, r3
 8000762:	f001 ff41 	bl	80025e8 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800076c:	f000 f84c 	bl	8000808 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3778      	adds	r7, #120	; 0x78
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	; (80007d4 <MX_USART1_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART1_UART_Init+0x58>)
 80007bc:	f002 f8c4 	bl	8002948 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f81f 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001c0 	.word	0x200001c0
 80007d4:	40013800 	.word	0x40013800

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x2c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x44>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6193      	str	r3, [r2, #24]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x44>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x44>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x44>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x44>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <HAL_UART_MspInit+0x80>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d129      	bne.n	80008d6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_UART_MspInit+0x84>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_UART_MspInit+0x84>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_UART_MspInit+0x84>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_UART_MspInit+0x84>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0x84>)
 80008a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_UART_MspInit+0x84>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c4:	2307      	movs	r3, #7
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fbd1 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	; 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f8be 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f003 fa98 	bl	8003ea8 <__errno>
 8000978:	4602      	mov	r2, r0
 800097a:	230c      	movs	r3, #12
 800097c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000a000 	.word	0x2000a000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	200000b4 	.word	0x200000b4
 80009ac:	20000270 	.word	0x20000270

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <SystemInit+0x28>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <SystemInit+0x28>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SystemInit+0x28>)
 80009c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ca:	609a      	str	r2, [r3, #8]
#endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009e2:	e003      	b.n	80009ec <LoopCopyDataInit>

080009e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009ea:	3104      	adds	r1, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <LoopForever+0xa>)
	ldr	r3, =_edata
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009f4:	d3f6      	bcc.n	80009e4 <CopyDataInit>
	ldr	r2, =_sbss
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <LoopForever+0x12>)
	b	LoopFillZerobss
 80009f8:	e002      	b.n	8000a00 <LoopFillZerobss>

080009fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009fc:	f842 3b04 	str.w	r3, [r2], #4

08000a00 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <LoopForever+0x16>)
	cmp	r2, r3
 8000a02:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a04:	d3f9      	bcc.n	80009fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a06:	f7ff ffd3 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f003 fa53 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0e:	f7ff fd69 	bl	80004e4 <main>

08000a12 <LoopForever>:

LoopForever:
    b LoopForever
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a14:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000a18:	08004c14 	.word	0x08004c14
	ldr	r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a20:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8000a24:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8000a28:	2000026c 	.word	0x2000026c

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x28>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x28>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f90d 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff fee4 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f917 	bl	8000cae <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f8ed 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000024 	.word	0x20000024
 8000ab4:	2000002c 	.word	0x2000002c
 8000ab8:	20000028 	.word	0x20000028

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000002c 	.word	0x2000002c
 8000ae0:	20000240 	.word	0x20000240

08000ae4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000240 	.word	0x20000240

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff47 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff5c 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffb0 	bl	8000c1c <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_FLASH_Program+0xd8>)
 8000ce4:	7e1b      	ldrb	r3, [r3, #24]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <HAL_FLASH_Program+0x26>
 8000cea:	2302      	movs	r3, #2
 8000cec:	e054      	b.n	8000d98 <HAL_FLASH_Program+0xd0>
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <HAL_FLASH_Program+0xd8>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cf8:	f000 f8a8 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d144      	bne.n	8000d90 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d102      	bne.n	8000d12 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	757b      	strb	r3, [r7, #21]
 8000d10:	e007      	b.n	8000d22 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d102      	bne.n	8000d1e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	757b      	strb	r3, [r7, #21]
 8000d1c:	e001      	b.n	8000d22 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	75bb      	strb	r3, [r7, #22]
 8000d26:	e02d      	b.n	8000d84 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000d28:	7dbb      	ldrb	r3, [r7, #22]
 8000d2a:	005a      	lsls	r2, r3, #1
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	eb02 0c03 	add.w	ip, r2, r3
 8000d32:	7dbb      	ldrb	r3, [r7, #22]
 8000d34:	0119      	lsls	r1, r3, #4
 8000d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d3a:	f1c1 0620 	rsb	r6, r1, #32
 8000d3e:	f1a1 0020 	sub.w	r0, r1, #32
 8000d42:	fa22 f401 	lsr.w	r4, r2, r1
 8000d46:	fa03 f606 	lsl.w	r6, r3, r6
 8000d4a:	4334      	orrs	r4, r6
 8000d4c:	fa23 f000 	lsr.w	r0, r3, r0
 8000d50:	4304      	orrs	r4, r0
 8000d52:	fa23 f501 	lsr.w	r5, r3, r1
 8000d56:	b2a3      	uxth	r3, r4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	f000 f85a 	bl	8000e14 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d64:	f000 f872 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_FLASH_Program+0xdc>)
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <HAL_FLASH_Program+0xdc>)
 8000d72:	f023 0301 	bic.w	r3, r3, #1
 8000d76:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d107      	bne.n	8000d8e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000d7e:	7dbb      	ldrb	r3, [r7, #22]
 8000d80:	3301      	adds	r3, #1
 8000d82:	75bb      	strb	r3, [r7, #22]
 8000d84:	7dba      	ldrb	r2, [r7, #22]
 8000d86:	7d7b      	ldrb	r3, [r7, #21]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3cd      	bcc.n	8000d28 <HAL_FLASH_Program+0x60>
 8000d8c:	e000      	b.n	8000d90 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000d8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_FLASH_Program+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	761a      	strb	r2, [r3, #24]

  return status;
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	20000248 	.word	0x20000248
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000db2:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_FLASH_Unlock+0x40>)
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00d      	beq.n	8000dda <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_FLASH_Unlock+0x40>)
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_FLASH_Unlock+0x44>)
 8000dc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_FLASH_Unlock+0x40>)
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_FLASH_Unlock+0x48>)
 8000dc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_FLASH_Unlock+0x40>)
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dda:	79fb      	ldrb	r3, [r7, #7]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	40022000 	.word	0x40022000
 8000dec:	45670123 	.word	0x45670123
 8000df0:	cdef89ab 	.word	0xcdef89ab

08000df4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_FLASH_Lock+0x1c>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_FLASH_Lock+0x1c>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e02:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40022000 	.word	0x40022000

08000e14 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <FLASH_Program_HalfWord+0x30>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <FLASH_Program_HalfWord+0x34>)
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <FLASH_Program_HalfWord+0x34>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	801a      	strh	r2, [r3, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000248 	.word	0x20000248
 8000e48:	40022000 	.word	0x40022000

08000e4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff fe46 	bl	8000ae4 <HAL_GetTick>
 8000e58:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e5a:	e010      	b.n	8000e7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e62:	d00c      	beq.n	8000e7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <FLASH_WaitForLastOperation+0x2e>
 8000e6a:	f7ff fe3b 	bl	8000ae4 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d201      	bcs.n	8000e7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e01f      	b.n	8000ebe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <FLASH_WaitForLastOperation+0x7c>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d0e8      	beq.n	8000e5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <FLASH_WaitForLastOperation+0x7c>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f003 0320 	and.w	r3, r3, #32
 8000e92:	2b20      	cmp	r3, #32
 8000e94:	d102      	bne.n	8000e9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <FLASH_WaitForLastOperation+0x7c>)
 8000e98:	2220      	movs	r2, #32
 8000e9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <FLASH_WaitForLastOperation+0x7c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d005      	beq.n	8000eb4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <FLASH_WaitForLastOperation+0x7c>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d103      	bne.n	8000ebc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000eb4:	f000 f80a 	bl	8000ecc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40022000 	.word	0x40022000

08000ecc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <FLASH_SetErrorCode+0x5c>)
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d109      	bne.n	8000ef6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <FLASH_SetErrorCode+0x60>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <FLASH_SetErrorCode+0x60>)
 8000eec:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <FLASH_SetErrorCode+0x5c>)
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d109      	bne.n	8000f16 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <FLASH_SetErrorCode+0x60>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <FLASH_SetErrorCode+0x60>)
 8000f0c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <FLASH_SetErrorCode+0x5c>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	60d3      	str	r3, [r2, #12]
}  
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40022000 	.word	0x40022000
 8000f2c:	20000248 	.word	0x20000248

08000f30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_FLASHEx_Erase+0xcc>)
 8000f44:	7e1b      	ldrb	r3, [r3, #24]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_FLASHEx_Erase+0x1e>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e052      	b.n	8000ff4 <HAL_FLASHEx_Erase+0xc4>
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_FLASHEx_Erase+0xcc>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d115      	bne.n	8000f88 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f60:	f7ff ff74 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d140      	bne.n	8000fec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000f6a:	f000 f84b 	bl	8001004 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f72:	f7ff ff6b 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_FLASHEx_Erase+0xd0>)
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	4a20      	ldr	r2, [pc, #128]	; (8001000 <HAL_FLASHEx_Erase+0xd0>)
 8000f80:	f023 0304 	bic.w	r3, r3, #4
 8000f84:	6113      	str	r3, [r2, #16]
 8000f86:	e031      	b.n	8000fec <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f8c:	f7ff ff5e 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12a      	bne.n	8000fec <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	e019      	b.n	8000fda <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f000 f846 	bl	8001038 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb0:	f7ff ff4c 	bl	8000e4c <FLASH_WaitForLastOperation>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_FLASHEx_Erase+0xd0>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_FLASHEx_Erase+0xd0>)
 8000fbe:	f023 0302 	bic.w	r3, r3, #2
 8000fc2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	601a      	str	r2, [r3, #0]
            break;
 8000fd0:	e00c      	b.n	8000fec <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fd8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	02da      	lsls	r2, r3, #11
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3dc      	bcc.n	8000fa6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_FLASHEx_Erase+0xcc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000248 	.word	0x20000248
 8001000:	40022000 	.word	0x40022000

08001004 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <FLASH_MassErase+0x2c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <FLASH_MassErase+0x30>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <FLASH_MassErase+0x30>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <FLASH_MassErase+0x30>)
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <FLASH_MassErase+0x30>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	6113      	str	r3, [r2, #16]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000248 	.word	0x20000248
 8001034:	40022000 	.word	0x40022000

08001038 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <FLASH_PageErase+0x38>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <FLASH_PageErase+0x3c>)
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <FLASH_PageErase+0x3c>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <FLASH_PageErase+0x3c>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <FLASH_PageErase+0x3c>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <FLASH_PageErase+0x3c>)
 800105e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001062:	6113      	str	r3, [r2, #16]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b087      	sub	sp, #28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e154      	b.n	8001332 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa01 f303 	lsl.w	r3, r1, r3
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8146 	beq.w	800132c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d00b      	beq.n	80010c0 <HAL_GPIO_Init+0x48>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d007      	beq.n	80010c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b4:	2b11      	cmp	r3, #17
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d130      	bne.n	8001122 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	2203      	movs	r2, #3
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f6:	2201      	movs	r2, #1
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 0201 	and.w	r2, r3, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0xea>
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b12      	cmp	r3, #18
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a0 	beq.w	800132c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_GPIO_Init+0x2d8>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_GPIO_Init+0x2d8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b55      	ldr	r3, [pc, #340]	; (8001350 <HAL_GPIO_Init+0x2d8>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001204:	4a53      	ldr	r2, [pc, #332]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800122e:	d019      	beq.n	8001264 <HAL_GPIO_Init+0x1ec>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a49      	ldr	r2, [pc, #292]	; (8001358 <HAL_GPIO_Init+0x2e0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1e8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2e4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1e4>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_GPIO_Init+0x2e8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1e0>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_GPIO_Init+0x2ec>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1dc>
 8001250:	2304      	movs	r3, #4
 8001252:	e008      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001254:	2305      	movs	r3, #5
 8001256:	e006      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001258:	2303      	movs	r3, #3
 800125a:	e004      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 800125c:	2302      	movs	r3, #2
 800125e:	e002      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <HAL_GPIO_Init+0x1ee>
 8001264:	2300      	movs	r3, #0
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	f002 0203 	and.w	r2, r2, #3
 800126c:	0092      	lsls	r2, r2, #2
 800126e:	4093      	lsls	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001276:	4937      	ldr	r1, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x2dc>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a8:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d2:	4a25      	ldr	r2, [pc, #148]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012fc:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <HAL_GPIO_Init+0x2f0>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	fa22 f303 	lsr.w	r3, r2, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f47f aea3 	bne.w	8001088 <HAL_GPIO_Init+0x10>
  }
}
 8001342:	bf00      	nop
 8001344:	371c      	adds	r7, #28
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800
 8001360:	48000c00 	.word	0x48000c00
 8001364:	48001000 	.word	0x48001000
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001372:	af00      	add	r7, sp, #0
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	f000 bef4 	b.w	800216e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 816a 	beq.w	800166a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001396:	4bb3      	ldr	r3, [pc, #716]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00c      	beq.n	80013bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a2:	4bb0      	ldr	r3, [pc, #704]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d159      	bne.n	8001462 <HAL_RCC_OscConfig+0xf6>
 80013ae:	4bad      	ldr	r3, [pc, #692]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d152      	bne.n	8001462 <HAL_RCC_OscConfig+0xf6>
 80013bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d102      	bne.n	80013ee <HAL_RCC_OscConfig+0x82>
 80013e8:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0xae>
 80013ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013fa:	fa93 f3a3 	rbit	r3, r3
 80013fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001406:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800140a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800140e:	fa93 f3a3 	rbit	r3, r3
 8001412:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001416:	4b93      	ldr	r3, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800141e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001422:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001426:	fa92 f2a2 	rbit	r2, r2
 800142a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800142e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001432:	fab2 f282 	clz	r2, r2
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f042 0220 	orr.w	r2, r2, #32
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	f002 021f 	and.w	r2, r2, #31
 8001442:	2101      	movs	r1, #1
 8001444:	fa01 f202 	lsl.w	r2, r1, r2
 8001448:	4013      	ands	r3, r2
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 810c 	beq.w	8001668 <HAL_RCC_OscConfig+0x2fc>
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 8106 	bne.w	8001668 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f000 be86 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x110>
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7c      	ldr	r2, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e030      	b.n	80014de <HAL_RCC_OscConfig+0x172>
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x134>
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a76      	ldr	r2, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 800148c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01e      	b.n	80014de <HAL_RCC_OscConfig+0x172>
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014aa:	d10c      	bne.n	80014c6 <HAL_RCC_OscConfig+0x15a>
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a6c      	ldr	r2, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a69      	ldr	r2, [pc, #420]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e00b      	b.n	80014de <HAL_RCC_OscConfig+0x172>
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a66      	ldr	r2, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a63      	ldr	r2, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f023 020f 	bic.w	r2, r3, #15
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	495d      	ldr	r1, [pc, #372]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d059      	beq.n	80015b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff faf2 	bl	8000ae4 <HAL_GetTick>
 8001500:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001506:	f7ff faed 	bl	8000ae4 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d902      	bls.n	800151c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	f000 be29 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
 800151c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001520:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001530:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	b2db      	uxtb	r3, r3
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <HAL_RCC_OscConfig+0x1e2>
 8001548:	4b46      	ldr	r3, [pc, #280]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x20e>
 800154e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001552:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001566:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800156a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001582:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001586:	fa92 f2a2 	rbit	r2, r2
 800158a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800158e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001592:	fab2 f282 	clz	r2, r2
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f002 021f 	and.w	r2, r2, #31
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ab      	beq.n	8001506 <HAL_RCC_OscConfig+0x19a>
 80015ae:	e05c      	b.n	800166a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fa98 	bl	8000ae4 <HAL_GetTick>
 80015b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ba:	f7ff fa93 	bl	8000ae4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d902      	bls.n	80015d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f000 bdcf 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
 80015d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0x296>
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	e015      	b.n	800162e <HAL_RCC_OscConfig+0x2c2>
 8001602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001606:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800161e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_RCC_OscConfig+0x2f8>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001632:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001636:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800163a:	fa92 f2a2 	rbit	r2, r2
 800163e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001642:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001646:	fab2 f282 	clz	r2, r2
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	f042 0220 	orr.w	r2, r2, #32
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	f002 021f 	and.w	r2, r2, #31
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ab      	bne.n	80015ba <HAL_RCC_OscConfig+0x24e>
 8001662:	e002      	b.n	800166a <HAL_RCC_OscConfig+0x2fe>
 8001664:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 816f 	beq.w	8001958 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800167a:	4bd0      	ldr	r3, [pc, #832]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001686:	4bcd      	ldr	r3, [pc, #820]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d16c      	bne.n	800176c <HAL_RCC_OscConfig+0x400>
 8001692:	4bca      	ldr	r3, [pc, #808]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d166      	bne.n	800176c <HAL_RCC_OscConfig+0x400>
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80016a8:	fa93 f3a3 	rbit	r3, r3
 80016ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b4:	fab3 f383 	clz	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	095b      	lsrs	r3, r3, #5
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d102      	bne.n	80016ce <HAL_RCC_OscConfig+0x362>
 80016c8:	4bbc      	ldr	r3, [pc, #752]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	e013      	b.n	80016f6 <HAL_RCC_OscConfig+0x38a>
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016f2:	4bb2      	ldr	r3, [pc, #712]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	2202      	movs	r2, #2
 80016f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001700:	fa92 f2a2 	rbit	r2, r2
 8001704:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001708:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	f042 0220 	orr.w	r2, r2, #32
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	f002 021f 	and.w	r2, r2, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f202 	lsl.w	r2, r1, r2
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_RCC_OscConfig+0x3cc>
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d002      	beq.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	f000 bd1b 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4ba0      	ldr	r3, [pc, #640]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	21f8      	movs	r1, #248	; 0xf8
 8001748:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001750:	fa91 f1a1 	rbit	r1, r1
 8001754:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001758:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800175c:	fab1 f181 	clz	r1, r1
 8001760:	b2c9      	uxtb	r1, r1
 8001762:	408b      	lsls	r3, r1
 8001764:	4995      	ldr	r1, [pc, #596]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e0f5      	b.n	8001958 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8085 	beq.w	8001882 <HAL_RCC_OscConfig+0x516>
 8001778:	2301      	movs	r3, #1
 800177a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001782:	fa93 f3a3 	rbit	r3, r3
 8001786:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800178a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001798:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	461a      	mov	r2, r3
 80017a0:	2301      	movs	r3, #1
 80017a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f99e 	bl	8000ae4 <HAL_GetTick>
 80017a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff f999 	bl	8000ae4 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d902      	bls.n	80017c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	f000 bcd5 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x488>
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	e013      	b.n	800181c <HAL_RCC_OscConfig+0x4b0>
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800180c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	2202      	movs	r2, #2
 800181e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001822:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001826:	fa92 f2a2 	rbit	r2, r2
 800182a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800182e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001832:	fab2 f282 	clz	r2, r2
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f002 021f 	and.w	r2, r2, #31
 8001842:	2101      	movs	r1, #1
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0af      	beq.n	80017ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b5b      	ldr	r3, [pc, #364]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	21f8      	movs	r1, #248	; 0xf8
 800185e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001866:	fa91 f1a1 	rbit	r1, r1
 800186a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800186e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001872:	fab1 f181 	clz	r1, r1
 8001876:	b2c9      	uxtb	r1, r1
 8001878:	408b      	lsls	r3, r1
 800187a:	4950      	ldr	r1, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e06a      	b.n	8001958 <HAL_RCC_OscConfig+0x5ec>
 8001882:	2301      	movs	r3, #1
 8001884:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001894:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	461a      	mov	r2, r3
 80018aa:	2300      	movs	r3, #0
 80018ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f919 	bl	8000ae4 <HAL_GetTick>
 80018b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b8:	f7ff f914 	bl	8000ae4 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d902      	bls.n	80018ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	f000 bc50 	b.w	800216e <HAL_RCC_OscConfig+0xe02>
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x592>
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	e013      	b.n	8001926 <HAL_RCC_OscConfig+0x5ba>
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001916:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_OscConfig+0x650>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2202      	movs	r2, #2
 8001928:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800192c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001930:	fa92 f2a2 	rbit	r2, r2
 8001934:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001938:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800193c:	fab2 f282 	clz	r2, r2
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	f042 0220 	orr.w	r2, r2, #32
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f002 021f 	and.w	r2, r2, #31
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1af      	bne.n	80018b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80da 	beq.w	8001b1c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d069      	beq.n	8001a46 <HAL_RCC_OscConfig+0x6da>
 8001972:	2301      	movs	r3, #1
 8001974:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x654>)
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	461a      	mov	r2, r3
 8001998:	2301      	movs	r3, #1
 800199a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff f8a2 	bl	8000ae4 <HAL_GetTick>
 80019a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a4:	e00e      	b.n	80019c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff f89d 	bl	8000ae4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d906      	bls.n	80019c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e3d9      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	10908120 	.word	0x10908120
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019f2:	2202      	movs	r2, #2
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	4ba5      	ldr	r3, [pc, #660]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6019      	str	r1, [r3, #0]
 8001a12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f1a3 	rbit	r1, r3
 8001a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a20:	6019      	str	r1, [r3, #0]
  return result;
 8001a22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2101      	movs	r1, #1
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0b0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x63a>
 8001a44:	e06a      	b.n	8001b1c <HAL_RCC_OscConfig+0x7b0>
 8001a46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a5c:	601a      	str	r2, [r3, #0]
  return result;
 8001a5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x934>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f834 	bl	8000ae4 <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f82f 	bl	8000ae4 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e36b      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 8001a96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aca:	2202      	movs	r2, #2
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001adc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	6019      	str	r1, [r3, #0]
 8001aea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f1a3 	rbit	r1, r3
 8001af4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001af8:	6019      	str	r1, [r3, #0]
  return result;
 8001afa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2101      	movs	r1, #1
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1b2      	bne.n	8001a82 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8158 	beq.w	8001ddc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d112      	bne.n	8001b64 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b64:	4b4f      	ldr	r3, [pc, #316]	; (8001ca4 <HAL_RCC_OscConfig+0x938>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11a      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x938>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_RCC_OscConfig+0x938>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7c:	f7fe ffb2 	bl	8000ae4 <HAL_GetTick>
 8001b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7fe ffad 	bl	8000ae4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e2e9      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x938>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0ef      	beq.n	8001b86 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x852>
 8001bb0:	4b3a      	ldr	r3, [pc, #232]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6213      	str	r3, [r2, #32]
 8001bbc:	e02f      	b.n	8001c1e <HAL_RCC_OscConfig+0x8b2>
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x876>
 8001bc8:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bda:	f023 0304 	bic.w	r3, r3, #4
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e01d      	b.n	8001c1e <HAL_RCC_OscConfig+0x8b2>
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d10c      	bne.n	8001c06 <HAL_RCC_OscConfig+0x89a>
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6213      	str	r3, [r2, #32]
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6213      	str	r3, [r2, #32]
 8001c04:	e00b      	b.n	8001c1e <HAL_RCC_OscConfig+0x8b2>
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6213      	str	r3, [r2, #32]
 8001c12:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d06b      	beq.n	8001d00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c28:	f7fe ff5c 	bl	8000ae4 <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7fe ff57 	bl	8000ae4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e291      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 8001c4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c66:	2202      	movs	r2, #2
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c78:	601a      	str	r2, [r3, #0]
  return result;
 8001c7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d109      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x93c>
 8001c94:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <HAL_RCC_OscConfig+0x930>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x958>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	10908120 	.word	0x10908120
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	fa93 f2a3 	rbit	r2, r3
 8001cba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4bbb      	ldr	r3, [pc, #748]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cc8:	2102      	movs	r1, #2
 8001cca:	6011      	str	r1, [r2, #0]
 8001ccc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fa92 f1a2 	rbit	r1, r2
 8001cd6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cda:	6011      	str	r1, [r2, #0]
  return result;
 8001cdc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fab2 f282 	clz	r2, r2
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d099      	beq.n	8001c32 <HAL_RCC_OscConfig+0x8c6>
 8001cfe:	e063      	b.n	8001dc8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7fe fef0 	bl	8000ae4 <HAL_GetTick>
 8001d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00b      	b.n	8001d22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe feeb 	bl	8000ae4 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e225      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 8001d22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d3e:	2202      	movs	r2, #2
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	fa93 f2a3 	rbit	r2, r3
 8001d4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d50:	601a      	str	r2, [r3, #0]
  return result;
 8001d52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d102      	bne.n	8001d72 <HAL_RCC_OscConfig+0xa06>
 8001d6c:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	e00d      	b.n	8001d8e <HAL_RCC_OscConfig+0xa22>
 8001d72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d76:	2202      	movs	r2, #2
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d92:	2102      	movs	r1, #2
 8001d94:	6011      	str	r1, [r2, #0]
 8001d96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fa92 f1a2 	rbit	r1, r2
 8001da0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001da4:	6011      	str	r1, [r2, #0]
  return result;
 8001da6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f002 021f 	and.w	r2, r2, #31
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1a0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	4a76      	ldr	r2, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001dd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 81c2 	beq.w	800216c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de8:	4b71      	ldr	r3, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	f000 819c 	beq.w	800212e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	f040 8114 	bne.w	800202a <HAL_RCC_OscConfig+0xcbe>
 8001e02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e1a:	601a      	str	r2, [r3, #0]
  return result;
 8001e1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	461a      	mov	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fe54 	bl	8000ae4 <HAL_GetTick>
 8001e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe fe4f 	bl	8000ae4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e18b      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 8001e56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e6e:	601a      	str	r2, [r3, #0]
  return result;
 8001e70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_RCC_OscConfig+0xb24>
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	e01b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xb5c>
 8001e90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f2a3 	rbit	r2, r3
 8001ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001eae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ecc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fa92 f1a2 	rbit	r1, r2
 8001edc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ee0:	6011      	str	r1, [r2, #0]
  return result;
 8001ee2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f002 021f 	and.w	r2, r2, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d19e      	bne.n	8001e42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	4925      	ldr	r1, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	fa93 f2a3 	rbit	r2, r3
 8001f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f38:	601a      	str	r2, [r3, #0]
  return result;
 8001f3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fdc5 	bl	8000ae4 <HAL_GetTick>
 8001f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5e:	e009      	b.n	8001f74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fdc0 	bl	8000ae4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0fc      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 8001f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f8c:	601a      	str	r2, [r3, #0]
  return result;
 8001f8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xc48>
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <HAL_RCC_OscConfig+0xc44>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	e01e      	b.n	8001fec <HAL_RCC_OscConfig+0xc80>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0xe0c>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ff4:	6011      	str	r1, [r2, #0]
 8001ff6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fa92 f1a2 	rbit	r1, r2
 8002000:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002004:	6011      	str	r1, [r2, #0]
  return result;
 8002006:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	fab2 f282 	clz	r2, r2
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	f002 021f 	and.w	r2, r2, #31
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	4013      	ands	r3, r2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d09b      	beq.n	8001f60 <HAL_RCC_OscConfig+0xbf4>
 8002028:	e0a0      	b.n	800216c <HAL_RCC_OscConfig+0xe00>
 800202a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800202e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002032:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002042:	601a      	str	r2, [r3, #0]
  return result;
 8002044:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002048:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002054:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	461a      	mov	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fd40 	bl	8000ae4 <HAL_GetTick>
 8002064:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002068:	e009      	b.n	800207e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206a:	f7fe fd3b 	bl	8000ae4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e077      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
 800207e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	fa93 f2a3 	rbit	r2, r3
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	601a      	str	r2, [r3, #0]
  return result;
 8002098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0xd4c>
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0xe0c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0xd84>
 80020b8:	f107 0320 	add.w	r3, r7, #32
 80020bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fa93 f2a3 	rbit	r2, r3
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	f107 0318 	add.w	r3, r7, #24
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_RCC_OscConfig+0xe0c>)
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	f107 0210 	add.w	r2, r7, #16
 80020f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020f8:	6011      	str	r1, [r2, #0]
 80020fa:	f107 0210 	add.w	r2, r7, #16
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fa92 f1a2 	rbit	r1, r2
 8002104:	f107 020c 	add.w	r2, r7, #12
 8002108:	6011      	str	r1, [r2, #0]
  return result;
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	fab2 f282 	clz	r2, r2
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	f042 0220 	orr.w	r2, r2, #32
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f002 021f 	and.w	r2, r2, #31
 8002120:	2101      	movs	r1, #1
 8002122:	fa01 f202 	lsl.w	r2, r1, r2
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d19e      	bne.n	800206a <HAL_RCC_OscConfig+0xcfe>
 800212c:	e01e      	b.n	800216c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e018      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213c:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_RCC_OscConfig+0xe0c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002144:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002148:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	429a      	cmp	r2, r3
 8002154:	d108      	bne.n	8002168 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002156:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800215a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000

0800217c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b09e      	sub	sp, #120	; 0x78
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e162      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002194:	4b90      	ldr	r3, [pc, #576]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d910      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0207 	bic.w	r2, r3, #7
 80021aa:	498b      	ldr	r1, [pc, #556]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b89      	ldr	r3, [pc, #548]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e14a      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d0:	4b82      	ldr	r3, [pc, #520]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	497f      	ldr	r1, [pc, #508]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80dc 	beq.w	80023a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d13c      	bne.n	8002272 <HAL_RCC_ClockConfig+0xf6>
 80021f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_RCC_ClockConfig+0xa6>
 800221c:	4b6f      	ldr	r3, [pc, #444]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	e00f      	b.n	8002242 <HAL_RCC_ClockConfig+0xc6>
 8002222:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002226:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
 8002230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002234:	663b      	str	r3, [r7, #96]	; 0x60
 8002236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800223e:	4b67      	ldr	r3, [pc, #412]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002246:	65ba      	str	r2, [r7, #88]	; 0x58
 8002248:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d17b      	bne.n	8002366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0f3      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d13c      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x178>
 800227a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x128>
 800229e:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e00f      	b.n	80022c4 <HAL_RCC_ClockConfig+0x148>
 80022a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	647b      	str	r3, [r7, #68]	; 0x44
 80022b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b6:	643b      	str	r3, [r7, #64]	; 0x40
 80022b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c0:	4b46      	ldr	r3, [pc, #280]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022cc:	fa92 f2a2 	rbit	r2, r2
 80022d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d13a      	bne.n	8002366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b2      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
 80022f4:	2302      	movs	r3, #2
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_RCC_ClockConfig+0x1a0>
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	e00d      	b.n	8002338 <HAL_RCC_ClockConfig+0x1bc>
 800231c:	2302      	movs	r3, #2
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	2302      	movs	r3, #2
 800232a:	623b      	str	r3, [r7, #32]
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2202      	movs	r2, #2
 800233a:	61ba      	str	r2, [r7, #24]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	fa92 f2a2 	rbit	r2, r2
 8002342:	617a      	str	r2, [r7, #20]
  return result;
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e079      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	491a      	ldr	r1, [pc, #104]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002378:	f7fe fbb4 	bl	8000ae4 <HAL_GetTick>
 800237c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	e00a      	b.n	8002396 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002380:	f7fe fbb0 	bl	8000ae4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e061      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_RCC_ClockConfig+0x260>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 020c 	and.w	r2, r3, #12
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d1eb      	bne.n	8002380 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d214      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4906      	ldr	r1, [pc, #24]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <HAL_RCC_ClockConfig+0x25c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e040      	b.n	800245a <HAL_RCC_ClockConfig+0x2de>
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_ClockConfig+0x2e8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	491a      	ldr	r1, [pc, #104]	; (8002464 <HAL_RCC_ClockConfig+0x2e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x2e8>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4912      	ldr	r1, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x2e8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800241e:	f000 f829 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002422:	4601      	mov	r1, r0
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <HAL_RCC_ClockConfig+0x2e8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242c:	22f0      	movs	r2, #240	; 0xf0
 800242e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	fa92 f2a2 	rbit	r2, r2
 8002436:	60fa      	str	r2, [r7, #12]
  return result;
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	40d3      	lsrs	r3, r2
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x2ec>)
 8002444:	5cd3      	ldrb	r3, [r2, r3]
 8002446:	fa21 f303 	lsr.w	r3, r1, r3
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_RCC_ClockConfig+0x2f0>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCC_ClockConfig+0x2f4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fb02 	bl	8000a5c <HAL_InitTick>
  
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3778      	adds	r7, #120	; 0x78
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	08004994 	.word	0x08004994
 800246c:	20000024 	.word	0x20000024
 8002470:	20000028 	.word	0x20000028

08002474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b08b      	sub	sp, #44	; 0x2c
 8002478:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d002      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x30>
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0x36>
 80024a2:	e03c      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a6:	623b      	str	r3, [r7, #32]
      break;
 80024a8:	e03c      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	fa92 f2a2 	rbit	r2, r2
 80024bc:	607a      	str	r2, [r7, #4]
  return result;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	40d3      	lsrs	r3, r2
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	220f      	movs	r2, #15
 80024d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	fa92 f2a2 	rbit	r2, r2
 80024e0:	60fa      	str	r2, [r7, #12]
  return result;
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	fab2 f282 	clz	r2, r2
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	40d3      	lsrs	r3, r2
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	fbb2 f2f3 	udiv	r2, r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fb02 f303 	mul.w	r3, r2, r3
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	e004      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	623b      	str	r3, [r7, #32]
      break;
 800251c:	e002      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002520:	623b      	str	r3, [r7, #32]
      break;
 8002522:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002524:	6a3b      	ldr	r3, [r7, #32]
}
 8002526:	4618      	mov	r0, r3
 8002528:	372c      	adds	r7, #44	; 0x2c
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	080049ac 	.word	0x080049ac
 8002540:	080049bc 	.word	0x080049bc
 8002544:	003d0900 	.word	0x003d0900

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000024 	.word	0x20000024

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002566:	f7ff ffef 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800256a:	4601      	mov	r1, r0
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002574:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002578:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	603a      	str	r2, [r7, #0]
  return result;
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	40d3      	lsrs	r3, r2
 800258c:	4a04      	ldr	r2, [pc, #16]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800258e:	5cd3      	ldrb	r3, [r2, r3]
 8002590:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	080049a4 	.word	0x080049a4

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025aa:	f7ff ffcd 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	fa92 f2a2 	rbit	r2, r2
 80025c4:	603a      	str	r2, [r7, #0]
  return result;
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	fab2 f282 	clz	r2, r2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	40d3      	lsrs	r3, r2
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	080049a4 	.word	0x080049a4

080025e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b092      	sub	sp, #72	; 0x48
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80d7 	beq.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260c:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10e      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	61d3      	str	r3, [r2, #28]
 8002624:	4b48      	ldr	r3, [pc, #288]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d118      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002642:	4b42      	ldr	r3, [pc, #264]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a41      	ldr	r2, [pc, #260]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264e:	f7fe fa49 	bl	8000ae4 <HAL_GetTick>
 8002652:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	e008      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002656:	f7fe fa45 	bl	8000ae4 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b64      	cmp	r3, #100	; 0x64
 8002662:	d901      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e169      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8084 	beq.w	800278e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002690:	429a      	cmp	r2, r3
 8002692:	d07c      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800269e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b26      	ldr	r3, [pc, #152]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	461a      	mov	r2, r3
 80026be:	2301      	movs	r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	461a      	mov	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d04b      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe f9f5 	bl	8000ae4 <HAL_GetTick>
 80026fa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe f9f1 	bl	8000ae4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e113      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
 8002720:	2302      	movs	r3, #2
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	61fb      	str	r3, [r7, #28]
  return result;
 800272c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	b2db      	uxtb	r3, r3
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d108      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002742:	4b01      	ldr	r3, [pc, #4]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	e00d      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	10908100 	.word	0x10908100
 8002754:	2302      	movs	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	4b78      	ldr	r3, [pc, #480]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2202      	movs	r2, #2
 8002766:	613a      	str	r2, [r7, #16]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	60fa      	str	r2, [r7, #12]
  return result;
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	f002 021f 	and.w	r2, r2, #31
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f202 	lsl.w	r2, r1, r2
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0b7      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	496a      	ldr	r1, [pc, #424]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c0:	4b60      	ldr	r3, [pc, #384]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	f023 0203 	bic.w	r2, r3, #3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	495d      	ldr	r1, [pc, #372]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4956      	ldr	r1, [pc, #344]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	494e      	ldr	r1, [pc, #312]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f023 0210 	bic.w	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4947      	ldr	r1, [pc, #284]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002838:	4b42      	ldr	r3, [pc, #264]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	493f      	ldr	r1, [pc, #252]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f023 0220 	bic.w	r2, r3, #32
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4938      	ldr	r1, [pc, #224]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002864:	4313      	orrs	r3, r2
 8002866:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	4930      	ldr	r1, [pc, #192]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	4929      	ldr	r1, [pc, #164]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	4921      	ldr	r1, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	491a      	ldr	r1, [pc, #104]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	4912      	ldr	r1, [pc, #72]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	490b      	ldr	r1, [pc, #44]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3748      	adds	r7, #72	; 0x48
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e040      	b.n	80029dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd ff78 	bl	8000860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f97a 	bl	8002c80 <UART_SetConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fb88 	bl	80030b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fc0f 	bl	80031f8 <UART_CheckIdleState>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8081 	bne.w	8002b00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_Transmit+0x26>
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e079      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Transmit+0x38>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e072      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe f858 	bl	8000ae4 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d108      	bne.n	8002a62 <HAL_UART_Transmit+0x7e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e003      	b.n	8002a6a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6a:	e02d      	b.n	8002ac8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fc03 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03d      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	e008      	b.n	8002ab6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b292      	uxth	r2, r2
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1cb      	bne.n	8002a6c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fbcf 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e009      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b08a      	sub	sp, #40	; 0x28
 8002b0e:	af02      	add	r7, sp, #8
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80a8 	bne.w	8002c74 <HAL_UART_Receive+0x16a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Receive+0x26>
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0a0      	b.n	8002c76 <HAL_UART_Receive+0x16c>
    }

    __HAL_LOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Receive+0x38>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e099      	b.n	8002c76 <HAL_UART_Receive+0x16c>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2222      	movs	r2, #34	; 0x22
 8002b54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b56:	f7fd ffc5 	bl	8000ae4 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d10e      	bne.n	8002b94 <HAL_UART_Receive+0x8a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_Receive+0x80>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b88:	e01a      	b.n	8002bc0 <HAL_UART_Receive+0xb6>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b92:	e015      	b.n	8002bc0 <HAL_UART_Receive+0xb6>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10d      	bne.n	8002bb8 <HAL_UART_Receive+0xae>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_UART_Receive+0xa4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bac:	e008      	b.n	8002bc0 <HAL_UART_Receive+0xb6>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Receive+0xb6>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bc6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd0:	d108      	bne.n	8002be4 <HAL_UART_Receive+0xda>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d104      	bne.n	8002be4 <HAL_UART_Receive+0xda>
    {
      pdata8bits  = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e003      	b.n	8002bec <HAL_UART_Receive+0xe2>
    }
    else
    {
      pdata8bits  = pData;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002bec:	e033      	b.n	8002c56 <HAL_UART_Receive+0x14c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fb42 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Receive+0xfe>
      {
        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e036      	b.n	8002c76 <HAL_UART_Receive+0x16c>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_UART_Receive+0x11e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	8a7b      	ldrh	r3, [r7, #18]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	3302      	adds	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e00d      	b.n	8002c44 <HAL_UART_Receive+0x13a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	8a7b      	ldrh	r3, [r7, #18]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	4013      	ands	r3, r2
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3301      	adds	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1c5      	bne.n	8002bee <HAL_UART_Receive+0xe4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <HAL_UART_Receive+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cb2:	f023 030c 	bic.w	r3, r3, #12
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6939      	ldr	r1, [r7, #16]
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4aa9      	ldr	r2, [pc, #676]	; (8002fa4 <UART_SetConfig+0x324>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d121      	bne.n	8002d48 <UART_SetConfig+0xc8>
 8002d04:	4ba8      	ldr	r3, [pc, #672]	; (8002fa8 <UART_SetConfig+0x328>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d817      	bhi.n	8002d40 <UART_SetConfig+0xc0>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <UART_SetConfig+0x98>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d3b 	.word	0x08002d3b
 8002d24:	08002d2f 	.word	0x08002d2f
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e0b2      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e0af      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d34:	2304      	movs	r3, #4
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e0ac      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e0a9      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d40:	2310      	movs	r3, #16
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	bf00      	nop
 8002d46:	e0a5      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a97      	ldr	r2, [pc, #604]	; (8002fac <UART_SetConfig+0x32c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d123      	bne.n	8002d9a <UART_SetConfig+0x11a>
 8002d52:	4b95      	ldr	r3, [pc, #596]	; (8002fa8 <UART_SetConfig+0x328>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5e:	d012      	beq.n	8002d86 <UART_SetConfig+0x106>
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d802      	bhi.n	8002d6c <UART_SetConfig+0xec>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <UART_SetConfig+0xfa>
 8002d6a:	e012      	b.n	8002d92 <UART_SetConfig+0x112>
 8002d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d70:	d00c      	beq.n	8002d8c <UART_SetConfig+0x10c>
 8002d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d76:	d003      	beq.n	8002d80 <UART_SetConfig+0x100>
 8002d78:	e00b      	b.n	8002d92 <UART_SetConfig+0x112>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e089      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d80:	2302      	movs	r3, #2
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e086      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d86:	2304      	movs	r3, #4
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e083      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e080      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d92:	2310      	movs	r3, #16
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	bf00      	nop
 8002d98:	e07c      	b.n	8002e94 <UART_SetConfig+0x214>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a84      	ldr	r2, [pc, #528]	; (8002fb0 <UART_SetConfig+0x330>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d123      	bne.n	8002dec <UART_SetConfig+0x16c>
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <UART_SetConfig+0x328>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db0:	d012      	beq.n	8002dd8 <UART_SetConfig+0x158>
 8002db2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db6:	d802      	bhi.n	8002dbe <UART_SetConfig+0x13e>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <UART_SetConfig+0x14c>
 8002dbc:	e012      	b.n	8002de4 <UART_SetConfig+0x164>
 8002dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002dc2:	d00c      	beq.n	8002dde <UART_SetConfig+0x15e>
 8002dc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dc8:	d003      	beq.n	8002dd2 <UART_SetConfig+0x152>
 8002dca:	e00b      	b.n	8002de4 <UART_SetConfig+0x164>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e060      	b.n	8002e94 <UART_SetConfig+0x214>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e05d      	b.n	8002e94 <UART_SetConfig+0x214>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e05a      	b.n	8002e94 <UART_SetConfig+0x214>
 8002dde:	2308      	movs	r3, #8
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e057      	b.n	8002e94 <UART_SetConfig+0x214>
 8002de4:	2310      	movs	r3, #16
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	bf00      	nop
 8002dea:	e053      	b.n	8002e94 <UART_SetConfig+0x214>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a70      	ldr	r2, [pc, #448]	; (8002fb4 <UART_SetConfig+0x334>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d123      	bne.n	8002e3e <UART_SetConfig+0x1be>
 8002df6:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <UART_SetConfig+0x328>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e02:	d012      	beq.n	8002e2a <UART_SetConfig+0x1aa>
 8002e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e08:	d802      	bhi.n	8002e10 <UART_SetConfig+0x190>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <UART_SetConfig+0x19e>
 8002e0e:	e012      	b.n	8002e36 <UART_SetConfig+0x1b6>
 8002e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e14:	d00c      	beq.n	8002e30 <UART_SetConfig+0x1b0>
 8002e16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e1a:	d003      	beq.n	8002e24 <UART_SetConfig+0x1a4>
 8002e1c:	e00b      	b.n	8002e36 <UART_SetConfig+0x1b6>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e037      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e24:	2302      	movs	r3, #2
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e034      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e031      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e30:	2308      	movs	r3, #8
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e02e      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e36:	2310      	movs	r3, #16
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	bf00      	nop
 8002e3c:	e02a      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5d      	ldr	r2, [pc, #372]	; (8002fb8 <UART_SetConfig+0x338>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d123      	bne.n	8002e90 <UART_SetConfig+0x210>
 8002e48:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <UART_SetConfig+0x328>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002e50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e54:	d012      	beq.n	8002e7c <UART_SetConfig+0x1fc>
 8002e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5a:	d802      	bhi.n	8002e62 <UART_SetConfig+0x1e2>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d007      	beq.n	8002e70 <UART_SetConfig+0x1f0>
 8002e60:	e012      	b.n	8002e88 <UART_SetConfig+0x208>
 8002e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e66:	d00c      	beq.n	8002e82 <UART_SetConfig+0x202>
 8002e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e6c:	d003      	beq.n	8002e76 <UART_SetConfig+0x1f6>
 8002e6e:	e00b      	b.n	8002e88 <UART_SetConfig+0x208>
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e00e      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e76:	2302      	movs	r3, #2
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e00b      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e008      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e82:	2308      	movs	r3, #8
 8002e84:	77fb      	strb	r3, [r7, #31]
 8002e86:	e005      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	bf00      	nop
 8002e8e:	e001      	b.n	8002e94 <UART_SetConfig+0x214>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9c:	f040 808e 	bne.w	8002fbc <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d85e      	bhi.n	8002f64 <UART_SetConfig+0x2e4>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <UART_SetConfig+0x22c>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ed1 	.word	0x08002ed1
 8002eb0:	08002ef1 	.word	0x08002ef1
 8002eb4:	08002f11 	.word	0x08002f11
 8002eb8:	08002f65 	.word	0x08002f65
 8002ebc:	08002f2d 	.word	0x08002f2d
 8002ec0:	08002f65 	.word	0x08002f65
 8002ec4:	08002f65 	.word	0x08002f65
 8002ec8:	08002f65 	.word	0x08002f65
 8002ecc:	08002f4d 	.word	0x08002f4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed0:	f7ff fb46 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002ed4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	005a      	lsls	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	61bb      	str	r3, [r7, #24]
        break;
 8002eee:	e03c      	b.n	8002f6a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7ff fb58 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 8002ef4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	005a      	lsls	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	61bb      	str	r3, [r7, #24]
        break;
 8002f0e:	e02c      	b.n	8002f6a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002f1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	61bb      	str	r3, [r7, #24]
        break;
 8002f2a:	e01e      	b.n	8002f6a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f2c:	f7ff faa2 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002f30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	005a      	lsls	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	441a      	add	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	61bb      	str	r3, [r7, #24]
        break;
 8002f4a:	e00e      	b.n	8002f6a <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	61bb      	str	r3, [r7, #24]
        break;
 8002f62:	e002      	b.n	8002f6a <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
        break;
 8002f68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d916      	bls.n	8002f9e <UART_SetConfig+0x31e>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d212      	bcs.n	8002f9e <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	085b      	lsrs	r3, r3, #1
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	897a      	ldrh	r2, [r7, #10]
 8002f9a:	60da      	str	r2, [r3, #12]
 8002f9c:	e07e      	b.n	800309c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
 8002fa2:	e07b      	b.n	800309c <UART_SetConfig+0x41c>
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	40004800 	.word	0x40004800
 8002fb4:	40004c00 	.word	0x40004c00
 8002fb8:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d85b      	bhi.n	800307a <UART_SetConfig+0x3fa>
 8002fc2:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0x348>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	0800300b 	.word	0x0800300b
 8002fd0:	08003029 	.word	0x08003029
 8002fd4:	0800307b 	.word	0x0800307b
 8002fd8:	08003045 	.word	0x08003045
 8002fdc:	0800307b 	.word	0x0800307b
 8002fe0:	0800307b 	.word	0x0800307b
 8002fe4:	0800307b 	.word	0x0800307b
 8002fe8:	08003063 	.word	0x08003063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7ff fab8 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085a      	lsrs	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	61bb      	str	r3, [r7, #24]
        break;
 8003008:	e03a      	b.n	8003080 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800300a:	f7ff facb 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 800300e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	085a      	lsrs	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	441a      	add	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	61bb      	str	r3, [r7, #24]
        break;
 8003026:	e02b      	b.n	8003080 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085b      	lsrs	r3, r3, #1
 800302e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003032:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6852      	ldr	r2, [r2, #4]
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	61bb      	str	r3, [r7, #24]
        break;
 8003042:	e01d      	b.n	8003080 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003044:	f7ff fa16 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8003048:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085a      	lsrs	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	441a      	add	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	b29b      	uxth	r3, r3
 800305e:	61bb      	str	r3, [r7, #24]
        break;
 8003060:	e00e      	b.n	8003080 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	fbb2 f3f3 	udiv	r3, r2, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e002      	b.n	8003080 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
        break;
 800307e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d908      	bls.n	8003098 <UART_SetConfig+0x418>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d204      	bcs.n	8003098 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	e001      	b.n	800309c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01a      	beq.n	80031ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031b2:	d10a      	bne.n	80031ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003206:	f7fd fc6d 	bl	8000ae4 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d10e      	bne.n	8003238 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800321a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f82a 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e020      	b.n	800327a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b04      	cmp	r3, #4
 8003244:	d10e      	bne.n	8003264 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003246:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f814 	bl	8003282 <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e00a      	b.n	800327a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003292:	e05d      	b.n	8003350 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d059      	beq.n	8003350 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7fd fc22 	bl	8000ae4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d11b      	bne.n	80032ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2220      	movs	r2, #32
 80032d6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e042      	b.n	8003370 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d02b      	beq.n	8003350 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003306:	d123      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003310:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003320:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0201 	bic.w	r2, r2, #1
 8003330:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2220      	movs	r2, #32
 8003342:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e00f      	b.n	8003370 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	429a      	cmp	r2, r3
 800336c:	d092      	beq.n	8003294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e030      	b.n	80033ea <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	441a      	add	r2, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	440b      	add	r3, r1
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	3301      	adds	r3, #1
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	441a      	add	r2, r3
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	440b      	add	r3, r1
 80033b0:	7812      	ldrb	r2, [r2, #0]
 80033b2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	441a      	add	r2, r3
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	440b      	add	r3, r1
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	3303      	adds	r3, #3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	441a      	add	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	3303      	adds	r3, #3
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	440b      	add	r3, r1
 80033e0:	7812      	ldrb	r2, [r2, #0]
 80033e2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b07      	cmp	r3, #7
 80033ee:	d9cb      	bls.n	8003388 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80033f0:	2308      	movs	r3, #8
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e09e      	b.n	8003534 <KeyExpansion+0x1bc>
  {
    {
      k = (i - 1) * 4;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033fc:	3b01      	subs	r3, #1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	3301      	adds	r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	3302      	adds	r3, #2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	3303      	adds	r3, #3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d125      	bne.n	8003486 <KeyExpansion+0x10e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800343a:	7b3b      	ldrb	r3, [r7, #12]
 800343c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800343e:	7b7b      	ldrb	r3, [r7, #13]
 8003440:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8003442:	7bbb      	ldrb	r3, [r7, #14]
 8003444:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800344e:	7b3b      	ldrb	r3, [r7, #12]
 8003450:	461a      	mov	r2, r3
 8003452:	4b3d      	ldr	r3, [pc, #244]	; (8003548 <KeyExpansion+0x1d0>)
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8003458:	7b7b      	ldrb	r3, [r7, #13]
 800345a:	461a      	mov	r2, r3
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <KeyExpansion+0x1d0>)
 800345e:	5c9b      	ldrb	r3, [r3, r2]
 8003460:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8003462:	7bbb      	ldrb	r3, [r7, #14]
 8003464:	461a      	mov	r2, r3
 8003466:	4b38      	ldr	r3, [pc, #224]	; (8003548 <KeyExpansion+0x1d0>)
 8003468:	5c9b      	ldrb	r3, [r3, r2]
 800346a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	461a      	mov	r2, r3
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <KeyExpansion+0x1d0>)
 8003472:	5c9b      	ldrb	r3, [r3, r2]
 8003474:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8003476:	7b3a      	ldrb	r2, [r7, #12]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08db      	lsrs	r3, r3, #3
 800347c:	4933      	ldr	r1, [pc, #204]	; (800354c <KeyExpansion+0x1d4>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	4053      	eors	r3, r2
 8003482:	b2db      	uxtb	r3, r3
 8003484:	733b      	strb	r3, [r7, #12]
    }
#if defined(AES256) && (AES256 == 1)
    if (i % Nk == 4)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	2b04      	cmp	r3, #4
 800348e:	d113      	bne.n	80034b8 <KeyExpansion+0x140>
    {
      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <KeyExpansion+0x1d0>)
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 800349a:	7b7b      	ldrb	r3, [r7, #13]
 800349c:	461a      	mov	r2, r3
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <KeyExpansion+0x1d0>)
 80034a0:	5c9b      	ldrb	r3, [r3, r2]
 80034a2:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <KeyExpansion+0x1d0>)
 80034aa:	5c9b      	ldrb	r3, [r3, r2]
 80034ac:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b25      	ldr	r3, [pc, #148]	; (8003548 <KeyExpansion+0x1d0>)
 80034b4:	5c9b      	ldrb	r3, [r3, r2]
 80034b6:	73fb      	strb	r3, [r7, #15]
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034c4:	3b08      	subs	r3, #8
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4413      	add	r3, r2
 80034d0:	7819      	ldrb	r1, [r3, #0]
 80034d2:	7b3a      	ldrb	r2, [r7, #12]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4403      	add	r3, r0
 80034da:	404a      	eors	r2, r1
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	3301      	adds	r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	7819      	ldrb	r1, [r3, #0]
 80034ea:	7b7a      	ldrb	r2, [r7, #13]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	3301      	adds	r3, #1
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	4403      	add	r3, r0
 80034f4:	404a      	eors	r2, r1
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3302      	adds	r3, #2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	7819      	ldrb	r1, [r3, #0]
 8003504:	7bba      	ldrb	r2, [r7, #14]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3302      	adds	r3, #2
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	4403      	add	r3, r0
 800350e:	404a      	eors	r2, r1
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	3303      	adds	r3, #3
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	7819      	ldrb	r1, [r3, #0]
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3303      	adds	r3, #3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4403      	add	r3, r0
 8003528:	404a      	eors	r2, r1
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b3b      	cmp	r3, #59	; 0x3b
 8003538:	f67f af5d 	bls.w	80033f6 <KeyExpansion+0x7e>
  }
}
 800353c:	bf00      	nop
 800353e:	3724      	adds	r7, #36	; 0x24
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	080049cc 	.word	0x080049cc
 800354c:	08004bcc 	.word	0x08004bcc

08003550 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff09 	bl	8003378 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	33f0      	adds	r3, #240	; 0xf0
 800356a:	2210      	movs	r2, #16
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fcc4 	bl	8003efc <memcpy>
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
 800358e:	e027      	b.n	80035e0 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8003590:	2300      	movs	r3, #0
 8003592:	75bb      	strb	r3, [r7, #22]
 8003594:	e01e      	b.n	80035d4 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8003596:	7dfa      	ldrb	r2, [r7, #23]
 8003598:	7dbb      	ldrb	r3, [r7, #22]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	440a      	add	r2, r1
 80035a0:	4413      	add	r3, r2
 80035a2:	7818      	ldrb	r0, [r3, #0]
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	009a      	lsls	r2, r3, #2
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	4413      	add	r3, r2
 80035ac:	009a      	lsls	r2, r3, #2
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	4413      	add	r3, r2
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	7819      	ldrb	r1, [r3, #0]
 80035ba:	7dfa      	ldrb	r2, [r7, #23]
 80035bc:	7dbb      	ldrb	r3, [r7, #22]
 80035be:	4041      	eors	r1, r0
 80035c0:	b2c8      	uxtb	r0, r1
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	0092      	lsls	r2, r2, #2
 80035c6:	440a      	add	r2, r1
 80035c8:	4413      	add	r3, r2
 80035ca:	4602      	mov	r2, r0
 80035cc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80035ce:	7dbb      	ldrb	r3, [r7, #22]
 80035d0:	3301      	adds	r3, #1
 80035d2:	75bb      	strb	r3, [r7, #22]
 80035d4:	7dbb      	ldrb	r3, [r7, #22]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d9dd      	bls.n	8003596 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	3301      	adds	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
 80035e0:	7dfb      	ldrb	r3, [r7, #23]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d9d4      	bls.n	8003590 <AddRoundKey+0x14>
    }
  }
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	b25a      	sxtb	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	09db      	lsrs	r3, r3, #7
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4619      	mov	r1, r3
 800360a:	0049      	lsls	r1, r1, #1
 800360c:	440b      	add	r3, r1
 800360e:	4619      	mov	r1, r3
 8003610:	00c8      	lsls	r0, r1, #3
 8003612:	4619      	mov	r1, r3
 8003614:	4603      	mov	r3, r0
 8003616:	440b      	add	r3, r1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	b25b      	sxtb	r3, r3
 800361c:	4053      	eors	r3, r2
 800361e:	b25b      	sxtb	r3, r3
 8003620:	b2db      	uxtb	r3, r3
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 800362e:	b5b0      	push	{r4, r5, r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e33b      	b.n	8003cb4 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8003644:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	78db      	ldrb	r3, [r3, #3]
 8003668:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ffc0 	bl	80035f2 <xtime>
 8003672:	4603      	mov	r3, r0
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ffbc 	bl	80035f2 <xtime>
 800367a:	4603      	mov	r3, r0
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ffb8 	bl	80035f2 <xtime>
 8003682:	4603      	mov	r3, r0
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ffb4 	bl	80035f2 <xtime>
 800368a:	7abb      	ldrb	r3, [r7, #10]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ffb0 	bl	80035f2 <xtime>
 8003692:	4603      	mov	r3, r0
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ffac 	bl	80035f2 <xtime>
 800369a:	7abb      	ldrb	r3, [r7, #10]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ffa8 	bl	80035f2 <xtime>
 80036a2:	4603      	mov	r3, r0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ffa4 	bl	80035f2 <xtime>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff ffa0 	bl	80035f2 <xtime>
 80036b2:	4603      	mov	r3, r0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff ff9c 	bl	80035f2 <xtime>
 80036ba:	7a7b      	ldrb	r3, [r7, #9]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff98 	bl	80035f2 <xtime>
 80036c2:	7a7b      	ldrb	r3, [r7, #9]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff94 	bl	80035f2 <xtime>
 80036ca:	4603      	mov	r3, r0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff90 	bl	80035f2 <xtime>
 80036d2:	4603      	mov	r3, r0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff8c 	bl	80035f2 <xtime>
 80036da:	4603      	mov	r3, r0
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff88 	bl	80035f2 <xtime>
 80036e2:	7a3b      	ldrb	r3, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff84 	bl	80035f2 <xtime>
 80036ea:	7a3b      	ldrb	r3, [r7, #8]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff80 	bl	80035f2 <xtime>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff7c 	bl	80035f2 <xtime>
 80036fa:	7a3b      	ldrb	r3, [r7, #8]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff ff78 	bl	80035f2 <xtime>
 8003702:	4603      	mov	r3, r0
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff74 	bl	80035f2 <xtime>
 800370a:	4603      	mov	r3, r0
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff70 	bl	80035f2 <xtime>
 8003712:	4603      	mov	r3, r0
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff6c 	bl	80035f2 <xtime>
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff68 	bl	80035f2 <xtime>
 8003722:	4603      	mov	r3, r0
 8003724:	461c      	mov	r4, r3
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff62 	bl	80035f2 <xtime>
 800372e:	4603      	mov	r3, r0
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5e 	bl	80035f2 <xtime>
 8003736:	4603      	mov	r3, r0
 8003738:	4063      	eors	r3, r4
 800373a:	b2dc      	uxtb	r4, r3
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff57 	bl	80035f2 <xtime>
 8003744:	4603      	mov	r3, r0
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ff53 	bl	80035f2 <xtime>
 800374c:	4603      	mov	r3, r0
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff ff4f 	bl	80035f2 <xtime>
 8003754:	4603      	mov	r3, r0
 8003756:	4063      	eors	r3, r4
 8003758:	b2dc      	uxtb	r4, r3
 800375a:	7abb      	ldrb	r3, [r7, #10]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff48 	bl	80035f2 <xtime>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	7abb      	ldrb	r3, [r7, #10]
 8003768:	4053      	eors	r3, r2
 800376a:	b2dd      	uxtb	r5, r3
 800376c:	7abb      	ldrb	r3, [r7, #10]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff3f 	bl	80035f2 <xtime>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff3b 	bl	80035f2 <xtime>
 800377c:	4603      	mov	r3, r0
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff ff37 	bl	80035f2 <xtime>
 8003784:	4603      	mov	r3, r0
 8003786:	406b      	eors	r3, r5
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4063      	eors	r3, r4
 800378c:	b2dc      	uxtb	r4, r3
 800378e:	7a7b      	ldrb	r3, [r7, #9]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff2e 	bl	80035f2 <xtime>
 8003796:	4603      	mov	r3, r0
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff2a 	bl	80035f2 <xtime>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	7a7b      	ldrb	r3, [r7, #9]
 80037a4:	4053      	eors	r3, r2
 80037a6:	b2dd      	uxtb	r5, r3
 80037a8:	7a7b      	ldrb	r3, [r7, #9]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff21 	bl	80035f2 <xtime>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff1d 	bl	80035f2 <xtime>
 80037b8:	4603      	mov	r3, r0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff19 	bl	80035f2 <xtime>
 80037c0:	4603      	mov	r3, r0
 80037c2:	406b      	eors	r3, r5
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4063      	eors	r3, r4
 80037c8:	b2dc      	uxtb	r4, r3
 80037ca:	7a3b      	ldrb	r3, [r7, #8]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff10 	bl	80035f2 <xtime>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff0c 	bl	80035f2 <xtime>
 80037da:	4603      	mov	r3, r0
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff08 	bl	80035f2 <xtime>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	7a3b      	ldrb	r3, [r7, #8]
 80037e8:	4053      	eors	r3, r2
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4063      	eors	r3, r4
 80037ee:	b2d9      	uxtb	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fef9 	bl	80035f2 <xtime>
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fef5 	bl	80035f2 <xtime>
 8003808:	4603      	mov	r3, r0
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fef1 	bl	80035f2 <xtime>
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff feed 	bl	80035f2 <xtime>
 8003818:	4603      	mov	r3, r0
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fee9 	bl	80035f2 <xtime>
 8003820:	4603      	mov	r3, r0
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fee5 	bl	80035f2 <xtime>
 8003828:	4603      	mov	r3, r0
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fee1 	bl	80035f2 <xtime>
 8003830:	7abb      	ldrb	r3, [r7, #10]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fedd 	bl	80035f2 <xtime>
 8003838:	4603      	mov	r3, r0
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fed9 	bl	80035f2 <xtime>
 8003840:	4603      	mov	r3, r0
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fed5 	bl	80035f2 <xtime>
 8003848:	4603      	mov	r3, r0
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fed1 	bl	80035f2 <xtime>
 8003850:	7a7b      	ldrb	r3, [r7, #9]
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fecd 	bl	80035f2 <xtime>
 8003858:	4603      	mov	r3, r0
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fec9 	bl	80035f2 <xtime>
 8003860:	7a7b      	ldrb	r3, [r7, #9]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fec5 	bl	80035f2 <xtime>
 8003868:	4603      	mov	r3, r0
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fec1 	bl	80035f2 <xtime>
 8003870:	4603      	mov	r3, r0
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff febd 	bl	80035f2 <xtime>
 8003878:	4603      	mov	r3, r0
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff feb9 	bl	80035f2 <xtime>
 8003880:	7a3b      	ldrb	r3, [r7, #8]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff feb5 	bl	80035f2 <xtime>
 8003888:	7a3b      	ldrb	r3, [r7, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff feb1 	bl	80035f2 <xtime>
 8003890:	4603      	mov	r3, r0
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fead 	bl	80035f2 <xtime>
 8003898:	4603      	mov	r3, r0
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fea9 	bl	80035f2 <xtime>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fea5 	bl	80035f2 <xtime>
 80038a8:	7afb      	ldrb	r3, [r7, #11]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fea1 	bl	80035f2 <xtime>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff fe9d 	bl	80035f2 <xtime>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fe99 	bl	80035f2 <xtime>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461a      	mov	r2, r3
 80038c4:	7afb      	ldrb	r3, [r7, #11]
 80038c6:	4053      	eors	r3, r2
 80038c8:	b2dc      	uxtb	r4, r3
 80038ca:	7abb      	ldrb	r3, [r7, #10]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fe90 	bl	80035f2 <xtime>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461d      	mov	r5, r3
 80038d6:	7abb      	ldrb	r3, [r7, #10]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fe8a 	bl	80035f2 <xtime>
 80038de:	4603      	mov	r3, r0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fe86 	bl	80035f2 <xtime>
 80038e6:	4603      	mov	r3, r0
 80038e8:	406b      	eors	r3, r5
 80038ea:	b2dd      	uxtb	r5, r3
 80038ec:	7abb      	ldrb	r3, [r7, #10]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fe7f 	bl	80035f2 <xtime>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe7b 	bl	80035f2 <xtime>
 80038fc:	4603      	mov	r3, r0
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fe77 	bl	80035f2 <xtime>
 8003904:	4603      	mov	r3, r0
 8003906:	406b      	eors	r3, r5
 8003908:	b2db      	uxtb	r3, r3
 800390a:	4063      	eors	r3, r4
 800390c:	b2dc      	uxtb	r4, r3
 800390e:	7a7b      	ldrb	r3, [r7, #9]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fe6e 	bl	80035f2 <xtime>
 8003916:	4603      	mov	r3, r0
 8003918:	461a      	mov	r2, r3
 800391a:	7a7b      	ldrb	r3, [r7, #9]
 800391c:	4053      	eors	r3, r2
 800391e:	b2dd      	uxtb	r5, r3
 8003920:	7a7b      	ldrb	r3, [r7, #9]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fe65 	bl	80035f2 <xtime>
 8003928:	4603      	mov	r3, r0
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fe61 	bl	80035f2 <xtime>
 8003930:	4603      	mov	r3, r0
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fe5d 	bl	80035f2 <xtime>
 8003938:	4603      	mov	r3, r0
 800393a:	406b      	eors	r3, r5
 800393c:	b2db      	uxtb	r3, r3
 800393e:	4063      	eors	r3, r4
 8003940:	b2dc      	uxtb	r4, r3
 8003942:	7a3b      	ldrb	r3, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe54 	bl	80035f2 <xtime>
 800394a:	4603      	mov	r3, r0
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fe50 	bl	80035f2 <xtime>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	7a3b      	ldrb	r3, [r7, #8]
 8003958:	4053      	eors	r3, r2
 800395a:	b2dd      	uxtb	r5, r3
 800395c:	7a3b      	ldrb	r3, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fe47 	bl	80035f2 <xtime>
 8003964:	4603      	mov	r3, r0
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fe43 	bl	80035f2 <xtime>
 800396c:	4603      	mov	r3, r0
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fe3f 	bl	80035f2 <xtime>
 8003974:	4603      	mov	r3, r0
 8003976:	406b      	eors	r3, r5
 8003978:	b2db      	uxtb	r3, r3
 800397a:	4063      	eors	r3, r4
 800397c:	b2d9      	uxtb	r1, r3
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	460a      	mov	r2, r1
 8003988:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fe30 	bl	80035f2 <xtime>
 8003992:	7afb      	ldrb	r3, [r7, #11]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fe2c 	bl	80035f2 <xtime>
 800399a:	4603      	mov	r3, r0
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fe28 	bl	80035f2 <xtime>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe24 	bl	80035f2 <xtime>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fe20 	bl	80035f2 <xtime>
 80039b2:	7abb      	ldrb	r3, [r7, #10]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fe1c 	bl	80035f2 <xtime>
 80039ba:	7abb      	ldrb	r3, [r7, #10]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff fe18 	bl	80035f2 <xtime>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fe14 	bl	80035f2 <xtime>
 80039ca:	7abb      	ldrb	r3, [r7, #10]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fe10 	bl	80035f2 <xtime>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fe0c 	bl	80035f2 <xtime>
 80039da:	4603      	mov	r3, r0
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fe08 	bl	80035f2 <xtime>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff fe04 	bl	80035f2 <xtime>
 80039ea:	7a7b      	ldrb	r3, [r7, #9]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fe00 	bl	80035f2 <xtime>
 80039f2:	4603      	mov	r3, r0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fdfc 	bl	80035f2 <xtime>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fdf8 	bl	80035f2 <xtime>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff fdf4 	bl	80035f2 <xtime>
 8003a0a:	7a3b      	ldrb	r3, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fdf0 	bl	80035f2 <xtime>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fdec 	bl	80035f2 <xtime>
 8003a1a:	7a3b      	ldrb	r3, [r7, #8]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fde8 	bl	80035f2 <xtime>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fde4 	bl	80035f2 <xtime>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fde0 	bl	80035f2 <xtime>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fddc 	bl	80035f2 <xtime>
 8003a3a:	7afb      	ldrb	r3, [r7, #11]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fdd8 	bl	80035f2 <xtime>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fdd4 	bl	80035f2 <xtime>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	7afb      	ldrb	r3, [r7, #11]
 8003a50:	4053      	eors	r3, r2
 8003a52:	b2dc      	uxtb	r4, r3
 8003a54:	7afb      	ldrb	r3, [r7, #11]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fdcb 	bl	80035f2 <xtime>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fdc7 	bl	80035f2 <xtime>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fdc3 	bl	80035f2 <xtime>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4063      	eors	r3, r4
 8003a70:	b2dc      	uxtb	r4, r3
 8003a72:	7abb      	ldrb	r3, [r7, #10]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fdbc 	bl	80035f2 <xtime>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fdb8 	bl	80035f2 <xtime>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fdb4 	bl	80035f2 <xtime>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	7abb      	ldrb	r3, [r7, #10]
 8003a90:	4053      	eors	r3, r2
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	4063      	eors	r3, r4
 8003a96:	b2dc      	uxtb	r4, r3
 8003a98:	7a7b      	ldrb	r3, [r7, #9]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fda9 	bl	80035f2 <xtime>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	7a7b      	ldrb	r3, [r7, #9]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fda3 	bl	80035f2 <xtime>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fd9f 	bl	80035f2 <xtime>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	406b      	eors	r3, r5
 8003ab8:	b2dd      	uxtb	r5, r3
 8003aba:	7a7b      	ldrb	r3, [r7, #9]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fd98 	bl	80035f2 <xtime>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fd94 	bl	80035f2 <xtime>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff fd90 	bl	80035f2 <xtime>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	406b      	eors	r3, r5
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4063      	eors	r3, r4
 8003ada:	b2dc      	uxtb	r4, r3
 8003adc:	7a3b      	ldrb	r3, [r7, #8]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fd87 	bl	80035f2 <xtime>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	7a3b      	ldrb	r3, [r7, #8]
 8003aea:	4053      	eors	r3, r2
 8003aec:	b2dd      	uxtb	r5, r3
 8003aee:	7a3b      	ldrb	r3, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff fd7e 	bl	80035f2 <xtime>
 8003af6:	4603      	mov	r3, r0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fd7a 	bl	80035f2 <xtime>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fd76 	bl	80035f2 <xtime>
 8003b06:	4603      	mov	r3, r0
 8003b08:	406b      	eors	r3, r5
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4063      	eors	r3, r4
 8003b0e:	b2d9      	uxtb	r1, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	460a      	mov	r2, r1
 8003b1a:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fd67 	bl	80035f2 <xtime>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fd63 	bl	80035f2 <xtime>
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fd5f 	bl	80035f2 <xtime>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fd5b 	bl	80035f2 <xtime>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fd57 	bl	80035f2 <xtime>
 8003b44:	4603      	mov	r3, r0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fd53 	bl	80035f2 <xtime>
 8003b4c:	7abb      	ldrb	r3, [r7, #10]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fd4f 	bl	80035f2 <xtime>
 8003b54:	7abb      	ldrb	r3, [r7, #10]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fd4b 	bl	80035f2 <xtime>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd47 	bl	80035f2 <xtime>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fd43 	bl	80035f2 <xtime>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fd3f 	bl	80035f2 <xtime>
 8003b74:	7a7b      	ldrb	r3, [r7, #9]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fd3b 	bl	80035f2 <xtime>
 8003b7c:	7a7b      	ldrb	r3, [r7, #9]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd37 	bl	80035f2 <xtime>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff fd33 	bl	80035f2 <xtime>
 8003b8c:	7a7b      	ldrb	r3, [r7, #9]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff fd2f 	bl	80035f2 <xtime>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fd2b 	bl	80035f2 <xtime>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff fd27 	bl	80035f2 <xtime>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fd23 	bl	80035f2 <xtime>
 8003bac:	7a3b      	ldrb	r3, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff fd1f 	bl	80035f2 <xtime>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fd1b 	bl	80035f2 <xtime>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fd17 	bl	80035f2 <xtime>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fd13 	bl	80035f2 <xtime>
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fd0f 	bl	80035f2 <xtime>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	7afb      	ldrb	r3, [r7, #11]
 8003bda:	4053      	eors	r3, r2
 8003bdc:	b2dc      	uxtb	r4, r3
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fd06 	bl	80035f2 <xtime>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fd02 	bl	80035f2 <xtime>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fcfe 	bl	80035f2 <xtime>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4063      	eors	r3, r4
 8003bfa:	b2dc      	uxtb	r4, r3
 8003bfc:	7abb      	ldrb	r3, [r7, #10]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fcf7 	bl	80035f2 <xtime>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fcf3 	bl	80035f2 <xtime>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	7abb      	ldrb	r3, [r7, #10]
 8003c12:	4053      	eors	r3, r2
 8003c14:	b2dd      	uxtb	r5, r3
 8003c16:	7abb      	ldrb	r3, [r7, #10]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fcea 	bl	80035f2 <xtime>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fce6 	bl	80035f2 <xtime>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fce2 	bl	80035f2 <xtime>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	406b      	eors	r3, r5
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4063      	eors	r3, r4
 8003c36:	b2dc      	uxtb	r4, r3
 8003c38:	7a7b      	ldrb	r3, [r7, #9]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fcd9 	bl	80035f2 <xtime>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fcd5 	bl	80035f2 <xtime>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fcd1 	bl	80035f2 <xtime>
 8003c50:	4603      	mov	r3, r0
 8003c52:	461a      	mov	r2, r3
 8003c54:	7a7b      	ldrb	r3, [r7, #9]
 8003c56:	4053      	eors	r3, r2
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	4063      	eors	r3, r4
 8003c5c:	b2dc      	uxtb	r4, r3
 8003c5e:	7a3b      	ldrb	r3, [r7, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fcc6 	bl	80035f2 <xtime>
 8003c66:	4603      	mov	r3, r0
 8003c68:	461d      	mov	r5, r3
 8003c6a:	7a3b      	ldrb	r3, [r7, #8]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fcc0 	bl	80035f2 <xtime>
 8003c72:	4603      	mov	r3, r0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fcbc 	bl	80035f2 <xtime>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	406b      	eors	r3, r5
 8003c7e:	b2dd      	uxtb	r5, r3
 8003c80:	7a3b      	ldrb	r3, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fcb5 	bl	80035f2 <xtime>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fcb1 	bl	80035f2 <xtime>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fcad 	bl	80035f2 <xtime>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	406b      	eors	r3, r5
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	4063      	eors	r3, r4
 8003ca0:	b2d9      	uxtb	r1, r3
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	460a      	mov	r2, r1
 8003cac:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	f77f acc0 	ble.w	800363c <InvMixColumns+0xe>
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bdb0      	pop	{r4, r5, r7, pc}

08003cc4 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	e01d      	b.n	8003d0e <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73bb      	strb	r3, [r7, #14]
 8003cd6:	e014      	b.n	8003d02 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8003cd8:	7bba      	ldrb	r2, [r7, #14]
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	440a      	add	r2, r1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	7bba      	ldrb	r2, [r7, #14]
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	490c      	ldr	r1, [pc, #48]	; (8003d20 <InvSubBytes+0x5c>)
 8003cee:	5c08      	ldrb	r0, [r1, r0]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	440a      	add	r2, r1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8003cfc:	7bbb      	ldrb	r3, [r7, #14]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	73bb      	strb	r3, [r7, #14]
 8003d02:	7bbb      	ldrb	r3, [r7, #14]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d9e7      	bls.n	8003cd8 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d9de      	bls.n	8003cd2 <InvSubBytes+0xe>
    }
  }
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	08004acc 	.word	0x08004acc

08003d24 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7b5b      	ldrb	r3, [r3, #13]
 8003d30:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7a5a      	ldrb	r2, [r3, #9]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	795a      	ldrb	r2, [r3, #5]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	785a      	ldrb	r2, [r3, #1]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	789b      	ldrb	r3, [r3, #2]
 8003d54:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7a9a      	ldrb	r2, [r3, #10]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	799b      	ldrb	r3, [r3, #6]
 8003d68:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7b9a      	ldrb	r2, [r3, #14]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	78db      	ldrb	r3, [r3, #3]
 8003d7c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	79da      	ldrb	r2, [r3, #7]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7ada      	ldrb	r2, [r3, #11]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7bda      	ldrb	r2, [r3, #15]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	73da      	strb	r2, [r3, #15]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <InvCipher>:
  AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	200e      	movs	r0, #14
 8003dbc:	f7ff fbde 	bl	800357c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8003dc0:	230d      	movs	r3, #13
 8003dc2:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffad 	bl	8003d24 <InvShiftRows>
    InvSubBytes(state);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff7a 	bl	8003cc4 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fbd0 	bl	800357c <AddRoundKey>
    if (round == 0) {
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fc23 	bl	800362e <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8003dee:	e7e9      	b.n	8003dc4 <InvCipher+0x1c>
      break;
 8003df0:	bf00      	nop
  }

}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e010      	b.n	8003e2c <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	7819      	ldrb	r1, [r3, #0]
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	4413      	add	r3, r2
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4403      	add	r3, r0
 8003e20:	404a      	eors	r2, r1
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d9eb      	bls.n	8003e0a <XorWithIv+0x10>
  }
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <AES_CBC_decrypt_buffer>:
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
}

void AES_CBC_decrypt_buffer(struct AES_ctx* ctx, uint8_t* buf, size_t length)
{
 8003e3e:	b5b0      	push	{r4, r5, r7, lr}
 8003e40:	b08a      	sub	sp, #40	; 0x28
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t storeNextIv[AES_BLOCKLEN];
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e022      	b.n	8003e96 <AES_CBC_decrypt_buffer+0x58>
  {
    memcpy(storeNextIv, buf, AES_BLOCKLEN);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f107 0414 	add.w	r4, r7, #20
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    InvCipher((state_t*)buf, ctx->RoundKey);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4619      	mov	r1, r3
 8003e64:	68b8      	ldr	r0, [r7, #8]
 8003e66:	f7ff ff9f 	bl	8003da8 <InvCipher>
    XorWithIv(buf, ctx->Iv);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	33f0      	adds	r3, #240	; 0xf0
 8003e6e:	4619      	mov	r1, r3
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f7ff ffc2 	bl	8003dfa <XorWithIv>
    memcpy(ctx->Iv, storeNextIv, AES_BLOCKLEN);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	33f0      	adds	r3, #240	; 0xf0
 8003e7a:	461d      	mov	r5, r3
 8003e7c:	f107 0414 	add.w	r4, r7, #20
 8003e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e82:	6028      	str	r0, [r5, #0]
 8003e84:	6069      	str	r1, [r5, #4]
 8003e86:	60aa      	str	r2, [r5, #8]
 8003e88:	60eb      	str	r3, [r5, #12]
    buf += AES_BLOCKLEN;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3310      	adds	r3, #16
 8003e8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	3310      	adds	r3, #16
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d3d8      	bcc.n	8003e50 <AES_CBC_decrypt_buffer+0x12>
  }

}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	; 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ea8 <__errno>:
 8003ea8:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <__errno+0x8>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000030 	.word	0x20000030

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4e0d      	ldr	r6, [pc, #52]	; (8003eec <__libc_init_array+0x38>)
 8003eb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ef0 <__libc_init_array+0x3c>)
 8003eba:	1ba4      	subs	r4, r4, r6
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	2500      	movs	r5, #0
 8003ec0:	42a5      	cmp	r5, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	4e0b      	ldr	r6, [pc, #44]	; (8003ef4 <__libc_init_array+0x40>)
 8003ec6:	4c0c      	ldr	r4, [pc, #48]	; (8003ef8 <__libc_init_array+0x44>)
 8003ec8:	f000 fc28 	bl	800471c <_init>
 8003ecc:	1ba4      	subs	r4, r4, r6
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	42a5      	cmp	r5, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003edc:	4798      	blx	r3
 8003ede:	3501      	adds	r5, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ee6:	4798      	blx	r3
 8003ee8:	3501      	adds	r5, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	08004c0c 	.word	0x08004c0c
 8003ef0:	08004c0c 	.word	0x08004c0c
 8003ef4:	08004c0c 	.word	0x08004c0c
 8003ef8:	08004c10 	.word	0x08004c10

08003efc <memcpy>:
 8003efc:	b510      	push	{r4, lr}
 8003efe:	1e43      	subs	r3, r0, #1
 8003f00:	440a      	add	r2, r1
 8003f02:	4291      	cmp	r1, r2
 8003f04:	d100      	bne.n	8003f08 <memcpy+0xc>
 8003f06:	bd10      	pop	{r4, pc}
 8003f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f10:	e7f7      	b.n	8003f02 <memcpy+0x6>

08003f12 <memset>:
 8003f12:	4402      	add	r2, r0
 8003f14:	4603      	mov	r3, r0
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d100      	bne.n	8003f1c <memset+0xa>
 8003f1a:	4770      	bx	lr
 8003f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f20:	e7f9      	b.n	8003f16 <memset+0x4>
	...

08003f24 <_vsiprintf_r>:
 8003f24:	b500      	push	{lr}
 8003f26:	b09b      	sub	sp, #108	; 0x6c
 8003f28:	9100      	str	r1, [sp, #0]
 8003f2a:	9104      	str	r1, [sp, #16]
 8003f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f30:	9105      	str	r1, [sp, #20]
 8003f32:	9102      	str	r1, [sp, #8]
 8003f34:	4905      	ldr	r1, [pc, #20]	; (8003f4c <_vsiprintf_r+0x28>)
 8003f36:	9103      	str	r1, [sp, #12]
 8003f38:	4669      	mov	r1, sp
 8003f3a:	f000 f86d 	bl	8004018 <_svfiprintf_r>
 8003f3e:	9b00      	ldr	r3, [sp, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	b01b      	add	sp, #108	; 0x6c
 8003f46:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f4a:	bf00      	nop
 8003f4c:	ffff0208 	.word	0xffff0208

08003f50 <vsiprintf>:
 8003f50:	4613      	mov	r3, r2
 8003f52:	460a      	mov	r2, r1
 8003f54:	4601      	mov	r1, r0
 8003f56:	4802      	ldr	r0, [pc, #8]	; (8003f60 <vsiprintf+0x10>)
 8003f58:	6800      	ldr	r0, [r0, #0]
 8003f5a:	f7ff bfe3 	b.w	8003f24 <_vsiprintf_r>
 8003f5e:	bf00      	nop
 8003f60:	20000030 	.word	0x20000030

08003f64 <__ssputs_r>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	688e      	ldr	r6, [r1, #8]
 8003f6a:	429e      	cmp	r6, r3
 8003f6c:	4682      	mov	sl, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4690      	mov	r8, r2
 8003f72:	4699      	mov	r9, r3
 8003f74:	d837      	bhi.n	8003fe6 <__ssputs_r+0x82>
 8003f76:	898a      	ldrh	r2, [r1, #12]
 8003f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f7c:	d031      	beq.n	8003fe2 <__ssputs_r+0x7e>
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	6909      	ldr	r1, [r1, #16]
 8003f82:	1a6f      	subs	r7, r5, r1
 8003f84:	6965      	ldr	r5, [r4, #20]
 8003f86:	2302      	movs	r3, #2
 8003f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003f90:	f109 0301 	add.w	r3, r9, #1
 8003f94:	443b      	add	r3, r7
 8003f96:	429d      	cmp	r5, r3
 8003f98:	bf38      	it	cc
 8003f9a:	461d      	movcc	r5, r3
 8003f9c:	0553      	lsls	r3, r2, #21
 8003f9e:	d530      	bpl.n	8004002 <__ssputs_r+0x9e>
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	f000 fb21 	bl	80045e8 <_malloc_r>
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	b950      	cbnz	r0, 8003fc0 <__ssputs_r+0x5c>
 8003faa:	230c      	movs	r3, #12
 8003fac:	f8ca 3000 	str.w	r3, [sl]
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc0:	463a      	mov	r2, r7
 8003fc2:	6921      	ldr	r1, [r4, #16]
 8003fc4:	f7ff ff9a 	bl	8003efc <memcpy>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	6126      	str	r6, [r4, #16]
 8003fd6:	6165      	str	r5, [r4, #20]
 8003fd8:	443e      	add	r6, r7
 8003fda:	1bed      	subs	r5, r5, r7
 8003fdc:	6026      	str	r6, [r4, #0]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	464e      	mov	r6, r9
 8003fe2:	454e      	cmp	r6, r9
 8003fe4:	d900      	bls.n	8003fe8 <__ssputs_r+0x84>
 8003fe6:	464e      	mov	r6, r9
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4641      	mov	r1, r8
 8003fec:	6820      	ldr	r0, [r4, #0]
 8003fee:	f000 fa93 	bl	8004518 <memmove>
 8003ff2:	68a3      	ldr	r3, [r4, #8]
 8003ff4:	1b9b      	subs	r3, r3, r6
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	441e      	add	r6, r3
 8003ffc:	6026      	str	r6, [r4, #0]
 8003ffe:	2000      	movs	r0, #0
 8004000:	e7dc      	b.n	8003fbc <__ssputs_r+0x58>
 8004002:	462a      	mov	r2, r5
 8004004:	f000 fb4a 	bl	800469c <_realloc_r>
 8004008:	4606      	mov	r6, r0
 800400a:	2800      	cmp	r0, #0
 800400c:	d1e2      	bne.n	8003fd4 <__ssputs_r+0x70>
 800400e:	6921      	ldr	r1, [r4, #16]
 8004010:	4650      	mov	r0, sl
 8004012:	f000 fa9b 	bl	800454c <_free_r>
 8004016:	e7c8      	b.n	8003faa <__ssputs_r+0x46>

08004018 <_svfiprintf_r>:
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	461d      	mov	r5, r3
 800401e:	898b      	ldrh	r3, [r1, #12]
 8004020:	061f      	lsls	r7, r3, #24
 8004022:	b09d      	sub	sp, #116	; 0x74
 8004024:	4680      	mov	r8, r0
 8004026:	460c      	mov	r4, r1
 8004028:	4616      	mov	r6, r2
 800402a:	d50f      	bpl.n	800404c <_svfiprintf_r+0x34>
 800402c:	690b      	ldr	r3, [r1, #16]
 800402e:	b96b      	cbnz	r3, 800404c <_svfiprintf_r+0x34>
 8004030:	2140      	movs	r1, #64	; 0x40
 8004032:	f000 fad9 	bl	80045e8 <_malloc_r>
 8004036:	6020      	str	r0, [r4, #0]
 8004038:	6120      	str	r0, [r4, #16]
 800403a:	b928      	cbnz	r0, 8004048 <_svfiprintf_r+0x30>
 800403c:	230c      	movs	r3, #12
 800403e:	f8c8 3000 	str.w	r3, [r8]
 8004042:	f04f 30ff 	mov.w	r0, #4294967295
 8004046:	e0c8      	b.n	80041da <_svfiprintf_r+0x1c2>
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	6163      	str	r3, [r4, #20]
 800404c:	2300      	movs	r3, #0
 800404e:	9309      	str	r3, [sp, #36]	; 0x24
 8004050:	2320      	movs	r3, #32
 8004052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004056:	2330      	movs	r3, #48	; 0x30
 8004058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800405c:	9503      	str	r5, [sp, #12]
 800405e:	f04f 0b01 	mov.w	fp, #1
 8004062:	4637      	mov	r7, r6
 8004064:	463d      	mov	r5, r7
 8004066:	f815 3b01 	ldrb.w	r3, [r5], #1
 800406a:	b10b      	cbz	r3, 8004070 <_svfiprintf_r+0x58>
 800406c:	2b25      	cmp	r3, #37	; 0x25
 800406e:	d13e      	bne.n	80040ee <_svfiprintf_r+0xd6>
 8004070:	ebb7 0a06 	subs.w	sl, r7, r6
 8004074:	d00b      	beq.n	800408e <_svfiprintf_r+0x76>
 8004076:	4653      	mov	r3, sl
 8004078:	4632      	mov	r2, r6
 800407a:	4621      	mov	r1, r4
 800407c:	4640      	mov	r0, r8
 800407e:	f7ff ff71 	bl	8003f64 <__ssputs_r>
 8004082:	3001      	adds	r0, #1
 8004084:	f000 80a4 	beq.w	80041d0 <_svfiprintf_r+0x1b8>
 8004088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408a:	4453      	add	r3, sl
 800408c:	9309      	str	r3, [sp, #36]	; 0x24
 800408e:	783b      	ldrb	r3, [r7, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 809d 	beq.w	80041d0 <_svfiprintf_r+0x1b8>
 8004096:	2300      	movs	r3, #0
 8004098:	f04f 32ff 	mov.w	r2, #4294967295
 800409c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	9307      	str	r3, [sp, #28]
 80040a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040a8:	931a      	str	r3, [sp, #104]	; 0x68
 80040aa:	462f      	mov	r7, r5
 80040ac:	2205      	movs	r2, #5
 80040ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040b2:	4850      	ldr	r0, [pc, #320]	; (80041f4 <_svfiprintf_r+0x1dc>)
 80040b4:	f7fc f894 	bl	80001e0 <memchr>
 80040b8:	9b04      	ldr	r3, [sp, #16]
 80040ba:	b9d0      	cbnz	r0, 80040f2 <_svfiprintf_r+0xda>
 80040bc:	06d9      	lsls	r1, r3, #27
 80040be:	bf44      	itt	mi
 80040c0:	2220      	movmi	r2, #32
 80040c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040c6:	071a      	lsls	r2, r3, #28
 80040c8:	bf44      	itt	mi
 80040ca:	222b      	movmi	r2, #43	; 0x2b
 80040cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040d0:	782a      	ldrb	r2, [r5, #0]
 80040d2:	2a2a      	cmp	r2, #42	; 0x2a
 80040d4:	d015      	beq.n	8004102 <_svfiprintf_r+0xea>
 80040d6:	9a07      	ldr	r2, [sp, #28]
 80040d8:	462f      	mov	r7, r5
 80040da:	2000      	movs	r0, #0
 80040dc:	250a      	movs	r5, #10
 80040de:	4639      	mov	r1, r7
 80040e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e4:	3b30      	subs	r3, #48	; 0x30
 80040e6:	2b09      	cmp	r3, #9
 80040e8:	d94d      	bls.n	8004186 <_svfiprintf_r+0x16e>
 80040ea:	b1b8      	cbz	r0, 800411c <_svfiprintf_r+0x104>
 80040ec:	e00f      	b.n	800410e <_svfiprintf_r+0xf6>
 80040ee:	462f      	mov	r7, r5
 80040f0:	e7b8      	b.n	8004064 <_svfiprintf_r+0x4c>
 80040f2:	4a40      	ldr	r2, [pc, #256]	; (80041f4 <_svfiprintf_r+0x1dc>)
 80040f4:	1a80      	subs	r0, r0, r2
 80040f6:	fa0b f000 	lsl.w	r0, fp, r0
 80040fa:	4318      	orrs	r0, r3
 80040fc:	9004      	str	r0, [sp, #16]
 80040fe:	463d      	mov	r5, r7
 8004100:	e7d3      	b.n	80040aa <_svfiprintf_r+0x92>
 8004102:	9a03      	ldr	r2, [sp, #12]
 8004104:	1d11      	adds	r1, r2, #4
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	9103      	str	r1, [sp, #12]
 800410a:	2a00      	cmp	r2, #0
 800410c:	db01      	blt.n	8004112 <_svfiprintf_r+0xfa>
 800410e:	9207      	str	r2, [sp, #28]
 8004110:	e004      	b.n	800411c <_svfiprintf_r+0x104>
 8004112:	4252      	negs	r2, r2
 8004114:	f043 0302 	orr.w	r3, r3, #2
 8004118:	9207      	str	r2, [sp, #28]
 800411a:	9304      	str	r3, [sp, #16]
 800411c:	783b      	ldrb	r3, [r7, #0]
 800411e:	2b2e      	cmp	r3, #46	; 0x2e
 8004120:	d10c      	bne.n	800413c <_svfiprintf_r+0x124>
 8004122:	787b      	ldrb	r3, [r7, #1]
 8004124:	2b2a      	cmp	r3, #42	; 0x2a
 8004126:	d133      	bne.n	8004190 <_svfiprintf_r+0x178>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	bfb8      	it	lt
 8004134:	f04f 33ff 	movlt.w	r3, #4294967295
 8004138:	3702      	adds	r7, #2
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	4d2e      	ldr	r5, [pc, #184]	; (80041f8 <_svfiprintf_r+0x1e0>)
 800413e:	7839      	ldrb	r1, [r7, #0]
 8004140:	2203      	movs	r2, #3
 8004142:	4628      	mov	r0, r5
 8004144:	f7fc f84c 	bl	80001e0 <memchr>
 8004148:	b138      	cbz	r0, 800415a <_svfiprintf_r+0x142>
 800414a:	2340      	movs	r3, #64	; 0x40
 800414c:	1b40      	subs	r0, r0, r5
 800414e:	fa03 f000 	lsl.w	r0, r3, r0
 8004152:	9b04      	ldr	r3, [sp, #16]
 8004154:	4303      	orrs	r3, r0
 8004156:	3701      	adds	r7, #1
 8004158:	9304      	str	r3, [sp, #16]
 800415a:	7839      	ldrb	r1, [r7, #0]
 800415c:	4827      	ldr	r0, [pc, #156]	; (80041fc <_svfiprintf_r+0x1e4>)
 800415e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004162:	2206      	movs	r2, #6
 8004164:	1c7e      	adds	r6, r7, #1
 8004166:	f7fc f83b 	bl	80001e0 <memchr>
 800416a:	2800      	cmp	r0, #0
 800416c:	d038      	beq.n	80041e0 <_svfiprintf_r+0x1c8>
 800416e:	4b24      	ldr	r3, [pc, #144]	; (8004200 <_svfiprintf_r+0x1e8>)
 8004170:	bb13      	cbnz	r3, 80041b8 <_svfiprintf_r+0x1a0>
 8004172:	9b03      	ldr	r3, [sp, #12]
 8004174:	3307      	adds	r3, #7
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	3308      	adds	r3, #8
 800417c:	9303      	str	r3, [sp, #12]
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	444b      	add	r3, r9
 8004182:	9309      	str	r3, [sp, #36]	; 0x24
 8004184:	e76d      	b.n	8004062 <_svfiprintf_r+0x4a>
 8004186:	fb05 3202 	mla	r2, r5, r2, r3
 800418a:	2001      	movs	r0, #1
 800418c:	460f      	mov	r7, r1
 800418e:	e7a6      	b.n	80040de <_svfiprintf_r+0xc6>
 8004190:	2300      	movs	r3, #0
 8004192:	3701      	adds	r7, #1
 8004194:	9305      	str	r3, [sp, #20]
 8004196:	4619      	mov	r1, r3
 8004198:	250a      	movs	r5, #10
 800419a:	4638      	mov	r0, r7
 800419c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a0:	3a30      	subs	r2, #48	; 0x30
 80041a2:	2a09      	cmp	r2, #9
 80041a4:	d903      	bls.n	80041ae <_svfiprintf_r+0x196>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0c8      	beq.n	800413c <_svfiprintf_r+0x124>
 80041aa:	9105      	str	r1, [sp, #20]
 80041ac:	e7c6      	b.n	800413c <_svfiprintf_r+0x124>
 80041ae:	fb05 2101 	mla	r1, r5, r1, r2
 80041b2:	2301      	movs	r3, #1
 80041b4:	4607      	mov	r7, r0
 80041b6:	e7f0      	b.n	800419a <_svfiprintf_r+0x182>
 80041b8:	ab03      	add	r3, sp, #12
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	4622      	mov	r2, r4
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <_svfiprintf_r+0x1ec>)
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	4640      	mov	r0, r8
 80041c4:	f3af 8000 	nop.w
 80041c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041cc:	4681      	mov	r9, r0
 80041ce:	d1d6      	bne.n	800417e <_svfiprintf_r+0x166>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	065b      	lsls	r3, r3, #25
 80041d4:	f53f af35 	bmi.w	8004042 <_svfiprintf_r+0x2a>
 80041d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041da:	b01d      	add	sp, #116	; 0x74
 80041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4622      	mov	r2, r4
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <_svfiprintf_r+0x1ec>)
 80041e8:	a904      	add	r1, sp, #16
 80041ea:	4640      	mov	r0, r8
 80041ec:	f000 f882 	bl	80042f4 <_printf_i>
 80041f0:	e7ea      	b.n	80041c8 <_svfiprintf_r+0x1b0>
 80041f2:	bf00      	nop
 80041f4:	08004bd7 	.word	0x08004bd7
 80041f8:	08004bdd 	.word	0x08004bdd
 80041fc:	08004be1 	.word	0x08004be1
 8004200:	00000000 	.word	0x00000000
 8004204:	08003f65 	.word	0x08003f65

08004208 <_printf_common>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	4691      	mov	r9, r2
 800420e:	461f      	mov	r7, r3
 8004210:	688a      	ldr	r2, [r1, #8]
 8004212:	690b      	ldr	r3, [r1, #16]
 8004214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004218:	4293      	cmp	r3, r2
 800421a:	bfb8      	it	lt
 800421c:	4613      	movlt	r3, r2
 800421e:	f8c9 3000 	str.w	r3, [r9]
 8004222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004226:	4606      	mov	r6, r0
 8004228:	460c      	mov	r4, r1
 800422a:	b112      	cbz	r2, 8004232 <_printf_common+0x2a>
 800422c:	3301      	adds	r3, #1
 800422e:	f8c9 3000 	str.w	r3, [r9]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800423c:	3302      	addmi	r3, #2
 800423e:	f8c9 3000 	strmi.w	r3, [r9]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d107      	bne.n	800425a <_printf_common+0x52>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	f8d9 2000 	ldr.w	r2, [r9]
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	42ab      	cmp	r3, r5
 8004258:	dc28      	bgt.n	80042ac <_printf_common+0xa4>
 800425a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	3300      	adds	r3, #0
 8004262:	bf18      	it	ne
 8004264:	2301      	movne	r3, #1
 8004266:	0692      	lsls	r2, r2, #26
 8004268:	d42d      	bmi.n	80042c6 <_printf_common+0xbe>
 800426a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426e:	4639      	mov	r1, r7
 8004270:	4630      	mov	r0, r6
 8004272:	47c0      	blx	r8
 8004274:	3001      	adds	r0, #1
 8004276:	d020      	beq.n	80042ba <_printf_common+0xb2>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	68e5      	ldr	r5, [r4, #12]
 800427c:	f8d9 2000 	ldr.w	r2, [r9]
 8004280:	f003 0306 	and.w	r3, r3, #6
 8004284:	2b04      	cmp	r3, #4
 8004286:	bf08      	it	eq
 8004288:	1aad      	subeq	r5, r5, r2
 800428a:	68a3      	ldr	r3, [r4, #8]
 800428c:	6922      	ldr	r2, [r4, #16]
 800428e:	bf0c      	ite	eq
 8004290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004294:	2500      	movne	r5, #0
 8004296:	4293      	cmp	r3, r2
 8004298:	bfc4      	itt	gt
 800429a:	1a9b      	subgt	r3, r3, r2
 800429c:	18ed      	addgt	r5, r5, r3
 800429e:	f04f 0900 	mov.w	r9, #0
 80042a2:	341a      	adds	r4, #26
 80042a4:	454d      	cmp	r5, r9
 80042a6:	d11a      	bne.n	80042de <_printf_common+0xd6>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e008      	b.n	80042be <_printf_common+0xb6>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4652      	mov	r2, sl
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d103      	bne.n	80042c2 <_printf_common+0xba>
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	3501      	adds	r5, #1
 80042c4:	e7c3      	b.n	800424e <_printf_common+0x46>
 80042c6:	18e1      	adds	r1, r4, r3
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	2030      	movs	r0, #48	; 0x30
 80042cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042d0:	4422      	add	r2, r4
 80042d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042da:	3302      	adds	r3, #2
 80042dc:	e7c5      	b.n	800426a <_printf_common+0x62>
 80042de:	2301      	movs	r3, #1
 80042e0:	4622      	mov	r2, r4
 80042e2:	4639      	mov	r1, r7
 80042e4:	4630      	mov	r0, r6
 80042e6:	47c0      	blx	r8
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0e6      	beq.n	80042ba <_printf_common+0xb2>
 80042ec:	f109 0901 	add.w	r9, r9, #1
 80042f0:	e7d8      	b.n	80042a4 <_printf_common+0x9c>
	...

080042f4 <_printf_i>:
 80042f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80042fc:	460c      	mov	r4, r1
 80042fe:	7e09      	ldrb	r1, [r1, #24]
 8004300:	b085      	sub	sp, #20
 8004302:	296e      	cmp	r1, #110	; 0x6e
 8004304:	4617      	mov	r7, r2
 8004306:	4606      	mov	r6, r0
 8004308:	4698      	mov	r8, r3
 800430a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800430c:	f000 80b3 	beq.w	8004476 <_printf_i+0x182>
 8004310:	d822      	bhi.n	8004358 <_printf_i+0x64>
 8004312:	2963      	cmp	r1, #99	; 0x63
 8004314:	d036      	beq.n	8004384 <_printf_i+0x90>
 8004316:	d80a      	bhi.n	800432e <_printf_i+0x3a>
 8004318:	2900      	cmp	r1, #0
 800431a:	f000 80b9 	beq.w	8004490 <_printf_i+0x19c>
 800431e:	2958      	cmp	r1, #88	; 0x58
 8004320:	f000 8083 	beq.w	800442a <_printf_i+0x136>
 8004324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800432c:	e032      	b.n	8004394 <_printf_i+0xa0>
 800432e:	2964      	cmp	r1, #100	; 0x64
 8004330:	d001      	beq.n	8004336 <_printf_i+0x42>
 8004332:	2969      	cmp	r1, #105	; 0x69
 8004334:	d1f6      	bne.n	8004324 <_printf_i+0x30>
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	0605      	lsls	r5, r0, #24
 800433c:	f103 0104 	add.w	r1, r3, #4
 8004340:	d52a      	bpl.n	8004398 <_printf_i+0xa4>
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	da03      	bge.n	8004352 <_printf_i+0x5e>
 800434a:	222d      	movs	r2, #45	; 0x2d
 800434c:	425b      	negs	r3, r3
 800434e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004352:	486f      	ldr	r0, [pc, #444]	; (8004510 <_printf_i+0x21c>)
 8004354:	220a      	movs	r2, #10
 8004356:	e039      	b.n	80043cc <_printf_i+0xd8>
 8004358:	2973      	cmp	r1, #115	; 0x73
 800435a:	f000 809d 	beq.w	8004498 <_printf_i+0x1a4>
 800435e:	d808      	bhi.n	8004372 <_printf_i+0x7e>
 8004360:	296f      	cmp	r1, #111	; 0x6f
 8004362:	d020      	beq.n	80043a6 <_printf_i+0xb2>
 8004364:	2970      	cmp	r1, #112	; 0x70
 8004366:	d1dd      	bne.n	8004324 <_printf_i+0x30>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	f043 0320 	orr.w	r3, r3, #32
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	e003      	b.n	800437a <_printf_i+0x86>
 8004372:	2975      	cmp	r1, #117	; 0x75
 8004374:	d017      	beq.n	80043a6 <_printf_i+0xb2>
 8004376:	2978      	cmp	r1, #120	; 0x78
 8004378:	d1d4      	bne.n	8004324 <_printf_i+0x30>
 800437a:	2378      	movs	r3, #120	; 0x78
 800437c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004380:	4864      	ldr	r0, [pc, #400]	; (8004514 <_printf_i+0x220>)
 8004382:	e055      	b.n	8004430 <_printf_i+0x13c>
 8004384:	6813      	ldr	r3, [r2, #0]
 8004386:	1d19      	adds	r1, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6011      	str	r1, [r2, #0]
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e08c      	b.n	80044b2 <_printf_i+0x1be>
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6011      	str	r1, [r2, #0]
 800439c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043a0:	bf18      	it	ne
 80043a2:	b21b      	sxthne	r3, r3
 80043a4:	e7cf      	b.n	8004346 <_printf_i+0x52>
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	6825      	ldr	r5, [r4, #0]
 80043aa:	1d18      	adds	r0, r3, #4
 80043ac:	6010      	str	r0, [r2, #0]
 80043ae:	0628      	lsls	r0, r5, #24
 80043b0:	d501      	bpl.n	80043b6 <_printf_i+0xc2>
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	e002      	b.n	80043bc <_printf_i+0xc8>
 80043b6:	0668      	lsls	r0, r5, #25
 80043b8:	d5fb      	bpl.n	80043b2 <_printf_i+0xbe>
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	4854      	ldr	r0, [pc, #336]	; (8004510 <_printf_i+0x21c>)
 80043be:	296f      	cmp	r1, #111	; 0x6f
 80043c0:	bf14      	ite	ne
 80043c2:	220a      	movne	r2, #10
 80043c4:	2208      	moveq	r2, #8
 80043c6:	2100      	movs	r1, #0
 80043c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043cc:	6865      	ldr	r5, [r4, #4]
 80043ce:	60a5      	str	r5, [r4, #8]
 80043d0:	2d00      	cmp	r5, #0
 80043d2:	f2c0 8095 	blt.w	8004500 <_printf_i+0x20c>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	f021 0104 	bic.w	r1, r1, #4
 80043dc:	6021      	str	r1, [r4, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13d      	bne.n	800445e <_printf_i+0x16a>
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	f040 808e 	bne.w	8004504 <_printf_i+0x210>
 80043e8:	4665      	mov	r5, ip
 80043ea:	2a08      	cmp	r2, #8
 80043ec:	d10b      	bne.n	8004406 <_printf_i+0x112>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	07db      	lsls	r3, r3, #31
 80043f2:	d508      	bpl.n	8004406 <_printf_i+0x112>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	6862      	ldr	r2, [r4, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bfde      	ittt	le
 80043fc:	2330      	movle	r3, #48	; 0x30
 80043fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004402:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004406:	ebac 0305 	sub.w	r3, ip, r5
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	f8cd 8000 	str.w	r8, [sp]
 8004410:	463b      	mov	r3, r7
 8004412:	aa03      	add	r2, sp, #12
 8004414:	4621      	mov	r1, r4
 8004416:	4630      	mov	r0, r6
 8004418:	f7ff fef6 	bl	8004208 <_printf_common>
 800441c:	3001      	adds	r0, #1
 800441e:	d14d      	bne.n	80044bc <_printf_i+0x1c8>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b005      	add	sp, #20
 8004426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800442a:	4839      	ldr	r0, [pc, #228]	; (8004510 <_printf_i+0x21c>)
 800442c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	6821      	ldr	r1, [r4, #0]
 8004434:	1d1d      	adds	r5, r3, #4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6015      	str	r5, [r2, #0]
 800443a:	060a      	lsls	r2, r1, #24
 800443c:	d50b      	bpl.n	8004456 <_printf_i+0x162>
 800443e:	07ca      	lsls	r2, r1, #31
 8004440:	bf44      	itt	mi
 8004442:	f041 0120 	orrmi.w	r1, r1, #32
 8004446:	6021      	strmi	r1, [r4, #0]
 8004448:	b91b      	cbnz	r3, 8004452 <_printf_i+0x15e>
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	f022 0220 	bic.w	r2, r2, #32
 8004450:	6022      	str	r2, [r4, #0]
 8004452:	2210      	movs	r2, #16
 8004454:	e7b7      	b.n	80043c6 <_printf_i+0xd2>
 8004456:	064d      	lsls	r5, r1, #25
 8004458:	bf48      	it	mi
 800445a:	b29b      	uxthmi	r3, r3
 800445c:	e7ef      	b.n	800443e <_printf_i+0x14a>
 800445e:	4665      	mov	r5, ip
 8004460:	fbb3 f1f2 	udiv	r1, r3, r2
 8004464:	fb02 3311 	mls	r3, r2, r1, r3
 8004468:	5cc3      	ldrb	r3, [r0, r3]
 800446a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800446e:	460b      	mov	r3, r1
 8004470:	2900      	cmp	r1, #0
 8004472:	d1f5      	bne.n	8004460 <_printf_i+0x16c>
 8004474:	e7b9      	b.n	80043ea <_printf_i+0xf6>
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	6825      	ldr	r5, [r4, #0]
 800447a:	6961      	ldr	r1, [r4, #20]
 800447c:	1d18      	adds	r0, r3, #4
 800447e:	6010      	str	r0, [r2, #0]
 8004480:	0628      	lsls	r0, r5, #24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0x196>
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	e002      	b.n	8004490 <_printf_i+0x19c>
 800448a:	066a      	lsls	r2, r5, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0x192>
 800448e:	8019      	strh	r1, [r3, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	6123      	str	r3, [r4, #16]
 8004494:	4665      	mov	r5, ip
 8004496:	e7b9      	b.n	800440c <_printf_i+0x118>
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	1d19      	adds	r1, r3, #4
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	681d      	ldr	r5, [r3, #0]
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7fb fe9b 	bl	80001e0 <memchr>
 80044aa:	b108      	cbz	r0, 80044b0 <_printf_i+0x1bc>
 80044ac:	1b40      	subs	r0, r0, r5
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ba:	e7a7      	b.n	800440c <_printf_i+0x118>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	462a      	mov	r2, r5
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0aa      	beq.n	8004420 <_printf_i+0x12c>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	079b      	lsls	r3, r3, #30
 80044ce:	d413      	bmi.n	80044f8 <_printf_i+0x204>
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	4298      	cmp	r0, r3
 80044d6:	bfb8      	it	lt
 80044d8:	4618      	movlt	r0, r3
 80044da:	e7a3      	b.n	8004424 <_printf_i+0x130>
 80044dc:	2301      	movs	r3, #1
 80044de:	464a      	mov	r2, r9
 80044e0:	4639      	mov	r1, r7
 80044e2:	4630      	mov	r0, r6
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d09a      	beq.n	8004420 <_printf_i+0x12c>
 80044ea:	3501      	adds	r5, #1
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	9a03      	ldr	r2, [sp, #12]
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dcf2      	bgt.n	80044dc <_printf_i+0x1e8>
 80044f6:	e7eb      	b.n	80044d0 <_printf_i+0x1dc>
 80044f8:	2500      	movs	r5, #0
 80044fa:	f104 0919 	add.w	r9, r4, #25
 80044fe:	e7f5      	b.n	80044ec <_printf_i+0x1f8>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1ac      	bne.n	800445e <_printf_i+0x16a>
 8004504:	7803      	ldrb	r3, [r0, #0]
 8004506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800450a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800450e:	e76c      	b.n	80043ea <_printf_i+0xf6>
 8004510:	08004be8 	.word	0x08004be8
 8004514:	08004bf9 	.word	0x08004bf9

08004518 <memmove>:
 8004518:	4288      	cmp	r0, r1
 800451a:	b510      	push	{r4, lr}
 800451c:	eb01 0302 	add.w	r3, r1, r2
 8004520:	d807      	bhi.n	8004532 <memmove+0x1a>
 8004522:	1e42      	subs	r2, r0, #1
 8004524:	4299      	cmp	r1, r3
 8004526:	d00a      	beq.n	800453e <memmove+0x26>
 8004528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800452c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004530:	e7f8      	b.n	8004524 <memmove+0xc>
 8004532:	4283      	cmp	r3, r0
 8004534:	d9f5      	bls.n	8004522 <memmove+0xa>
 8004536:	1881      	adds	r1, r0, r2
 8004538:	1ad2      	subs	r2, r2, r3
 800453a:	42d3      	cmn	r3, r2
 800453c:	d100      	bne.n	8004540 <memmove+0x28>
 800453e:	bd10      	pop	{r4, pc}
 8004540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004544:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004548:	e7f7      	b.n	800453a <memmove+0x22>
	...

0800454c <_free_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4605      	mov	r5, r0
 8004550:	2900      	cmp	r1, #0
 8004552:	d045      	beq.n	80045e0 <_free_r+0x94>
 8004554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004558:	1f0c      	subs	r4, r1, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfb8      	it	lt
 800455e:	18e4      	addlt	r4, r4, r3
 8004560:	f000 f8d2 	bl	8004708 <__malloc_lock>
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <_free_r+0x98>)
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	4610      	mov	r0, r2
 800456a:	b933      	cbnz	r3, 800457a <_free_r+0x2e>
 800456c:	6063      	str	r3, [r4, #4]
 800456e:	6014      	str	r4, [r2, #0]
 8004570:	4628      	mov	r0, r5
 8004572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004576:	f000 b8c8 	b.w	800470a <__malloc_unlock>
 800457a:	42a3      	cmp	r3, r4
 800457c:	d90c      	bls.n	8004598 <_free_r+0x4c>
 800457e:	6821      	ldr	r1, [r4, #0]
 8004580:	1862      	adds	r2, r4, r1
 8004582:	4293      	cmp	r3, r2
 8004584:	bf04      	itt	eq
 8004586:	681a      	ldreq	r2, [r3, #0]
 8004588:	685b      	ldreq	r3, [r3, #4]
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	bf04      	itt	eq
 800458e:	1852      	addeq	r2, r2, r1
 8004590:	6022      	streq	r2, [r4, #0]
 8004592:	6004      	str	r4, [r0, #0]
 8004594:	e7ec      	b.n	8004570 <_free_r+0x24>
 8004596:	4613      	mov	r3, r2
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	b10a      	cbz	r2, 80045a0 <_free_r+0x54>
 800459c:	42a2      	cmp	r2, r4
 800459e:	d9fa      	bls.n	8004596 <_free_r+0x4a>
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	1858      	adds	r0, r3, r1
 80045a4:	42a0      	cmp	r0, r4
 80045a6:	d10b      	bne.n	80045c0 <_free_r+0x74>
 80045a8:	6820      	ldr	r0, [r4, #0]
 80045aa:	4401      	add	r1, r0
 80045ac:	1858      	adds	r0, r3, r1
 80045ae:	4282      	cmp	r2, r0
 80045b0:	6019      	str	r1, [r3, #0]
 80045b2:	d1dd      	bne.n	8004570 <_free_r+0x24>
 80045b4:	6810      	ldr	r0, [r2, #0]
 80045b6:	6852      	ldr	r2, [r2, #4]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	4401      	add	r1, r0
 80045bc:	6019      	str	r1, [r3, #0]
 80045be:	e7d7      	b.n	8004570 <_free_r+0x24>
 80045c0:	d902      	bls.n	80045c8 <_free_r+0x7c>
 80045c2:	230c      	movs	r3, #12
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	e7d3      	b.n	8004570 <_free_r+0x24>
 80045c8:	6820      	ldr	r0, [r4, #0]
 80045ca:	1821      	adds	r1, r4, r0
 80045cc:	428a      	cmp	r2, r1
 80045ce:	bf04      	itt	eq
 80045d0:	6811      	ldreq	r1, [r2, #0]
 80045d2:	6852      	ldreq	r2, [r2, #4]
 80045d4:	6062      	str	r2, [r4, #4]
 80045d6:	bf04      	itt	eq
 80045d8:	1809      	addeq	r1, r1, r0
 80045da:	6021      	streq	r1, [r4, #0]
 80045dc:	605c      	str	r4, [r3, #4]
 80045de:	e7c7      	b.n	8004570 <_free_r+0x24>
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	200000b8 	.word	0x200000b8

080045e8 <_malloc_r>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	1ccd      	adds	r5, r1, #3
 80045ec:	f025 0503 	bic.w	r5, r5, #3
 80045f0:	3508      	adds	r5, #8
 80045f2:	2d0c      	cmp	r5, #12
 80045f4:	bf38      	it	cc
 80045f6:	250c      	movcc	r5, #12
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	4606      	mov	r6, r0
 80045fc:	db01      	blt.n	8004602 <_malloc_r+0x1a>
 80045fe:	42a9      	cmp	r1, r5
 8004600:	d903      	bls.n	800460a <_malloc_r+0x22>
 8004602:	230c      	movs	r3, #12
 8004604:	6033      	str	r3, [r6, #0]
 8004606:	2000      	movs	r0, #0
 8004608:	bd70      	pop	{r4, r5, r6, pc}
 800460a:	f000 f87d 	bl	8004708 <__malloc_lock>
 800460e:	4a21      	ldr	r2, [pc, #132]	; (8004694 <_malloc_r+0xac>)
 8004610:	6814      	ldr	r4, [r2, #0]
 8004612:	4621      	mov	r1, r4
 8004614:	b991      	cbnz	r1, 800463c <_malloc_r+0x54>
 8004616:	4c20      	ldr	r4, [pc, #128]	; (8004698 <_malloc_r+0xb0>)
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	b91b      	cbnz	r3, 8004624 <_malloc_r+0x3c>
 800461c:	4630      	mov	r0, r6
 800461e:	f000 f863 	bl	80046e8 <_sbrk_r>
 8004622:	6020      	str	r0, [r4, #0]
 8004624:	4629      	mov	r1, r5
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f85e 	bl	80046e8 <_sbrk_r>
 800462c:	1c43      	adds	r3, r0, #1
 800462e:	d124      	bne.n	800467a <_malloc_r+0x92>
 8004630:	230c      	movs	r3, #12
 8004632:	6033      	str	r3, [r6, #0]
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f868 	bl	800470a <__malloc_unlock>
 800463a:	e7e4      	b.n	8004606 <_malloc_r+0x1e>
 800463c:	680b      	ldr	r3, [r1, #0]
 800463e:	1b5b      	subs	r3, r3, r5
 8004640:	d418      	bmi.n	8004674 <_malloc_r+0x8c>
 8004642:	2b0b      	cmp	r3, #11
 8004644:	d90f      	bls.n	8004666 <_malloc_r+0x7e>
 8004646:	600b      	str	r3, [r1, #0]
 8004648:	50cd      	str	r5, [r1, r3]
 800464a:	18cc      	adds	r4, r1, r3
 800464c:	4630      	mov	r0, r6
 800464e:	f000 f85c 	bl	800470a <__malloc_unlock>
 8004652:	f104 000b 	add.w	r0, r4, #11
 8004656:	1d23      	adds	r3, r4, #4
 8004658:	f020 0007 	bic.w	r0, r0, #7
 800465c:	1ac3      	subs	r3, r0, r3
 800465e:	d0d3      	beq.n	8004608 <_malloc_r+0x20>
 8004660:	425a      	negs	r2, r3
 8004662:	50e2      	str	r2, [r4, r3]
 8004664:	e7d0      	b.n	8004608 <_malloc_r+0x20>
 8004666:	428c      	cmp	r4, r1
 8004668:	684b      	ldr	r3, [r1, #4]
 800466a:	bf16      	itet	ne
 800466c:	6063      	strne	r3, [r4, #4]
 800466e:	6013      	streq	r3, [r2, #0]
 8004670:	460c      	movne	r4, r1
 8004672:	e7eb      	b.n	800464c <_malloc_r+0x64>
 8004674:	460c      	mov	r4, r1
 8004676:	6849      	ldr	r1, [r1, #4]
 8004678:	e7cc      	b.n	8004614 <_malloc_r+0x2c>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d005      	beq.n	8004690 <_malloc_r+0xa8>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4630      	mov	r0, r6
 8004688:	f000 f82e 	bl	80046e8 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d0cf      	beq.n	8004630 <_malloc_r+0x48>
 8004690:	6025      	str	r5, [r4, #0]
 8004692:	e7db      	b.n	800464c <_malloc_r+0x64>
 8004694:	200000b8 	.word	0x200000b8
 8004698:	200000bc 	.word	0x200000bc

0800469c <_realloc_r>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	4607      	mov	r7, r0
 80046a0:	4614      	mov	r4, r2
 80046a2:	460e      	mov	r6, r1
 80046a4:	b921      	cbnz	r1, 80046b0 <_realloc_r+0x14>
 80046a6:	4611      	mov	r1, r2
 80046a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046ac:	f7ff bf9c 	b.w	80045e8 <_malloc_r>
 80046b0:	b922      	cbnz	r2, 80046bc <_realloc_r+0x20>
 80046b2:	f7ff ff4b 	bl	800454c <_free_r>
 80046b6:	4625      	mov	r5, r4
 80046b8:	4628      	mov	r0, r5
 80046ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046bc:	f000 f826 	bl	800470c <_malloc_usable_size_r>
 80046c0:	42a0      	cmp	r0, r4
 80046c2:	d20f      	bcs.n	80046e4 <_realloc_r+0x48>
 80046c4:	4621      	mov	r1, r4
 80046c6:	4638      	mov	r0, r7
 80046c8:	f7ff ff8e 	bl	80045e8 <_malloc_r>
 80046cc:	4605      	mov	r5, r0
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d0f2      	beq.n	80046b8 <_realloc_r+0x1c>
 80046d2:	4631      	mov	r1, r6
 80046d4:	4622      	mov	r2, r4
 80046d6:	f7ff fc11 	bl	8003efc <memcpy>
 80046da:	4631      	mov	r1, r6
 80046dc:	4638      	mov	r0, r7
 80046de:	f7ff ff35 	bl	800454c <_free_r>
 80046e2:	e7e9      	b.n	80046b8 <_realloc_r+0x1c>
 80046e4:	4635      	mov	r5, r6
 80046e6:	e7e7      	b.n	80046b8 <_realloc_r+0x1c>

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4c06      	ldr	r4, [pc, #24]	; (8004704 <_sbrk_r+0x1c>)
 80046ec:	2300      	movs	r3, #0
 80046ee:	4605      	mov	r5, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	f7fc f926 	bl	8000944 <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20000268 	.word	0x20000268

08004708 <__malloc_lock>:
 8004708:	4770      	bx	lr

0800470a <__malloc_unlock>:
 800470a:	4770      	bx	lr

0800470c <_malloc_usable_size_r>:
 800470c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004710:	1f18      	subs	r0, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfbc      	itt	lt
 8004716:	580b      	ldrlt	r3, [r1, r0]
 8004718:	18c0      	addlt	r0, r0, r3
 800471a:	4770      	bx	lr

0800471c <_init>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr

08004728 <_fini>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

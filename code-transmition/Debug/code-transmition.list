
code-transmition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08003e44  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003e44  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e57  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019cd  00000000  00000000  00028ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0002b090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c8c  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007735  00000000  00000000  0004540c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094576  00000000  00000000  0004cb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e10b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002178  00000000  00000000  000e1134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b30 	.word	0x08003b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003b30 	.word	0x08003b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <sendData>:
/* USER CODE BEGIN 0 */
/**
 * integer length value of data you want to send in special format
 */
HAL_StatusTypeDef sendData(UART_HandleTypeDef *huart, int32_t messageCode,
		uint8_t *data, uint32_t len, uint32_t timeout) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) (&len), sizeof(len), timeout);
 800028e:	4639      	mov	r1, r7
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	2204      	movs	r2, #4
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 fb49 	bl	800292c <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*) (&messageCode), sizeof(messageCode),
 800029a:	f107 0108 	add.w	r1, r7, #8
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	2204      	movs	r2, #4
 80002a2:	68f8      	ldr	r0, [r7, #12]
 80002a4:	f002 fb42 	bl	800292c <HAL_UART_Transmit>
			timeout);
	return HAL_UART_Transmit(huart, data, len, timeout);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	68f8      	ldr	r0, [r7, #12]
 80002b2:	f002 fb3b 	bl	800292c <HAL_UART_Transmit>
 80002b6:	4603      	mov	r3, r0
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <HAL_printf>:

/**
 * As you can see, max size of sending string after formating must be at most 255 characters*/
HAL_StatusTypeDef HAL_printf(const char *format, ...) {
 80002c0:	b40f      	push	{r0, r1, r2, r3}
 80002c2:	b580      	push	{r7, lr}
 80002c4:	b0c4      	sub	sp, #272	; 0x110
 80002c6:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg;
	va_start(arg, format);
 80002c8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80002cc:	463b      	mov	r3, r7
 80002ce:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 80002d0:	463b      	mov	r3, r7
 80002d2:	1d38      	adds	r0, r7, #4
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80002da:	f003 f839 	bl	8003350 <vsiprintf>
	HAL_StatusTypeDef result = sendData(&huart1, STR, (uint8_t*) buff,
			(int32_t) strlen(buff), 3000);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff75 	bl	80001d0 <strlen>
 80002e6:	4601      	mov	r1, r0
	HAL_StatusTypeDef result = sendData(&huart1, STR, (uint8_t*) buff,
 80002e8:	1d3a      	adds	r2, r7, #4
 80002ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	460b      	mov	r3, r1
 80002f2:	2101      	movs	r1, #1
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <HAL_printf+0x54>)
 80002f6:	f7ff ffc3 	bl	8000280 <sendData>
 80002fa:	4603      	mov	r3, r0
 80002fc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(arg);
	return result;
 8000300:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8000304:	4618      	mov	r0, r3
 8000306:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800030a:	46bd      	mov	sp, r7
 800030c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000310:	b004      	add	sp, #16
 8000312:	4770      	bx	lr
 8000314:	20000098 	.word	0x20000098

08000318 <HAL_eprintf>:
HAL_StatusTypeDef HAL_eprintf(const char *format, ...) {
 8000318:	b40f      	push	{r0, r1, r2, r3}
 800031a:	b580      	push	{r7, lr}
 800031c:	b0c4      	sub	sp, #272	; 0x110
 800031e:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg;
	va_start(arg, format);
 8000320:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000324:	463b      	mov	r3, r7
 8000326:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 8000328:	463b      	mov	r3, r7
 800032a:	1d38      	adds	r0, r7, #4
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000332:	f003 f80d 	bl	8003350 <vsiprintf>
	HAL_StatusTypeDef result = sendData(&huart1, ERRORSTR, (uint8_t*) buff,
			(int) strlen(buff), 3000);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f7ff ff49 	bl	80001d0 <strlen>
 800033e:	4601      	mov	r1, r0
	HAL_StatusTypeDef result = sendData(&huart1, ERRORSTR, (uint8_t*) buff,
 8000340:	1d3a      	adds	r2, r7, #4
 8000342:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	460b      	mov	r3, r1
 800034a:	2102      	movs	r1, #2
 800034c:	4807      	ldr	r0, [pc, #28]	; (800036c <HAL_eprintf+0x54>)
 800034e:	f7ff ff97 	bl	8000280 <sendData>
 8000352:	4603      	mov	r3, r0
 8000354:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	va_end(arg);
	return result;
 8000358:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 800035c:	4618      	mov	r0, r3
 800035e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000362:	46bd      	mov	sp, r7
 8000364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000368:	b004      	add	sp, #16
 800036a:	4770      	bx	lr
 800036c:	20000098 	.word	0x20000098

08000370 <receive_uint_32>:

/**
 * @return uint_32 from UART or -1 if occurred and error
 */
int32_t receive_uint_32(UART_HandleTypeDef *huart, uint32_t timeout) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	int32_t result = 3;
 800037a:	2303      	movs	r3, #3
 800037c:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive(huart, (uint8_t*) (&result), sizeof(int32_t) , timeout);
 800037e:	f107 010c 	add.w	r1, r7, #12
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	2204      	movs	r2, #4
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f002 fb63 	bl	8002a52 <HAL_UART_Receive>
	return result;
 800038c:	68fb      	ldr	r3, [r7, #12]
}
 800038e:	4618      	mov	r0, r3
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <receive128bit>:

HAL_StatusTypeDef receive128bit(UART_HandleTypeDef *huart, uint8_t * buff,
		uint32_t timeout) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	60f8      	str	r0, [r7, #12]
 800039e:	60b9      	str	r1, [r7, #8]
 80003a0:	607a      	str	r2, [r7, #4]
	return HAL_UART_Receive(huart, buff, (uint16_t)16, timeout);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2210      	movs	r2, #16
 80003a6:	68b9      	ldr	r1, [r7, #8]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f002 fb52 	bl	8002a52 <HAL_UART_Receive>
 80003ae:	4603      	mov	r3, r0
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <sendStartCode>:
void sendStartCode(UART_HandleTypeDef *huart) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	uint8_t code = 0xAE;
 80003c0:	23ae      	movs	r3, #174	; 0xae
 80003c2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &code, sizeof(uint8_t), 100);
 80003c4:	f107 010f 	add.w	r1, r7, #15
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	2201      	movs	r2, #1
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f002 faad 	bl	800292c <HAL_UART_Transmit>
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <store128bit>:

/**
 * @note Do not forget unlock memory and erase pages where you want to store data
 */
HAL_StatusTypeDef store128bit(uint8_t *buff, uint32_t address) {
 80003da:	b590      	push	{r4, r7, lr}
 80003dc:	b087      	sub	sp, #28
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
 80003e2:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef result = HAL_OK;
 80003e4:	2300      	movs	r3, #0
 80003e6:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 16; i += 4) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	e01c      	b.n	8000428 <store128bit+0x4e>
		HAL_StatusTypeDef currResult = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	18d1      	adds	r1, r2, r3
				address + i, (uint64_t)(((uint32_t*) buff)[i/4]));
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	da00      	bge.n	80003fc <store128bit+0x22>
 80003fa:	3303      	adds	r3, #3
 80003fc:	109b      	asrs	r3, r3, #2
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	681b      	ldr	r3, [r3, #0]
		HAL_StatusTypeDef currResult = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000406:	f04f 0400 	mov.w	r4, #0
 800040a:	461a      	mov	r2, r3
 800040c:	4623      	mov	r3, r4
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fbfe 	bl	8000c10 <HAL_FLASH_Program>
 8000414:	4603      	mov	r3, r0
 8000416:	73fb      	strb	r3, [r7, #15]

		if (currResult != HAL_OK) {
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <store128bit+0x48>
			result = currResult;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 16; i += 4) {
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3304      	adds	r3, #4
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	2b0f      	cmp	r3, #15
 800042c:	dddf      	ble.n	80003ee <store128bit+0x14>
		}
	}
	return result;
 800042e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000430:	4618      	mov	r0, r3
 8000432:	371c      	adds	r7, #28
 8000434:	46bd      	mov	sp, r7
 8000436:	bd90      	pop	{r4, r7, pc}

08000438 <startMainProgram>:


/**
 * @param address contains address where we store the main program
 */
void startMainProgram(uint32_t address) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	NULL;
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <preparePages>:
;

/**
 * @note Do not forget unlock memory before cleaning any data
 */
HAL_StatusTypeDef preparePages(uint32_t address, uint32_t len) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
	uint32_t numberOfPages = (len / PAGE_SIZE) + 1;
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	0adb      	lsrs	r3, r3, #11
 800045a:	3301      	adds	r3, #1
 800045c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseConfig = { FLASH_TYPEERASE_PAGES, address,
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	61bb      	str	r3, [r7, #24]
			numberOfPages };
	uint32_t PageError;
	return HAL_FLASHEx_Erase(&eraseConfig, &PageError);
 800046a:	f107 020c 	add.w	r2, r7, #12
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f000 fcff 	bl	8000e78 <HAL_FLASHEx_Erase>
 800047a:	4603      	mov	r3, r0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <main>:
 * First we send 0xABCDEF byte by UART to say our desktop application that we want to receive data
 * Second we receive int32_t variable (4 bytes) to find out how many program store next step is to write it on flash
 * After success receive we

 */
int main(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800048a:	f000 fa75 	bl	8000978 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800048e:	f000 f8c7 	bl	8000620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000492:	f000 f945 	bl	8000720 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000496:	f000 f913 	bl	80006c0 <MX_USART1_UART_Init>

	/* USER CODE BEGIN 2 */

	uint32_t address = 0x80020000;
 800049a:	4b53      	ldr	r3, [pc, #332]	; (80005e8 <main+0x164>)
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t timeout = 3000;
 800049e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80004a2:	61fb      	str	r3, [r7, #28]
	sendStartCode(&huart1);
 80004a4:	4851      	ldr	r0, [pc, #324]	; (80005ec <main+0x168>)
 80004a6:	f7ff ff87 	bl	80003b8 <sendStartCode>
	int32_t len = receive_uint_32(&huart1, timeout);
 80004aa:	69f9      	ldr	r1, [r7, #28]
 80004ac:	484f      	ldr	r0, [pc, #316]	; (80005ec <main+0x168>)
 80004ae:	f7ff ff5f 	bl	8000370 <receive_uint_32>
 80004b2:	61b8      	str	r0, [r7, #24]
	HAL_printf("%d - bytes going to be received", len);
 80004b4:	69b9      	ldr	r1, [r7, #24]
 80004b6:	484e      	ldr	r0, [pc, #312]	; (80005f0 <main+0x16c>)
 80004b8:	f7ff ff02 	bl	80002c0 <HAL_printf>
	int32_t dataCode = receive_uint_32(&huart1, timeout);
 80004bc:	69f9      	ldr	r1, [r7, #28]
 80004be:	484b      	ldr	r0, [pc, #300]	; (80005ec <main+0x168>)
 80004c0:	f7ff ff56 	bl	8000370 <receive_uint_32>
 80004c4:	6178      	str	r0, [r7, #20]
	HAL_printf("%u - data code was received", dataCode);
 80004c6:	6979      	ldr	r1, [r7, #20]
 80004c8:	484a      	ldr	r0, [pc, #296]	; (80005f4 <main+0x170>)
 80004ca:	f7ff fef9 	bl	80002c0 <HAL_printf>
	if (len == -1) {
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004d4:	d105      	bne.n	80004e2 <main+0x5e>
		startMainProgram(address);
 80004d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004d8:	f7ff ffae 	bl	8000438 <startMainProgram>
		HAL_printf("No data was received, starts the main program");
 80004dc:	4846      	ldr	r0, [pc, #280]	; (80005f8 <main+0x174>)
 80004de:	f7ff feef 	bl	80002c0 <HAL_printf>
	}
	if (len % 16 != 0) {
 80004e2:	69bb      	ldr	r3, [r7, #24]
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <main+0x72>
		HAL_eprintf("Length of the file must be divisible by 16");
 80004ec:	4843      	ldr	r0, [pc, #268]	; (80005fc <main+0x178>)
 80004ee:	f7ff ff13 	bl	8000318 <HAL_eprintf>
		return 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	e073      	b.n	80005de <main+0x15a>
	}

	if (dataCode == PROGRAM) {
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d16c      	bne.n	80005d6 <main+0x152>
		HAL_printf("Program is pending");
 80004fc:	4840      	ldr	r0, [pc, #256]	; (8000600 <main+0x17c>)
 80004fe:	f7ff fedf 	bl	80002c0 <HAL_printf>
		HAL_FLASH_Unlock();
 8000502:	f000 fbf5 	bl	8000cf0 <HAL_FLASH_Unlock>
		HAL_StatusTypeDef result = preparePages(address, len);
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	4619      	mov	r1, r3
 800050a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800050c:	f7ff ff9e 	bl	800044c <preparePages>
 8000510:	4603      	mov	r3, r0
 8000512:	74fb      	strb	r3, [r7, #19]
		if (result != HAL_OK) {
 8000514:	7cfb      	ldrb	r3, [r7, #19]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d005      	beq.n	8000526 <main+0xa2>
			HAL_eprintf(
 800051a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <main+0x180>)
 800051e:	f7ff fefb 	bl	8000318 <HAL_eprintf>
					"An error occurred while erasing pages started with the address",
					address);
			return 2;
 8000522:	2302      	movs	r3, #2
 8000524:	e05b      	b.n	80005de <main+0x15a>
		}
		if (result == HAL_OK) {
 8000526:	7cfb      	ldrb	r3, [r7, #19]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <main+0xae>
			HAL_printf("Pages was erased successfully");
 800052c:	4836      	ldr	r0, [pc, #216]	; (8000608 <main+0x184>)
 800052e:	f7ff fec7 	bl	80002c0 <HAL_printf>
		}

		for (int32_t i = 0; i < len; i += 16, address += 16) {
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
 8000536:	e048      	b.n	80005ca <main+0x146>
			uint8_t buff[16];
			HAL_StatusTypeDef result = receive128bit(&huart1, buff, timeout + 400);
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800053e:	463b      	mov	r3, r7
 8000540:	4619      	mov	r1, r3
 8000542:	482a      	ldr	r0, [pc, #168]	; (80005ec <main+0x168>)
 8000544:	f7ff ff27 	bl	8000396 <receive128bit>
 8000548:	4603      	mov	r3, r0
 800054a:	74bb      	strb	r3, [r7, #18]
			if (result != HAL_OK) {
 800054c:	7cbb      	ldrb	r3, [r7, #18]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00a      	beq.n	8000568 <main+0xe4>
				HAL_eprintf(
 8000552:	6a3b      	ldr	r3, [r7, #32]
 8000554:	2b00      	cmp	r3, #0
 8000556:	da00      	bge.n	800055a <main+0xd6>
 8000558:	330f      	adds	r3, #15
 800055a:	111b      	asrs	r3, r3, #4
 800055c:	4619      	mov	r1, r3
 800055e:	482b      	ldr	r0, [pc, #172]	; (800060c <main+0x188>)
 8000560:	f7ff feda 	bl	8000318 <HAL_eprintf>
						"An error occurred while transferring data: %d block",
						i / 16);
				return 2;
 8000564:	2302      	movs	r3, #2
 8000566:	e03a      	b.n	80005de <main+0x15a>
			}
			if (result == HAL_OK) {
 8000568:	7cbb      	ldrb	r3, [r7, #18]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d108      	bne.n	8000580 <main+0xfc>
				HAL_printf("%d block was received", i / 16);
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	2b00      	cmp	r3, #0
 8000572:	da00      	bge.n	8000576 <main+0xf2>
 8000574:	330f      	adds	r3, #15
 8000576:	111b      	asrs	r3, r3, #4
 8000578:	4619      	mov	r1, r3
 800057a:	4825      	ldr	r0, [pc, #148]	; (8000610 <main+0x18c>)
 800057c:	f7ff fea0 	bl	80002c0 <HAL_printf>
			}

			HAL_StatusTypeDef writeResult = store128bit(buff, address);
 8000580:	463b      	mov	r3, r7
 8000582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff28 	bl	80003da <store128bit>
 800058a:	4603      	mov	r3, r0
 800058c:	747b      	strb	r3, [r7, #17]
			if (writeResult == HAL_OK) {
 800058e:	7c7b      	ldrb	r3, [r7, #17]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10a      	bne.n	80005aa <main+0x126>
				HAL_printf("%d block was received and stored at 0x%x address\n",
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	2b00      	cmp	r3, #0
 8000598:	da00      	bge.n	800059c <main+0x118>
 800059a:	330f      	adds	r3, #15
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005a0:	4619      	mov	r1, r3
 80005a2:	481c      	ldr	r0, [pc, #112]	; (8000614 <main+0x190>)
 80005a4:	f7ff fe8c 	bl	80002c0 <HAL_printf>
 80005a8:	e009      	b.n	80005be <main+0x13a>
						i / 16, address);
			}else {
				HAL_printf(
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	da00      	bge.n	80005b2 <main+0x12e>
 80005b0:	330f      	adds	r3, #15
 80005b2:	111b      	asrs	r3, r3, #4
 80005b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005b6:	4619      	mov	r1, r3
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <main+0x194>)
 80005ba:	f7ff fe81 	bl	80002c0 <HAL_printf>
		for (int32_t i = 0; i < len; i += 16, address += 16) {
 80005be:	6a3b      	ldr	r3, [r7, #32]
 80005c0:	3310      	adds	r3, #16
 80005c2:	623b      	str	r3, [r7, #32]
 80005c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c6:	3310      	adds	r3, #16
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
 80005ca:	6a3a      	ldr	r2, [r7, #32]
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	dbb2      	blt.n	8000538 <main+0xb4>
						"An error occurred while writing data: %d block in 0x%x address\n",
						i / 16, address);
			}

		}
		HAL_FLASH_Lock();
 80005d2:	f000 fbb3 	bl	8000d3c <HAL_FLASH_Lock>
	}

	HAL_printf(
 80005d6:	4811      	ldr	r0, [pc, #68]	; (800061c <main+0x198>)
 80005d8:	f7ff fe72 	bl	80002c0 <HAL_printf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 80005dc:	e7fe      	b.n	80005dc <main+0x158>

		/* USER CODE BEGIN 3 */
	}

	/* USER CODE END 3 */
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	80020000 	.word	0x80020000
 80005ec:	20000098 	.word	0x20000098
 80005f0:	08003b48 	.word	0x08003b48
 80005f4:	08003b68 	.word	0x08003b68
 80005f8:	08003b84 	.word	0x08003b84
 80005fc:	08003bb4 	.word	0x08003bb4
 8000600:	08003be0 	.word	0x08003be0
 8000604:	08003bf4 	.word	0x08003bf4
 8000608:	08003c34 	.word	0x08003c34
 800060c:	08003c54 	.word	0x08003c54
 8000610:	08003c88 	.word	0x08003c88
 8000614:	08003ca0 	.word	0x08003ca0
 8000618:	08003cd4 	.word	0x08003cd4
 800061c:	08003d14 	.word	0x08003d14

08000620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b09e      	sub	sp, #120	; 0x78
 8000624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f002 fe70 	bl	8003314 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000644:	463b      	mov	r3, r7
 8000646:	223c      	movs	r2, #60	; 0x3c
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fe62 	bl	8003314 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800065c:	2300      	movs	r3, #0
 800065e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000660:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fe25 	bl	80012b4 <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x54>
		Error_Handler();
 8000670:	f000 f86e 	bl	8000750 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fd18 	bl	80020c4 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x7e>
		Error_Handler();
 800069a:	f000 f859 	bl	8000750 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800069e:	2301      	movs	r3, #1
 80006a0:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006a6:	463b      	mov	r3, r7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff41 	bl	8002530 <HAL_RCCEx_PeriphCLKConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x98>
		Error_Handler();
 80006b4:	f000 f84c 	bl	8000750 <Error_Handler>
	}
}
 80006b8:	bf00      	nop
 80006ba:	3778      	adds	r7, #120	; 0x78
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006c6:	4a15      	ldr	r2, [pc, #84]	; (800071c <MX_USART1_UART_Init+0x5c>)
 80006c8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART1_UART_Init+0x58>)
 8000704:	f002 f8c4 	bl	8002890 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800070e:	f000 f81f 	bl	8000750 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000098 	.word	0x20000098
 800071c:	40013800 	.word	0x40013800

08000720 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_GPIO_Init+0x2c>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <MX_GPIO_Init+0x2c>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_GPIO_Init+0x2c>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a18      	ldr	r2, [pc, #96]	; (8000828 <HAL_UART_MspInit+0x80>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d129      	bne.n	800081e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_MspInit+0x84>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_UART_MspInit+0x84>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_UART_MspInit+0x84>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_UART_MspInit+0x84>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_UART_MspInit+0x84>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6153      	str	r3, [r2, #20]
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_UART_MspInit+0x84>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800080c:	2307      	movs	r3, #7
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fbd1 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40013800 	.word	0x40013800
 800082c:	40021000 	.word	0x40021000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f8be 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f002 fd00 	bl	80032c0 <__errno>
 80008c0:	4602      	mov	r2, r0
 80008c2:	230c      	movs	r3, #12
 80008c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000a000 	.word	0x2000a000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	20000148 	.word	0x20000148

080008f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SystemInit+0x28>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SystemInit+0x28>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SystemInit+0x28>)
 800090e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000912:	609a      	str	r2, [r3, #8]
#endif
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800095c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000928:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800092a:	e003      	b.n	8000934 <LoopCopyDataInit>

0800092c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800092e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000930:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000932:	3104      	adds	r1, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000938:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800093a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800093c:	d3f6      	bcc.n	800092c <CopyDataInit>
	ldr	r2, =_sbss
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000940:	e002      	b.n	8000948 <LoopFillZerobss>

08000942 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000942:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000944:	f842 3b04 	str.w	r3, [r2], #4

08000948 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <LoopForever+0x16>)
	cmp	r2, r3
 800094a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800094c:	d3f9      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094e:	f7ff ffd3 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000952:	f002 fcbb 	bl	80032cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff fd95 	bl	8000484 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000960:	08003dd4 	.word	0x08003dd4
	ldr	r0, =_sdata
 8000964:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000968:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800096c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000970:	20000144 	.word	0x20000144

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f90d 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fee4 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f917 	bl	8000bf6 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295
 80009e0:	f000 f8ed 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000118 	.word	0x20000118

08000a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000118 	.word	0x20000118

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff47 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5c 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb0 	bl	8000b64 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_FLASH_Program+0xd8>)
 8000c2c:	7e1b      	ldrb	r3, [r3, #24]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_FLASH_Program+0x26>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e054      	b.n	8000ce0 <HAL_FLASH_Program+0xd0>
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_FLASH_Program+0xd8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c40:	f000 f8a8 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000c44:	4603      	mov	r3, r0
 8000c46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d144      	bne.n	8000cd8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d102      	bne.n	8000c5a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c54:	2301      	movs	r3, #1
 8000c56:	757b      	strb	r3, [r7, #21]
 8000c58:	e007      	b.n	8000c6a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d102      	bne.n	8000c66 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c60:	2302      	movs	r3, #2
 8000c62:	757b      	strb	r3, [r7, #21]
 8000c64:	e001      	b.n	8000c6a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c66:	2304      	movs	r3, #4
 8000c68:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75bb      	strb	r3, [r7, #22]
 8000c6e:	e02d      	b.n	8000ccc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c70:	7dbb      	ldrb	r3, [r7, #22]
 8000c72:	005a      	lsls	r2, r3, #1
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	eb02 0c03 	add.w	ip, r2, r3
 8000c7a:	7dbb      	ldrb	r3, [r7, #22]
 8000c7c:	0119      	lsls	r1, r3, #4
 8000c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c82:	f1c1 0620 	rsb	r6, r1, #32
 8000c86:	f1a1 0020 	sub.w	r0, r1, #32
 8000c8a:	fa22 f401 	lsr.w	r4, r2, r1
 8000c8e:	fa03 f606 	lsl.w	r6, r3, r6
 8000c92:	4334      	orrs	r4, r6
 8000c94:	fa23 f000 	lsr.w	r0, r3, r0
 8000c98:	4304      	orrs	r4, r0
 8000c9a:	fa23 f501 	lsr.w	r5, r3, r1
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4660      	mov	r0, ip
 8000ca4:	f000 f85a 	bl	8000d5c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000ca8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cac:	f000 f872 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_FLASH_Program+0xdc>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_FLASH_Program+0xdc>)
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d107      	bne.n	8000cd6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cc6:	7dbb      	ldrb	r3, [r7, #22]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	75bb      	strb	r3, [r7, #22]
 8000ccc:	7dba      	ldrb	r2, [r7, #22]
 8000cce:	7d7b      	ldrb	r3, [r7, #21]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d3cd      	bcc.n	8000c70 <HAL_FLASH_Program+0x60>
 8000cd4:	e000      	b.n	8000cd8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000cd6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_FLASH_Program+0xd8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	761a      	strb	r2, [r3, #24]

  return status;
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	371c      	adds	r7, #28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ce8:	20000120 	.word	0x20000120
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_FLASH_Unlock+0x40>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00d      	beq.n	8000d22 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_FLASH_Unlock+0x40>)
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_FLASH_Unlock+0x44>)
 8000d0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_FLASH_Unlock+0x40>)
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_FLASH_Unlock+0x48>)
 8000d10:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_FLASH_Unlock+0x40>)
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40022000 	.word	0x40022000
 8000d34:	45670123 	.word	0x45670123
 8000d38:	cdef89ab 	.word	0xcdef89ab

08000d3c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_FLASH_Lock+0x1c>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_FLASH_Lock+0x1c>)
 8000d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d4a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	40022000 	.word	0x40022000

08000d5c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <FLASH_Program_HalfWord+0x30>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <FLASH_Program_HalfWord+0x34>)
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <FLASH_Program_HalfWord+0x34>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	887a      	ldrh	r2, [r7, #2]
 8000d7e:	801a      	strh	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	20000120 	.word	0x20000120
 8000d90:	40022000 	.word	0x40022000

08000d94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff fe46 	bl	8000a2c <HAL_GetTick>
 8000da0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000da2:	e010      	b.n	8000dc6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000daa:	d00c      	beq.n	8000dc6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <FLASH_WaitForLastOperation+0x2e>
 8000db2:	f7ff fe3b 	bl	8000a2c <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d201      	bcs.n	8000dc6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e01f      	b.n	8000e06 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <FLASH_WaitForLastOperation+0x7c>)
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d0e8      	beq.n	8000da4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <FLASH_WaitForLastOperation+0x7c>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	2b20      	cmp	r3, #32
 8000ddc:	d102      	bne.n	8000de4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <FLASH_WaitForLastOperation+0x7c>)
 8000de0:	2220      	movs	r2, #32
 8000de2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <FLASH_WaitForLastOperation+0x7c>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d005      	beq.n	8000dfc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <FLASH_WaitForLastOperation+0x7c>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d103      	bne.n	8000e04 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000dfc:	f000 f80a 	bl	8000e14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40022000 	.word	0x40022000

08000e14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <FLASH_SetErrorCode+0x5c>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d109      	bne.n	8000e3e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <FLASH_SetErrorCode+0x60>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <FLASH_SetErrorCode+0x60>)
 8000e34:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <FLASH_SetErrorCode+0x5c>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d109      	bne.n	8000e5e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <FLASH_SetErrorCode+0x60>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <FLASH_SetErrorCode+0x60>)
 8000e54:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <FLASH_SetErrorCode+0x5c>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	60d3      	str	r3, [r2, #12]
}  
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	40022000 	.word	0x40022000
 8000e74:	20000120 	.word	0x20000120

08000e78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <HAL_FLASHEx_Erase+0xcc>)
 8000e8c:	7e1b      	ldrb	r3, [r3, #24]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_FLASHEx_Erase+0x1e>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e052      	b.n	8000f3c <HAL_FLASHEx_Erase+0xc4>
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <HAL_FLASHEx_Erase+0xcc>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d115      	bne.n	8000ed0 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea8:	f7ff ff74 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d140      	bne.n	8000f34 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000eb2:	f000 f84b 	bl	8000f4c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000eb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eba:	f7ff ff6b 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_FLASHEx_Erase+0xd0>)
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	4a20      	ldr	r2, [pc, #128]	; (8000f48 <HAL_FLASHEx_Erase+0xd0>)
 8000ec8:	f023 0304 	bic.w	r3, r3, #4
 8000ecc:	6113      	str	r3, [r2, #16]
 8000ece:	e031      	b.n	8000f34 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ed0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ed4:	f7ff ff5e 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d12a      	bne.n	8000f34 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	e019      	b.n	8000f22 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000eee:	68b8      	ldr	r0, [r7, #8]
 8000ef0:	f000 f846 	bl	8000f80 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ef4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ef8:	f7ff ff4c 	bl	8000d94 <FLASH_WaitForLastOperation>
 8000efc:	4603      	mov	r3, r0
 8000efe:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_FLASHEx_Erase+0xd0>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <HAL_FLASHEx_Erase+0xd0>)
 8000f06:	f023 0302 	bic.w	r3, r3, #2
 8000f0a:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	601a      	str	r2, [r3, #0]
            break;
 8000f18:	e00c      	b.n	8000f34 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f20:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	02da      	lsls	r2, r3, #11
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3dc      	bcc.n	8000eee <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_FLASHEx_Erase+0xcc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	761a      	strb	r2, [r3, #24]

  return status;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000120 	.word	0x20000120
 8000f48:	40022000 	.word	0x40022000

08000f4c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <FLASH_MassErase+0x2c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <FLASH_MassErase+0x30>)
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <FLASH_MassErase+0x30>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <FLASH_MassErase+0x30>)
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <FLASH_MassErase+0x30>)
 8000f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6c:	6113      	str	r3, [r2, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000120 	.word	0x20000120
 8000f7c:	40022000 	.word	0x40022000

08000f80 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <FLASH_PageErase+0x38>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <FLASH_PageErase+0x3c>)
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <FLASH_PageErase+0x3c>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <FLASH_PageErase+0x3c>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <FLASH_PageErase+0x3c>)
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <FLASH_PageErase+0x3c>)
 8000fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000faa:	6113      	str	r3, [r2, #16]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000120 	.word	0x20000120
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e154      	b.n	800127a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8146 	beq.w	8001274 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d00b      	beq.n	8001008 <HAL_GPIO_Init+0x48>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffc:	2b11      	cmp	r3, #17
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0xea>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	6939      	ldr	r1, [r7, #16]
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 80a0 	beq.w	8001274 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001134:	4b58      	ldr	r3, [pc, #352]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a57      	ldr	r2, [pc, #348]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <HAL_GPIO_Init+0x2d8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800114c:	4a53      	ldr	r2, [pc, #332]	; (800129c <HAL_GPIO_Init+0x2dc>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001176:	d019      	beq.n	80011ac <HAL_GPIO_Init+0x1ec>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <HAL_GPIO_Init+0x2e0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x1e8>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a48      	ldr	r2, [pc, #288]	; (80012a4 <HAL_GPIO_Init+0x2e4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a47      	ldr	r2, [pc, #284]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x1e0>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a46      	ldr	r2, [pc, #280]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x1dc>
 8001198:	2304      	movs	r3, #4
 800119a:	e008      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 800119c:	2305      	movs	r3, #5
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011ac:	2300      	movs	r3, #0
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011be:	4937      	ldr	r1, [pc, #220]	; (800129c <HAL_GPIO_Init+0x2dc>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011f0:	4a2f      	ldr	r2, [pc, #188]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001244:	4a1a      	ldr	r2, [pc, #104]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	f47f aea3 	bne.w	8000fd0 <HAL_GPIO_Init+0x10>
  }
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	48000c00 	.word	0x48000c00
 80012ac:	48001000 	.word	0x48001000
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	f000 bef4 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 816a 	beq.w	80015b2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012de:	4bb3      	ldr	r3, [pc, #716]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d00c      	beq.n	8001304 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ea:	4bb0      	ldr	r3, [pc, #704]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d159      	bne.n	80013aa <HAL_RCC_OscConfig+0xf6>
 80012f6:	4bad      	ldr	r3, [pc, #692]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d152      	bne.n	80013aa <HAL_RCC_OscConfig+0xf6>
 8001304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001308:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001318:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x82>
 8001330:	4b9e      	ldr	r3, [pc, #632]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0xae>
 8001336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001352:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800135e:	4b93      	ldr	r3, [pc, #588]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001366:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800136a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001376:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 810c 	beq.w	80015b0 <HAL_RCC_OscConfig+0x2fc>
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 8106 	bne.w	80015b0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f000 be86 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x110>
 80013b6:	4b7d      	ldr	r3, [pc, #500]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7c      	ldr	r2, [pc, #496]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	e030      	b.n	8001426 <HAL_RCC_OscConfig+0x172>
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x134>
 80013ce:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a76      	ldr	r2, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b74      	ldr	r3, [pc, #464]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a73      	ldr	r2, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01e      	b.n	8001426 <HAL_RCC_OscConfig+0x172>
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f2:	d10c      	bne.n	800140e <HAL_RCC_OscConfig+0x15a>
 80013f4:	4b6d      	ldr	r3, [pc, #436]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6c      	ldr	r2, [pc, #432]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80013fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a69      	ldr	r2, [pc, #420]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	e00b      	b.n	8001426 <HAL_RCC_OscConfig+0x172>
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a66      	ldr	r2, [pc, #408]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b64      	ldr	r3, [pc, #400]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a63      	ldr	r2, [pc, #396]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001426:	4b61      	ldr	r3, [pc, #388]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f023 020f 	bic.w	r2, r3, #15
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	495d      	ldr	r1, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001436:	4313      	orrs	r3, r2
 8001438:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d059      	beq.n	80014f8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff faf2 	bl	8000a2c <HAL_GetTick>
 8001448:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144c:	e00a      	b.n	8001464 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144e:	f7ff faed 	bl	8000a2c <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d902      	bls.n	8001464 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	f000 be29 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001468:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001478:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x1e2>
 8001490:	4b46      	ldr	r3, [pc, #280]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e015      	b.n	80014c2 <HAL_RCC_OscConfig+0x20e>
 8001496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80014ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014ce:	fa92 f2a2 	rbit	r2, r2
 80014d2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80014d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80014da:	fab2 f282 	clz	r2, r2
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	f002 021f 	and.w	r2, r2, #31
 80014ea:	2101      	movs	r1, #1
 80014ec:	fa01 f202 	lsl.w	r2, r1, r2
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0ab      	beq.n	800144e <HAL_RCC_OscConfig+0x19a>
 80014f6:	e05c      	b.n	80015b2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa98 	bl	8000a2c <HAL_GetTick>
 80014fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001502:	f7ff fa93 	bl	8000a2c <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bdcf 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800152c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_RCC_OscConfig+0x296>
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x2c2>
 800154a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800154e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001552:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800155e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001562:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001566:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_RCC_OscConfig+0x2f8>)
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800157a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800157e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001582:	fa92 f2a2 	rbit	r2, r2
 8001586:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800158a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800158e:	fab2 f282 	clz	r2, r2
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	f042 0220 	orr.w	r2, r2, #32
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ab      	bne.n	8001502 <HAL_RCC_OscConfig+0x24e>
 80015aa:	e002      	b.n	80015b2 <HAL_RCC_OscConfig+0x2fe>
 80015ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 816f 	beq.w	80018a0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015c2:	4bd0      	ldr	r3, [pc, #832]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015ce:	4bcd      	ldr	r3, [pc, #820]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d16c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x400>
 80015da:	4bca      	ldr	r3, [pc, #808]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d166      	bne.n	80016b4 <HAL_RCC_OscConfig+0x400>
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80015f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d102      	bne.n	8001616 <HAL_RCC_OscConfig+0x362>
 8001610:	4bbc      	ldr	r3, [pc, #752]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	e013      	b.n	800163e <HAL_RCC_OscConfig+0x38a>
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001628:	2302      	movs	r3, #2
 800162a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800162e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800163a:	4bb2      	ldr	r3, [pc, #712]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2202      	movs	r2, #2
 8001640:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001644:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001648:	fa92 f2a2 	rbit	r2, r2
 800164c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001650:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001654:	fab2 f282 	clz	r2, r2
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	f042 0220 	orr.w	r2, r2, #32
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	f002 021f 	and.w	r2, r2, #31
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d007      	beq.n	8001680 <HAL_RCC_OscConfig+0x3cc>
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d002      	beq.n	8001680 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f000 bd1b 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	21f8      	movs	r1, #248	; 0xf8
 8001690:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001698:	fa91 f1a1 	rbit	r1, r1
 800169c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016a0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016a4:	fab1 f181 	clz	r1, r1
 80016a8:	b2c9      	uxtb	r1, r1
 80016aa:	408b      	lsls	r3, r1
 80016ac:	4995      	ldr	r1, [pc, #596]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e0f5      	b.n	80018a0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8085 	beq.w	80017ca <HAL_RCC_OscConfig+0x516>
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80016ca:	fa93 f3a3 	rbit	r3, r3
 80016ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80016d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	2301      	movs	r3, #1
 80016ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff f99e 	bl	8000a2c <HAL_GetTick>
 80016f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff f999 	bl	8000a2c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d902      	bls.n	800170c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	f000 bcd5 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800171e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	095b      	lsrs	r3, r3, #5
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0x488>
 8001736:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x4b0>
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001754:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	2202      	movs	r2, #2
 8001766:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800176a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800176e:	fa92 f2a2 	rbit	r2, r2
 8001772:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001776:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800177a:	fab2 f282 	clz	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f042 0220 	orr.w	r2, r2, #32
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	f002 021f 	and.w	r2, r2, #31
 800178a:	2101      	movs	r1, #1
 800178c:	fa01 f202 	lsl.w	r2, r1, r2
 8001790:	4013      	ands	r3, r2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0af      	beq.n	80016f6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b5b      	ldr	r3, [pc, #364]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	21f8      	movs	r1, #248	; 0xf8
 80017a6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017ae:	fa91 f1a1 	rbit	r1, r1
 80017b2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80017b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80017ba:	fab1 f181 	clz	r1, r1
 80017be:	b2c9      	uxtb	r1, r1
 80017c0:	408b      	lsls	r3, r1
 80017c2:	4950      	ldr	r1, [pc, #320]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e06a      	b.n	80018a0 <HAL_RCC_OscConfig+0x5ec>
 80017ca:	2301      	movs	r3, #1
 80017cc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80017dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	461a      	mov	r2, r3
 80017f2:	2300      	movs	r3, #0
 80017f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff f919 	bl	8000a2c <HAL_GetTick>
 80017fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001800:	f7ff f914 	bl	8000a2c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d902      	bls.n	8001816 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	f000 bc50 	b.w	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001820:	fa93 f3a3 	rbit	r3, r3
 8001824:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d102      	bne.n	8001846 <HAL_RCC_OscConfig+0x592>
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	e013      	b.n	800186e <HAL_RCC_OscConfig+0x5ba>
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800185e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_RCC_OscConfig+0x650>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	2202      	movs	r2, #2
 8001870:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001874:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001878:	fa92 f2a2 	rbit	r2, r2
 800187c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001880:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001884:	fab2 f282 	clz	r2, r2
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	f042 0220 	orr.w	r2, r2, #32
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	f002 021f 	and.w	r2, r2, #31
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f202 	lsl.w	r2, r1, r2
 800189a:	4013      	ands	r3, r2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1af      	bne.n	8001800 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80da 	beq.w	8001a64 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d069      	beq.n	800198e <HAL_RCC_OscConfig+0x6da>
 80018ba:	2301      	movs	r3, #1
 80018bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80018cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_OscConfig+0x654>)
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	461a      	mov	r2, r3
 80018e0:	2301      	movs	r3, #1
 80018e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f8a2 	bl	8000a2c <HAL_GetTick>
 80018e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ec:	e00e      	b.n	800190c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff f89d 	bl	8000a2c <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d906      	bls.n	800190c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e3d9      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	10908120 	.word	0x10908120
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800191e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001922:	2202      	movs	r2, #2
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800194c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	4ba5      	ldr	r3, [pc, #660]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001952:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001956:	2102      	movs	r1, #2
 8001958:	6019      	str	r1, [r3, #0]
 800195a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f1a3 	rbit	r1, r3
 8001964:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001968:	6019      	str	r1, [r3, #0]
  return result;
 800196a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0b0      	beq.n	80018ee <HAL_RCC_OscConfig+0x63a>
 800198c:	e06a      	b.n	8001a64 <HAL_RCC_OscConfig+0x7b0>
 800198e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b8c      	ldr	r3, [pc, #560]	; (8001be8 <HAL_RCC_OscConfig+0x934>)
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	461a      	mov	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff f834 	bl	8000a2c <HAL_GetTick>
 80019c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	e009      	b.n	80019de <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ca:	f7ff f82f 	bl	8000a2c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e36b      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 80019de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019fa:	2202      	movs	r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a12:	2202      	movs	r2, #2
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	fa93 f2a3 	rbit	r2, r3
 8001a20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a26:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f1a3 	rbit	r1, r3
 8001a3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a40:	6019      	str	r1, [r3, #0]
  return result;
 8001a42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1b2      	bne.n	80019ca <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8158 	beq.w	8001d24 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d112      	bne.n	8001aac <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f107 0308 	add.w	r3, r7, #8
 8001aa4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_RCC_OscConfig+0x938>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d11a      	bne.n	8001aee <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_OscConfig+0x938>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_RCC_OscConfig+0x938>)
 8001abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac4:	f7fe ffb2 	bl	8000a2c <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7fe ffad 	bl	8000a2c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2e9      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <HAL_RCC_OscConfig+0x938>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ef      	beq.n	8001ace <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x852>
 8001af8:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a39      	ldr	r2, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02f      	b.n	8001b66 <HAL_RCC_OscConfig+0x8b2>
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x876>
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a30      	ldr	r2, [pc, #192]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e01d      	b.n	8001b66 <HAL_RCC_OscConfig+0x8b2>
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x89a>
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a27      	ldr	r2, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x8b2>
 8001b4e:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a24      	ldr	r2, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d06b      	beq.n	8001c48 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff5c 	bl	8000a2c <HAL_GetTick>
 8001b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7fe ff57 	bl	8000a2c <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e291      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001b92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b96:	2202      	movs	r2, #2
 8001b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bae:	2202      	movs	r2, #2
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fa93 f2a3 	rbit	r2, r3
 8001bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bc0:	601a      	str	r2, [r3, #0]
  return result;
 8001bc2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d109      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x93c>
 8001bdc:	4b01      	ldr	r3, [pc, #4]	; (8001be4 <HAL_RCC_OscConfig+0x930>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x958>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	10908120 	.word	0x10908120
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4bbb      	ldr	r3, [pc, #748]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c10:	2102      	movs	r1, #2
 8001c12:	6011      	str	r1, [r2, #0]
 8001c14:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	fa92 f1a2 	rbit	r1, r2
 8001c1e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c22:	6011      	str	r1, [r2, #0]
  return result;
 8001c24:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fab2 f282 	clz	r2, r2
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	f002 021f 	and.w	r2, r2, #31
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d099      	beq.n	8001b7a <HAL_RCC_OscConfig+0x8c6>
 8001c46:	e063      	b.n	8001d10 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7fe fef0 	bl	8000a2c <HAL_GetTick>
 8001c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	e00b      	b.n	8001c6a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7fe feeb 	bl	8000a2c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e225      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001c6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c86:	2202      	movs	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c98:	601a      	str	r2, [r3, #0]
  return result;
 8001c9a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0302 	orr.w	r3, r3, #2
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d102      	bne.n	8001cba <HAL_RCC_OscConfig+0xa06>
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	e00d      	b.n	8001cd6 <HAL_RCC_OscConfig+0xa22>
 8001cba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001cda:	2102      	movs	r1, #2
 8001cdc:	6011      	str	r1, [r2, #0]
 8001cde:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fa92 f1a2 	rbit	r1, r2
 8001ce8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cec:	6011      	str	r1, [r2, #0]
  return result;
 8001cee:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 021f 	and.w	r2, r2, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1a0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d10:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	4a76      	ldr	r2, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 81c2 	beq.w	80020b4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d30:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	f000 819c 	beq.w	8002076 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	f040 8114 	bne.w	8001f72 <HAL_RCC_OscConfig+0xcbe>
 8001d4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d62:	601a      	str	r2, [r3, #0]
  return result;
 8001d64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fe54 	bl	8000a2c <HAL_GetTick>
 8001d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe fe4f 	bl	8000a2c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e18b      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001d9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001db6:	601a      	str	r2, [r3, #0]
  return result;
 8001db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xb24>
 8001dd2:	4b49      	ldr	r3, [pc, #292]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0xb5c>
 8001dd8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b3a      	ldr	r3, [pc, #232]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fa92 f1a2 	rbit	r1, r2
 8001e24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e28:	6011      	str	r1, [r2, #0]
  return result;
 8001e2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d19e      	bne.n	8001d8a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4925      	ldr	r1, [pc, #148]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f2a3 	rbit	r2, r3
 8001e7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e80:	601a      	str	r2, [r3, #0]
  return result;
 8001e82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e86:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7fe fdc5 	bl	8000a2c <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe fdc0 	bl	8000a2c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0fc      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001ebc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	fa93 f2a3 	rbit	r2, r3
 8001ed0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed4:	601a      	str	r2, [r3, #0]
  return result;
 8001ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eda:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0xc48>
 8001ef0:	4b01      	ldr	r3, [pc, #4]	; (8001ef8 <HAL_RCC_OscConfig+0xc44>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e01e      	b.n	8001f34 <HAL_RCC_OscConfig+0xc80>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4b63      	ldr	r3, [pc, #396]	; (80020c0 <HAL_RCC_OscConfig+0xe0c>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f3c:	6011      	str	r1, [r2, #0]
 8001f3e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	fa92 f1a2 	rbit	r1, r2
 8001f48:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f4c:	6011      	str	r1, [r2, #0]
  return result;
 8001f4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	fab2 f282 	clz	r2, r2
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	f042 0220 	orr.w	r2, r2, #32
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f002 021f 	and.w	r2, r2, #31
 8001f64:	2101      	movs	r1, #1
 8001f66:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d09b      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xbf4>
 8001f70:	e0a0      	b.n	80020b4 <HAL_RCC_OscConfig+0xe00>
 8001f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	fa93 f2a3 	rbit	r2, r3
 8001f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8a:	601a      	str	r2, [r3, #0]
  return result;
 8001f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f90:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	fab3 f383 	clz	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fd40 	bl	8000a2c <HAL_GetTick>
 8001fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7fe fd3b 	bl	8000a2c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e077      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
 8001fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	fa93 f2a3 	rbit	r2, r3
 8001fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fde:	601a      	str	r2, [r3, #0]
  return result;
 8001fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0xd4c>
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_OscConfig+0xe0c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e01b      	b.n	8002038 <HAL_RCC_OscConfig+0xd84>
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 0318 	add.w	r3, r7, #24
 800201e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	4b22      	ldr	r3, [pc, #136]	; (80020c0 <HAL_RCC_OscConfig+0xe0c>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	f107 0210 	add.w	r2, r7, #16
 800203c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002040:	6011      	str	r1, [r2, #0]
 8002042:	f107 0210 	add.w	r2, r7, #16
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fa92 f1a2 	rbit	r1, r2
 800204c:	f107 020c 	add.w	r2, r7, #12
 8002050:	6011      	str	r1, [r2, #0]
  return result;
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	f002 021f 	and.w	r2, r2, #31
 8002068:	2101      	movs	r1, #1
 800206a:	fa01 f202 	lsl.w	r2, r1, r2
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d19e      	bne.n	8001fb2 <HAL_RCC_OscConfig+0xcfe>
 8002074:	e01e      	b.n	80020b4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e018      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_RCC_OscConfig+0xe0c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800208c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	429a      	cmp	r2, r3
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800209e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09e      	sub	sp, #120	; 0x78
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e162      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b90      	ldr	r3, [pc, #576]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	498b      	ldr	r1, [pc, #556]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b89      	ldr	r3, [pc, #548]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e14a      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002118:	4b82      	ldr	r3, [pc, #520]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	497f      	ldr	r1, [pc, #508]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80dc 	beq.w	80022f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d13c      	bne.n	80021ba <HAL_RCC_ClockConfig+0xf6>
 8002140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002144:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d102      	bne.n	800216a <HAL_RCC_ClockConfig+0xa6>
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	e00f      	b.n	800218a <HAL_RCC_ClockConfig+0xc6>
 800216a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800216e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	667b      	str	r3, [r7, #100]	; 0x64
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	663b      	str	r3, [r7, #96]	; 0x60
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002186:	4b67      	ldr	r3, [pc, #412]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800218e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800219a:	fab2 f282 	clz	r2, r2
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	f002 021f 	and.w	r2, r2, #31
 80021aa:	2101      	movs	r1, #1
 80021ac:	fa01 f202 	lsl.w	r2, r1, r2
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d17b      	bne.n	80022ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0f3      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d13c      	bne.n	800223c <HAL_RCC_ClockConfig+0x178>
 80021c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_RCC_ClockConfig+0x128>
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	e00f      	b.n	800220c <HAL_RCC_ClockConfig+0x148>
 80021ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	647b      	str	r3, [r7, #68]	; 0x44
 80021fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002208:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002210:	63ba      	str	r2, [r7, #56]	; 0x38
 8002212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002214:	fa92 f2a2 	rbit	r2, r2
 8002218:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800221a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f042 0220 	orr.w	r2, r2, #32
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d13a      	bne.n	80022ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b2      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
 800223c:	2302      	movs	r3, #2
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_ClockConfig+0x1a0>
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	e00d      	b.n	8002280 <HAL_RCC_ClockConfig+0x1bc>
 8002264:	2302      	movs	r3, #2
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2202      	movs	r2, #2
 8002282:	61ba      	str	r2, [r7, #24]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	617a      	str	r2, [r7, #20]
  return result;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	fab2 f282 	clz	r2, r2
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f042 0220 	orr.w	r2, r2, #32
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	f002 021f 	and.w	r2, r2, #31
 800229e:	2101      	movs	r1, #1
 80022a0:	fa01 f202 	lsl.w	r2, r1, r2
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e079      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f023 0203 	bic.w	r2, r3, #3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	491a      	ldr	r1, [pc, #104]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fbb4 	bl	8000a2c <HAL_GetTick>
 80022c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	e00a      	b.n	80022de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7fe fbb0 	bl	8000a2c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e061      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_ClockConfig+0x260>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 020c 	and.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d1eb      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d214      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_RCC_ClockConfig+0x25c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e040      	b.n	80023a2 <HAL_RCC_ClockConfig+0x2de>
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	491a      	ldr	r1, [pc, #104]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4912      	ldr	r1, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002366:	f000 f829 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800236a:	4601      	mov	r1, r0
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_ClockConfig+0x2e8>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002374:	22f0      	movs	r2, #240	; 0xf0
 8002376:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	60fa      	str	r2, [r7, #12]
  return result;
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	40d3      	lsrs	r3, r2
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x2ec>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	fa21 f303 	lsr.w	r3, r1, r3
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_RCC_ClockConfig+0x2f0>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCC_ClockConfig+0x2f4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fb02 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3778      	adds	r7, #120	; 0x78
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08003d60 	.word	0x08003d60
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b08b      	sub	sp, #44	; 0x2c
 80023c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x30>
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x36>
 80023ea:	e03c      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc4>)
 80023ee:	623b      	str	r3, [r7, #32]
      break;
 80023f0:	e03c      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80023f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80023fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fa92 f2a2 	rbit	r2, r2
 8002404:	607a      	str	r2, [r7, #4]
  return result;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	fab2 f282 	clz	r2, r2
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	40d3      	lsrs	r3, r2
 8002410:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	220f      	movs	r2, #15
 8002420:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	fa92 f2a2 	rbit	r2, r2
 8002428:	60fa      	str	r2, [r7, #12]
  return result;
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	40d3      	lsrs	r3, r2
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	fbb2 f2f3 	udiv	r2, r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e004      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_RCC_GetSysClockFreq+0xd0>)
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	623b      	str	r3, [r7, #32]
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002468:	623b      	str	r3, [r7, #32]
      break;
 800246a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800246c:	6a3b      	ldr	r3, [r7, #32]
}
 800246e:	4618      	mov	r0, r3
 8002470:	372c      	adds	r7, #44	; 0x2c
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	007a1200 	.word	0x007a1200
 8002484:	08003d78 	.word	0x08003d78
 8002488:	08003d88 	.word	0x08003d88
 800248c:	003d0900 	.word	0x003d0900

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024ae:	f7ff ffef 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b2:	4601      	mov	r1, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	603a      	str	r2, [r7, #0]
  return result;
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	40d3      	lsrs	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80024d6:	5cd3      	ldrb	r3, [r2, r3]
 80024d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08003d70 	.word	0x08003d70

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80024f2:	f7ff ffcd 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024f6:	4601      	mov	r1, r0
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002500:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002504:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	fa92 f2a2 	rbit	r2, r2
 800250c:	603a      	str	r2, [r7, #0]
  return result;
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	fab2 f282 	clz	r2, r2
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	40d3      	lsrs	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x40>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08003d70 	.word	0x08003d70

08002530 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b092      	sub	sp, #72	; 0x48
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80d7 	beq.w	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002554:	4b4e      	ldr	r3, [pc, #312]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10e      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002560:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b42      	ldr	r3, [pc, #264]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a41      	ldr	r2, [pc, #260]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7fe fa49 	bl	8000a2c <HAL_GetTick>
 800259a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fa45 	bl	8000a2c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e169      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025bc:	4b34      	ldr	r3, [pc, #208]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8084 	beq.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d07c      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	461a      	mov	r2, r3
 8002606:	2301      	movs	r3, #1
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	461a      	mov	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002632:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04b      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe f9f5 	bl	8000a2c <HAL_GetTick>
 8002642:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	e00a      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe f9f1 	bl	8000a2c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e113      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800265c:	2302      	movs	r3, #2
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	61fb      	str	r3, [r7, #28]
  return result;
 8002674:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d108      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800268a:	4b01      	ldr	r3, [pc, #4]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	e00d      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	10908100 	.word	0x10908100
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2202      	movs	r2, #2
 80026ae:	613a      	str	r2, [r7, #16]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	fa92 f2a2 	rbit	r2, r2
 80026b6:	60fa      	str	r2, [r7, #12]
  return result;
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	fab2 f282 	clz	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	f002 021f 	and.w	r2, r2, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f202 	lsl.w	r2, r1, r2
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0b7      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026d6:	4b6d      	ldr	r3, [pc, #436]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	496a      	ldr	r1, [pc, #424]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	4a65      	ldr	r2, [pc, #404]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002708:	4b60      	ldr	r3, [pc, #384]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270c:	f023 0203 	bic.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	495d      	ldr	r1, [pc, #372]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002726:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4956      	ldr	r1, [pc, #344]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002744:	4b51      	ldr	r3, [pc, #324]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	494e      	ldr	r1, [pc, #312]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f023 0210 	bic.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4947      	ldr	r1, [pc, #284]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	493f      	ldr	r1, [pc, #252]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f023 0220 	bic.w	r2, r3, #32
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4938      	ldr	r1, [pc, #224]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	4930      	ldr	r1, [pc, #192]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4929      	ldr	r1, [pc, #164]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	4921      	ldr	r1, [pc, #132]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	491a      	ldr	r1, [pc, #104]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	4912      	ldr	r1, [pc, #72]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002842:	4313      	orrs	r3, r2
 8002844:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002860:	4313      	orrs	r3, r2
 8002862:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3748      	adds	r7, #72	; 0x48
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e040      	b.n	8002924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fd ff78 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f97a 	bl	8002bc8 <UART_SetConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fb88 	bl	8002ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800290a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fc0f 	bl	8003140 <UART_CheckIdleState>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4613      	mov	r3, r2
 800293a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	2b20      	cmp	r3, #32
 8002942:	f040 8081 	bne.w	8002a48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_UART_Transmit+0x26>
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e079      	b.n	8002a4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_UART_Transmit+0x38>
 8002960:	2302      	movs	r3, #2
 8002962:	e072      	b.n	8002a4a <HAL_UART_Transmit+0x11e>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	; 0x21
 8002976:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002978:	f7fe f858 	bl	8000a2c <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	d108      	bne.n	80029aa <HAL_UART_Transmit+0x7e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e003      	b.n	80029b2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b2:	e02d      	b.n	8002a10 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fc03 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e03d      	b.n	8002a4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10b      	bne.n	80029ec <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	b292      	uxth	r2, r2
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	3302      	adds	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e008      	b.n	80029fe <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b292      	uxth	r2, r2
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1cb      	bne.n	80029b4 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2200      	movs	r2, #0
 8002a24:	2140      	movs	r1, #64	; 0x40
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fbcf 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e009      	b.n	8002a4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b08a      	sub	sp, #40	; 0x28
 8002a56:	af02      	add	r7, sp, #8
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	f040 80a8 	bne.w	8002bbc <HAL_UART_Receive+0x16a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Receive+0x26>
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a0      	b.n	8002bbe <HAL_UART_Receive+0x16c>
    }

    __HAL_LOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Receive+0x38>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e099      	b.n	8002bbe <HAL_UART_Receive+0x16c>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2222      	movs	r2, #34	; 0x22
 8002a9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a9e:	f7fd ffc5 	bl	8000a2c <HAL_GetTick>
 8002aa2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	88fa      	ldrh	r2, [r7, #6]
 8002ab0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002abc:	d10e      	bne.n	8002adc <HAL_UART_Receive+0x8a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_UART_Receive+0x80>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ad0:	e01a      	b.n	8002b08 <HAL_UART_Receive+0xb6>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	22ff      	movs	r2, #255	; 0xff
 8002ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ada:	e015      	b.n	8002b08 <HAL_UART_Receive+0xb6>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10d      	bne.n	8002b00 <HAL_UART_Receive+0xae>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d104      	bne.n	8002af6 <HAL_UART_Receive+0xa4>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af4:	e008      	b.n	8002b08 <HAL_UART_Receive+0xb6>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	227f      	movs	r2, #127	; 0x7f
 8002afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002afe:	e003      	b.n	8002b08 <HAL_UART_Receive+0xb6>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b0e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b18:	d108      	bne.n	8002b2c <HAL_UART_Receive+0xda>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <HAL_UART_Receive+0xda>
    {
      pdata8bits  = NULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e003      	b.n	8002b34 <HAL_UART_Receive+0xe2>
    }
    else
    {
      pdata8bits  = pData;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002b34:	e033      	b.n	8002b9e <HAL_UART_Receive+0x14c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2120      	movs	r1, #32
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fb42 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_Receive+0xfe>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e036      	b.n	8002bbe <HAL_UART_Receive+0x16c>
      }
      if (pdata8bits == NULL)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_UART_Receive+0x11e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	8a7b      	ldrh	r3, [r7, #18]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	e00d      	b.n	8002b8c <HAL_UART_Receive+0x13a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	8a7b      	ldrh	r3, [r7, #18]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1c5      	bne.n	8002b36 <HAL_UART_Receive+0xe4>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Receive+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bfa:	f023 030c 	bic.w	r3, r3, #12
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4aa9      	ldr	r2, [pc, #676]	; (8002eec <UART_SetConfig+0x324>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d121      	bne.n	8002c90 <UART_SetConfig+0xc8>
 8002c4c:	4ba8      	ldr	r3, [pc, #672]	; (8002ef0 <UART_SetConfig+0x328>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d817      	bhi.n	8002c88 <UART_SetConfig+0xc0>
 8002c58:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <UART_SetConfig+0x98>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c7d 	.word	0x08002c7d
 8002c68:	08002c83 	.word	0x08002c83
 8002c6c:	08002c77 	.word	0x08002c77
 8002c70:	2301      	movs	r3, #1
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e0b2      	b.n	8002ddc <UART_SetConfig+0x214>
 8002c76:	2302      	movs	r3, #2
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e0af      	b.n	8002ddc <UART_SetConfig+0x214>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e0ac      	b.n	8002ddc <UART_SetConfig+0x214>
 8002c82:	2308      	movs	r3, #8
 8002c84:	77fb      	strb	r3, [r7, #31]
 8002c86:	e0a9      	b.n	8002ddc <UART_SetConfig+0x214>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	bf00      	nop
 8002c8e:	e0a5      	b.n	8002ddc <UART_SetConfig+0x214>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a97      	ldr	r2, [pc, #604]	; (8002ef4 <UART_SetConfig+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d123      	bne.n	8002ce2 <UART_SetConfig+0x11a>
 8002c9a:	4b95      	ldr	r3, [pc, #596]	; (8002ef0 <UART_SetConfig+0x328>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d012      	beq.n	8002cce <UART_SetConfig+0x106>
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d802      	bhi.n	8002cb4 <UART_SetConfig+0xec>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <UART_SetConfig+0xfa>
 8002cb2:	e012      	b.n	8002cda <UART_SetConfig+0x112>
 8002cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb8:	d00c      	beq.n	8002cd4 <UART_SetConfig+0x10c>
 8002cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0x100>
 8002cc0:	e00b      	b.n	8002cda <UART_SetConfig+0x112>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e089      	b.n	8002ddc <UART_SetConfig+0x214>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e086      	b.n	8002ddc <UART_SetConfig+0x214>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e083      	b.n	8002ddc <UART_SetConfig+0x214>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e080      	b.n	8002ddc <UART_SetConfig+0x214>
 8002cda:	2310      	movs	r3, #16
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	bf00      	nop
 8002ce0:	e07c      	b.n	8002ddc <UART_SetConfig+0x214>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a84      	ldr	r2, [pc, #528]	; (8002ef8 <UART_SetConfig+0x330>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d123      	bne.n	8002d34 <UART_SetConfig+0x16c>
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <UART_SetConfig+0x328>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cf8:	d012      	beq.n	8002d20 <UART_SetConfig+0x158>
 8002cfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cfe:	d802      	bhi.n	8002d06 <UART_SetConfig+0x13e>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <UART_SetConfig+0x14c>
 8002d04:	e012      	b.n	8002d2c <UART_SetConfig+0x164>
 8002d06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d0a:	d00c      	beq.n	8002d26 <UART_SetConfig+0x15e>
 8002d0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d10:	d003      	beq.n	8002d1a <UART_SetConfig+0x152>
 8002d12:	e00b      	b.n	8002d2c <UART_SetConfig+0x164>
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e060      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e05d      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d20:	2304      	movs	r3, #4
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e05a      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d26:	2308      	movs	r3, #8
 8002d28:	77fb      	strb	r3, [r7, #31]
 8002d2a:	e057      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	bf00      	nop
 8002d32:	e053      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a70      	ldr	r2, [pc, #448]	; (8002efc <UART_SetConfig+0x334>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d123      	bne.n	8002d86 <UART_SetConfig+0x1be>
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <UART_SetConfig+0x328>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4a:	d012      	beq.n	8002d72 <UART_SetConfig+0x1aa>
 8002d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d50:	d802      	bhi.n	8002d58 <UART_SetConfig+0x190>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <UART_SetConfig+0x19e>
 8002d56:	e012      	b.n	8002d7e <UART_SetConfig+0x1b6>
 8002d58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5c:	d00c      	beq.n	8002d78 <UART_SetConfig+0x1b0>
 8002d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d62:	d003      	beq.n	8002d6c <UART_SetConfig+0x1a4>
 8002d64:	e00b      	b.n	8002d7e <UART_SetConfig+0x1b6>
 8002d66:	2300      	movs	r3, #0
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e037      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e034      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d72:	2304      	movs	r3, #4
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e031      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d78:	2308      	movs	r3, #8
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e02e      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d7e:	2310      	movs	r3, #16
 8002d80:	77fb      	strb	r3, [r7, #31]
 8002d82:	bf00      	nop
 8002d84:	e02a      	b.n	8002ddc <UART_SetConfig+0x214>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5d      	ldr	r2, [pc, #372]	; (8002f00 <UART_SetConfig+0x338>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d123      	bne.n	8002dd8 <UART_SetConfig+0x210>
 8002d90:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <UART_SetConfig+0x328>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9c:	d012      	beq.n	8002dc4 <UART_SetConfig+0x1fc>
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da2:	d802      	bhi.n	8002daa <UART_SetConfig+0x1e2>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <UART_SetConfig+0x1f0>
 8002da8:	e012      	b.n	8002dd0 <UART_SetConfig+0x208>
 8002daa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dae:	d00c      	beq.n	8002dca <UART_SetConfig+0x202>
 8002db0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db4:	d003      	beq.n	8002dbe <UART_SetConfig+0x1f6>
 8002db6:	e00b      	b.n	8002dd0 <UART_SetConfig+0x208>
 8002db8:	2300      	movs	r3, #0
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e00e      	b.n	8002ddc <UART_SetConfig+0x214>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e00b      	b.n	8002ddc <UART_SetConfig+0x214>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e008      	b.n	8002ddc <UART_SetConfig+0x214>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	77fb      	strb	r3, [r7, #31]
 8002dce:	e005      	b.n	8002ddc <UART_SetConfig+0x214>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	77fb      	strb	r3, [r7, #31]
 8002dd4:	bf00      	nop
 8002dd6:	e001      	b.n	8002ddc <UART_SetConfig+0x214>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de4:	f040 808e 	bne.w	8002f04 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d85e      	bhi.n	8002eac <UART_SetConfig+0x2e4>
 8002dee:	a201      	add	r2, pc, #4	; (adr r2, 8002df4 <UART_SetConfig+0x22c>)
 8002df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e59 	.word	0x08002e59
 8002e00:	08002ead 	.word	0x08002ead
 8002e04:	08002e75 	.word	0x08002e75
 8002e08:	08002ead 	.word	0x08002ead
 8002e0c:	08002ead 	.word	0x08002ead
 8002e10:	08002ead 	.word	0x08002ead
 8002e14:	08002e95 	.word	0x08002e95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff fb46 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	005a      	lsls	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	61bb      	str	r3, [r7, #24]
        break;
 8002e36:	e03c      	b.n	8002eb2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7ff fb58 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8002e3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	005a      	lsls	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	61bb      	str	r3, [r7, #24]
        break;
 8002e56:	e02c      	b.n	8002eb2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002e62:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6852      	ldr	r2, [r2, #4]
 8002e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	61bb      	str	r3, [r7, #24]
        break;
 8002e72:	e01e      	b.n	8002eb2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e74:	f7ff faa2 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002e78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	005a      	lsls	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	61bb      	str	r3, [r7, #24]
        break;
 8002e92:	e00e      	b.n	8002eb2 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	61bb      	str	r3, [r7, #24]
        break;
 8002eaa:	e002      	b.n	8002eb2 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	75fb      	strb	r3, [r7, #23]
        break;
 8002eb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	d916      	bls.n	8002ee6 <UART_SetConfig+0x31e>
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d212      	bcs.n	8002ee6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f023 030f 	bic.w	r3, r3, #15
 8002ec8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	897a      	ldrh	r2, [r7, #10]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	e07e      	b.n	8002fe4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
 8002eea:	e07b      	b.n	8002fe4 <UART_SetConfig+0x41c>
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40004400 	.word	0x40004400
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40004c00 	.word	0x40004c00
 8002f00:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d85b      	bhi.n	8002fc2 <UART_SetConfig+0x3fa>
 8002f0a:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <UART_SetConfig+0x348>)
 8002f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f53 	.word	0x08002f53
 8002f18:	08002f71 	.word	0x08002f71
 8002f1c:	08002fc3 	.word	0x08002fc3
 8002f20:	08002f8d 	.word	0x08002f8d
 8002f24:	08002fc3 	.word	0x08002fc3
 8002f28:	08002fc3 	.word	0x08002fc3
 8002f2c:	08002fc3 	.word	0x08002fc3
 8002f30:	08002fab 	.word	0x08002fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f34:	f7ff fab8 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8002f38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	085a      	lsrs	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	61bb      	str	r3, [r7, #24]
        break;
 8002f50:	e03a      	b.n	8002fc8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f52:	f7ff facb 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8002f56:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	085a      	lsrs	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	61bb      	str	r3, [r7, #24]
        break;
 8002f6e:	e02b      	b.n	8002fc8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002f7a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6852      	ldr	r2, [r2, #4]
 8002f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	61bb      	str	r3, [r7, #24]
        break;
 8002f8a:	e01d      	b.n	8002fc8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f8c:	f7ff fa16 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002f90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	085a      	lsrs	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	441a      	add	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	61bb      	str	r3, [r7, #24]
        break;
 8002fa8:	e00e      	b.n	8002fc8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e002      	b.n	8002fc8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
        break;
 8002fc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d908      	bls.n	8002fe0 <UART_SetConfig+0x418>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd4:	d204      	bcs.n	8002fe0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	e001      	b.n	8002fe4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop

08002ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01a      	beq.n	8003112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fa:	d10a      	bne.n	8003112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800314e:	f7fd fc6d 	bl	8000a2c <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d10e      	bne.n	8003180 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003162:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f82a 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e020      	b.n	80031c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d10e      	bne.n	80031ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f814 	bl	80031ca <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e00a      	b.n	80031c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	e05d      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e2:	d059      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fd fc22 	bl	8000a2c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <UART_WaitOnFlagUntilTimeout+0x30>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11b      	bne.n	8003232 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003208:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e042      	b.n	80032b8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d02b      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324e:	d123      	bne.n	8003298 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003258:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003268:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2220      	movs	r2, #32
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e00f      	b.n	80032b8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d092      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <__errno>:
 80032c0:	4b01      	ldr	r3, [pc, #4]	; (80032c8 <__errno+0x8>)
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	2000000c 	.word	0x2000000c

080032cc <__libc_init_array>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	4e0d      	ldr	r6, [pc, #52]	; (8003304 <__libc_init_array+0x38>)
 80032d0:	4c0d      	ldr	r4, [pc, #52]	; (8003308 <__libc_init_array+0x3c>)
 80032d2:	1ba4      	subs	r4, r4, r6
 80032d4:	10a4      	asrs	r4, r4, #2
 80032d6:	2500      	movs	r5, #0
 80032d8:	42a5      	cmp	r5, r4
 80032da:	d109      	bne.n	80032f0 <__libc_init_array+0x24>
 80032dc:	4e0b      	ldr	r6, [pc, #44]	; (800330c <__libc_init_array+0x40>)
 80032de:	4c0c      	ldr	r4, [pc, #48]	; (8003310 <__libc_init_array+0x44>)
 80032e0:	f000 fc26 	bl	8003b30 <_init>
 80032e4:	1ba4      	subs	r4, r4, r6
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	2500      	movs	r5, #0
 80032ea:	42a5      	cmp	r5, r4
 80032ec:	d105      	bne.n	80032fa <__libc_init_array+0x2e>
 80032ee:	bd70      	pop	{r4, r5, r6, pc}
 80032f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032f4:	4798      	blx	r3
 80032f6:	3501      	adds	r5, #1
 80032f8:	e7ee      	b.n	80032d8 <__libc_init_array+0xc>
 80032fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032fe:	4798      	blx	r3
 8003300:	3501      	adds	r5, #1
 8003302:	e7f2      	b.n	80032ea <__libc_init_array+0x1e>
 8003304:	08003dcc 	.word	0x08003dcc
 8003308:	08003dcc 	.word	0x08003dcc
 800330c:	08003dcc 	.word	0x08003dcc
 8003310:	08003dd0 	.word	0x08003dd0

08003314 <memset>:
 8003314:	4402      	add	r2, r0
 8003316:	4603      	mov	r3, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	d100      	bne.n	800331e <memset+0xa>
 800331c:	4770      	bx	lr
 800331e:	f803 1b01 	strb.w	r1, [r3], #1
 8003322:	e7f9      	b.n	8003318 <memset+0x4>

08003324 <_vsiprintf_r>:
 8003324:	b500      	push	{lr}
 8003326:	b09b      	sub	sp, #108	; 0x6c
 8003328:	9100      	str	r1, [sp, #0]
 800332a:	9104      	str	r1, [sp, #16]
 800332c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003330:	9105      	str	r1, [sp, #20]
 8003332:	9102      	str	r1, [sp, #8]
 8003334:	4905      	ldr	r1, [pc, #20]	; (800334c <_vsiprintf_r+0x28>)
 8003336:	9103      	str	r1, [sp, #12]
 8003338:	4669      	mov	r1, sp
 800333a:	f000 f86d 	bl	8003418 <_svfiprintf_r>
 800333e:	9b00      	ldr	r3, [sp, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	b01b      	add	sp, #108	; 0x6c
 8003346:	f85d fb04 	ldr.w	pc, [sp], #4
 800334a:	bf00      	nop
 800334c:	ffff0208 	.word	0xffff0208

08003350 <vsiprintf>:
 8003350:	4613      	mov	r3, r2
 8003352:	460a      	mov	r2, r1
 8003354:	4601      	mov	r1, r0
 8003356:	4802      	ldr	r0, [pc, #8]	; (8003360 <vsiprintf+0x10>)
 8003358:	6800      	ldr	r0, [r0, #0]
 800335a:	f7ff bfe3 	b.w	8003324 <_vsiprintf_r>
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c

08003364 <__ssputs_r>:
 8003364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003368:	688e      	ldr	r6, [r1, #8]
 800336a:	429e      	cmp	r6, r3
 800336c:	4682      	mov	sl, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4690      	mov	r8, r2
 8003372:	4699      	mov	r9, r3
 8003374:	d837      	bhi.n	80033e6 <__ssputs_r+0x82>
 8003376:	898a      	ldrh	r2, [r1, #12]
 8003378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800337c:	d031      	beq.n	80033e2 <__ssputs_r+0x7e>
 800337e:	6825      	ldr	r5, [r4, #0]
 8003380:	6909      	ldr	r1, [r1, #16]
 8003382:	1a6f      	subs	r7, r5, r1
 8003384:	6965      	ldr	r5, [r4, #20]
 8003386:	2302      	movs	r3, #2
 8003388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800338c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003390:	f109 0301 	add.w	r3, r9, #1
 8003394:	443b      	add	r3, r7
 8003396:	429d      	cmp	r5, r3
 8003398:	bf38      	it	cc
 800339a:	461d      	movcc	r5, r3
 800339c:	0553      	lsls	r3, r2, #21
 800339e:	d530      	bpl.n	8003402 <__ssputs_r+0x9e>
 80033a0:	4629      	mov	r1, r5
 80033a2:	f000 fb2b 	bl	80039fc <_malloc_r>
 80033a6:	4606      	mov	r6, r0
 80033a8:	b950      	cbnz	r0, 80033c0 <__ssputs_r+0x5c>
 80033aa:	230c      	movs	r3, #12
 80033ac:	f8ca 3000 	str.w	r3, [sl]
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c0:	463a      	mov	r2, r7
 80033c2:	6921      	ldr	r1, [r4, #16]
 80033c4:	f000 faa8 	bl	8003918 <memcpy>
 80033c8:	89a3      	ldrh	r3, [r4, #12]
 80033ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	6126      	str	r6, [r4, #16]
 80033d6:	6165      	str	r5, [r4, #20]
 80033d8:	443e      	add	r6, r7
 80033da:	1bed      	subs	r5, r5, r7
 80033dc:	6026      	str	r6, [r4, #0]
 80033de:	60a5      	str	r5, [r4, #8]
 80033e0:	464e      	mov	r6, r9
 80033e2:	454e      	cmp	r6, r9
 80033e4:	d900      	bls.n	80033e8 <__ssputs_r+0x84>
 80033e6:	464e      	mov	r6, r9
 80033e8:	4632      	mov	r2, r6
 80033ea:	4641      	mov	r1, r8
 80033ec:	6820      	ldr	r0, [r4, #0]
 80033ee:	f000 fa9e 	bl	800392e <memmove>
 80033f2:	68a3      	ldr	r3, [r4, #8]
 80033f4:	1b9b      	subs	r3, r3, r6
 80033f6:	60a3      	str	r3, [r4, #8]
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	441e      	add	r6, r3
 80033fc:	6026      	str	r6, [r4, #0]
 80033fe:	2000      	movs	r0, #0
 8003400:	e7dc      	b.n	80033bc <__ssputs_r+0x58>
 8003402:	462a      	mov	r2, r5
 8003404:	f000 fb54 	bl	8003ab0 <_realloc_r>
 8003408:	4606      	mov	r6, r0
 800340a:	2800      	cmp	r0, #0
 800340c:	d1e2      	bne.n	80033d4 <__ssputs_r+0x70>
 800340e:	6921      	ldr	r1, [r4, #16]
 8003410:	4650      	mov	r0, sl
 8003412:	f000 faa5 	bl	8003960 <_free_r>
 8003416:	e7c8      	b.n	80033aa <__ssputs_r+0x46>

08003418 <_svfiprintf_r>:
 8003418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800341c:	461d      	mov	r5, r3
 800341e:	898b      	ldrh	r3, [r1, #12]
 8003420:	061f      	lsls	r7, r3, #24
 8003422:	b09d      	sub	sp, #116	; 0x74
 8003424:	4680      	mov	r8, r0
 8003426:	460c      	mov	r4, r1
 8003428:	4616      	mov	r6, r2
 800342a:	d50f      	bpl.n	800344c <_svfiprintf_r+0x34>
 800342c:	690b      	ldr	r3, [r1, #16]
 800342e:	b96b      	cbnz	r3, 800344c <_svfiprintf_r+0x34>
 8003430:	2140      	movs	r1, #64	; 0x40
 8003432:	f000 fae3 	bl	80039fc <_malloc_r>
 8003436:	6020      	str	r0, [r4, #0]
 8003438:	6120      	str	r0, [r4, #16]
 800343a:	b928      	cbnz	r0, 8003448 <_svfiprintf_r+0x30>
 800343c:	230c      	movs	r3, #12
 800343e:	f8c8 3000 	str.w	r3, [r8]
 8003442:	f04f 30ff 	mov.w	r0, #4294967295
 8003446:	e0c8      	b.n	80035da <_svfiprintf_r+0x1c2>
 8003448:	2340      	movs	r3, #64	; 0x40
 800344a:	6163      	str	r3, [r4, #20]
 800344c:	2300      	movs	r3, #0
 800344e:	9309      	str	r3, [sp, #36]	; 0x24
 8003450:	2320      	movs	r3, #32
 8003452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003456:	2330      	movs	r3, #48	; 0x30
 8003458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800345c:	9503      	str	r5, [sp, #12]
 800345e:	f04f 0b01 	mov.w	fp, #1
 8003462:	4637      	mov	r7, r6
 8003464:	463d      	mov	r5, r7
 8003466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800346a:	b10b      	cbz	r3, 8003470 <_svfiprintf_r+0x58>
 800346c:	2b25      	cmp	r3, #37	; 0x25
 800346e:	d13e      	bne.n	80034ee <_svfiprintf_r+0xd6>
 8003470:	ebb7 0a06 	subs.w	sl, r7, r6
 8003474:	d00b      	beq.n	800348e <_svfiprintf_r+0x76>
 8003476:	4653      	mov	r3, sl
 8003478:	4632      	mov	r2, r6
 800347a:	4621      	mov	r1, r4
 800347c:	4640      	mov	r0, r8
 800347e:	f7ff ff71 	bl	8003364 <__ssputs_r>
 8003482:	3001      	adds	r0, #1
 8003484:	f000 80a4 	beq.w	80035d0 <_svfiprintf_r+0x1b8>
 8003488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800348a:	4453      	add	r3, sl
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	783b      	ldrb	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 809d 	beq.w	80035d0 <_svfiprintf_r+0x1b8>
 8003496:	2300      	movs	r3, #0
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	9307      	str	r3, [sp, #28]
 80034a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a8:	931a      	str	r3, [sp, #104]	; 0x68
 80034aa:	462f      	mov	r7, r5
 80034ac:	2205      	movs	r2, #5
 80034ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034b2:	4850      	ldr	r0, [pc, #320]	; (80035f4 <_svfiprintf_r+0x1dc>)
 80034b4:	f7fc fe94 	bl	80001e0 <memchr>
 80034b8:	9b04      	ldr	r3, [sp, #16]
 80034ba:	b9d0      	cbnz	r0, 80034f2 <_svfiprintf_r+0xda>
 80034bc:	06d9      	lsls	r1, r3, #27
 80034be:	bf44      	itt	mi
 80034c0:	2220      	movmi	r2, #32
 80034c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034c6:	071a      	lsls	r2, r3, #28
 80034c8:	bf44      	itt	mi
 80034ca:	222b      	movmi	r2, #43	; 0x2b
 80034cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034d0:	782a      	ldrb	r2, [r5, #0]
 80034d2:	2a2a      	cmp	r2, #42	; 0x2a
 80034d4:	d015      	beq.n	8003502 <_svfiprintf_r+0xea>
 80034d6:	9a07      	ldr	r2, [sp, #28]
 80034d8:	462f      	mov	r7, r5
 80034da:	2000      	movs	r0, #0
 80034dc:	250a      	movs	r5, #10
 80034de:	4639      	mov	r1, r7
 80034e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e4:	3b30      	subs	r3, #48	; 0x30
 80034e6:	2b09      	cmp	r3, #9
 80034e8:	d94d      	bls.n	8003586 <_svfiprintf_r+0x16e>
 80034ea:	b1b8      	cbz	r0, 800351c <_svfiprintf_r+0x104>
 80034ec:	e00f      	b.n	800350e <_svfiprintf_r+0xf6>
 80034ee:	462f      	mov	r7, r5
 80034f0:	e7b8      	b.n	8003464 <_svfiprintf_r+0x4c>
 80034f2:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <_svfiprintf_r+0x1dc>)
 80034f4:	1a80      	subs	r0, r0, r2
 80034f6:	fa0b f000 	lsl.w	r0, fp, r0
 80034fa:	4318      	orrs	r0, r3
 80034fc:	9004      	str	r0, [sp, #16]
 80034fe:	463d      	mov	r5, r7
 8003500:	e7d3      	b.n	80034aa <_svfiprintf_r+0x92>
 8003502:	9a03      	ldr	r2, [sp, #12]
 8003504:	1d11      	adds	r1, r2, #4
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	9103      	str	r1, [sp, #12]
 800350a:	2a00      	cmp	r2, #0
 800350c:	db01      	blt.n	8003512 <_svfiprintf_r+0xfa>
 800350e:	9207      	str	r2, [sp, #28]
 8003510:	e004      	b.n	800351c <_svfiprintf_r+0x104>
 8003512:	4252      	negs	r2, r2
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	9207      	str	r2, [sp, #28]
 800351a:	9304      	str	r3, [sp, #16]
 800351c:	783b      	ldrb	r3, [r7, #0]
 800351e:	2b2e      	cmp	r3, #46	; 0x2e
 8003520:	d10c      	bne.n	800353c <_svfiprintf_r+0x124>
 8003522:	787b      	ldrb	r3, [r7, #1]
 8003524:	2b2a      	cmp	r3, #42	; 0x2a
 8003526:	d133      	bne.n	8003590 <_svfiprintf_r+0x178>
 8003528:	9b03      	ldr	r3, [sp, #12]
 800352a:	1d1a      	adds	r2, r3, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	9203      	str	r2, [sp, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	bfb8      	it	lt
 8003534:	f04f 33ff 	movlt.w	r3, #4294967295
 8003538:	3702      	adds	r7, #2
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	4d2e      	ldr	r5, [pc, #184]	; (80035f8 <_svfiprintf_r+0x1e0>)
 800353e:	7839      	ldrb	r1, [r7, #0]
 8003540:	2203      	movs	r2, #3
 8003542:	4628      	mov	r0, r5
 8003544:	f7fc fe4c 	bl	80001e0 <memchr>
 8003548:	b138      	cbz	r0, 800355a <_svfiprintf_r+0x142>
 800354a:	2340      	movs	r3, #64	; 0x40
 800354c:	1b40      	subs	r0, r0, r5
 800354e:	fa03 f000 	lsl.w	r0, r3, r0
 8003552:	9b04      	ldr	r3, [sp, #16]
 8003554:	4303      	orrs	r3, r0
 8003556:	3701      	adds	r7, #1
 8003558:	9304      	str	r3, [sp, #16]
 800355a:	7839      	ldrb	r1, [r7, #0]
 800355c:	4827      	ldr	r0, [pc, #156]	; (80035fc <_svfiprintf_r+0x1e4>)
 800355e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003562:	2206      	movs	r2, #6
 8003564:	1c7e      	adds	r6, r7, #1
 8003566:	f7fc fe3b 	bl	80001e0 <memchr>
 800356a:	2800      	cmp	r0, #0
 800356c:	d038      	beq.n	80035e0 <_svfiprintf_r+0x1c8>
 800356e:	4b24      	ldr	r3, [pc, #144]	; (8003600 <_svfiprintf_r+0x1e8>)
 8003570:	bb13      	cbnz	r3, 80035b8 <_svfiprintf_r+0x1a0>
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	3307      	adds	r3, #7
 8003576:	f023 0307 	bic.w	r3, r3, #7
 800357a:	3308      	adds	r3, #8
 800357c:	9303      	str	r3, [sp, #12]
 800357e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003580:	444b      	add	r3, r9
 8003582:	9309      	str	r3, [sp, #36]	; 0x24
 8003584:	e76d      	b.n	8003462 <_svfiprintf_r+0x4a>
 8003586:	fb05 3202 	mla	r2, r5, r2, r3
 800358a:	2001      	movs	r0, #1
 800358c:	460f      	mov	r7, r1
 800358e:	e7a6      	b.n	80034de <_svfiprintf_r+0xc6>
 8003590:	2300      	movs	r3, #0
 8003592:	3701      	adds	r7, #1
 8003594:	9305      	str	r3, [sp, #20]
 8003596:	4619      	mov	r1, r3
 8003598:	250a      	movs	r5, #10
 800359a:	4638      	mov	r0, r7
 800359c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035a0:	3a30      	subs	r2, #48	; 0x30
 80035a2:	2a09      	cmp	r2, #9
 80035a4:	d903      	bls.n	80035ae <_svfiprintf_r+0x196>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0c8      	beq.n	800353c <_svfiprintf_r+0x124>
 80035aa:	9105      	str	r1, [sp, #20]
 80035ac:	e7c6      	b.n	800353c <_svfiprintf_r+0x124>
 80035ae:	fb05 2101 	mla	r1, r5, r1, r2
 80035b2:	2301      	movs	r3, #1
 80035b4:	4607      	mov	r7, r0
 80035b6:	e7f0      	b.n	800359a <_svfiprintf_r+0x182>
 80035b8:	ab03      	add	r3, sp, #12
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4622      	mov	r2, r4
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <_svfiprintf_r+0x1ec>)
 80035c0:	a904      	add	r1, sp, #16
 80035c2:	4640      	mov	r0, r8
 80035c4:	f3af 8000 	nop.w
 80035c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035cc:	4681      	mov	r9, r0
 80035ce:	d1d6      	bne.n	800357e <_svfiprintf_r+0x166>
 80035d0:	89a3      	ldrh	r3, [r4, #12]
 80035d2:	065b      	lsls	r3, r3, #25
 80035d4:	f53f af35 	bmi.w	8003442 <_svfiprintf_r+0x2a>
 80035d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035da:	b01d      	add	sp, #116	; 0x74
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	ab03      	add	r3, sp, #12
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4622      	mov	r2, r4
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <_svfiprintf_r+0x1ec>)
 80035e8:	a904      	add	r1, sp, #16
 80035ea:	4640      	mov	r0, r8
 80035ec:	f000 f882 	bl	80036f4 <_printf_i>
 80035f0:	e7ea      	b.n	80035c8 <_svfiprintf_r+0x1b0>
 80035f2:	bf00      	nop
 80035f4:	08003d98 	.word	0x08003d98
 80035f8:	08003d9e 	.word	0x08003d9e
 80035fc:	08003da2 	.word	0x08003da2
 8003600:	00000000 	.word	0x00000000
 8003604:	08003365 	.word	0x08003365

08003608 <_printf_common>:
 8003608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800360c:	4691      	mov	r9, r2
 800360e:	461f      	mov	r7, r3
 8003610:	688a      	ldr	r2, [r1, #8]
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003618:	4293      	cmp	r3, r2
 800361a:	bfb8      	it	lt
 800361c:	4613      	movlt	r3, r2
 800361e:	f8c9 3000 	str.w	r3, [r9]
 8003622:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003626:	4606      	mov	r6, r0
 8003628:	460c      	mov	r4, r1
 800362a:	b112      	cbz	r2, 8003632 <_printf_common+0x2a>
 800362c:	3301      	adds	r3, #1
 800362e:	f8c9 3000 	str.w	r3, [r9]
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	0699      	lsls	r1, r3, #26
 8003636:	bf42      	ittt	mi
 8003638:	f8d9 3000 	ldrmi.w	r3, [r9]
 800363c:	3302      	addmi	r3, #2
 800363e:	f8c9 3000 	strmi.w	r3, [r9]
 8003642:	6825      	ldr	r5, [r4, #0]
 8003644:	f015 0506 	ands.w	r5, r5, #6
 8003648:	d107      	bne.n	800365a <_printf_common+0x52>
 800364a:	f104 0a19 	add.w	sl, r4, #25
 800364e:	68e3      	ldr	r3, [r4, #12]
 8003650:	f8d9 2000 	ldr.w	r2, [r9]
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	42ab      	cmp	r3, r5
 8003658:	dc28      	bgt.n	80036ac <_printf_common+0xa4>
 800365a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	3300      	adds	r3, #0
 8003662:	bf18      	it	ne
 8003664:	2301      	movne	r3, #1
 8003666:	0692      	lsls	r2, r2, #26
 8003668:	d42d      	bmi.n	80036c6 <_printf_common+0xbe>
 800366a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800366e:	4639      	mov	r1, r7
 8003670:	4630      	mov	r0, r6
 8003672:	47c0      	blx	r8
 8003674:	3001      	adds	r0, #1
 8003676:	d020      	beq.n	80036ba <_printf_common+0xb2>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	68e5      	ldr	r5, [r4, #12]
 800367c:	f8d9 2000 	ldr.w	r2, [r9]
 8003680:	f003 0306 	and.w	r3, r3, #6
 8003684:	2b04      	cmp	r3, #4
 8003686:	bf08      	it	eq
 8003688:	1aad      	subeq	r5, r5, r2
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	6922      	ldr	r2, [r4, #16]
 800368e:	bf0c      	ite	eq
 8003690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003694:	2500      	movne	r5, #0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfc4      	itt	gt
 800369a:	1a9b      	subgt	r3, r3, r2
 800369c:	18ed      	addgt	r5, r5, r3
 800369e:	f04f 0900 	mov.w	r9, #0
 80036a2:	341a      	adds	r4, #26
 80036a4:	454d      	cmp	r5, r9
 80036a6:	d11a      	bne.n	80036de <_printf_common+0xd6>
 80036a8:	2000      	movs	r0, #0
 80036aa:	e008      	b.n	80036be <_printf_common+0xb6>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4652      	mov	r2, sl
 80036b0:	4639      	mov	r1, r7
 80036b2:	4630      	mov	r0, r6
 80036b4:	47c0      	blx	r8
 80036b6:	3001      	adds	r0, #1
 80036b8:	d103      	bne.n	80036c2 <_printf_common+0xba>
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c2:	3501      	adds	r5, #1
 80036c4:	e7c3      	b.n	800364e <_printf_common+0x46>
 80036c6:	18e1      	adds	r1, r4, r3
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	2030      	movs	r0, #48	; 0x30
 80036cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036d0:	4422      	add	r2, r4
 80036d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036da:	3302      	adds	r3, #2
 80036dc:	e7c5      	b.n	800366a <_printf_common+0x62>
 80036de:	2301      	movs	r3, #1
 80036e0:	4622      	mov	r2, r4
 80036e2:	4639      	mov	r1, r7
 80036e4:	4630      	mov	r0, r6
 80036e6:	47c0      	blx	r8
 80036e8:	3001      	adds	r0, #1
 80036ea:	d0e6      	beq.n	80036ba <_printf_common+0xb2>
 80036ec:	f109 0901 	add.w	r9, r9, #1
 80036f0:	e7d8      	b.n	80036a4 <_printf_common+0x9c>
	...

080036f4 <_printf_i>:
 80036f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036fc:	460c      	mov	r4, r1
 80036fe:	7e09      	ldrb	r1, [r1, #24]
 8003700:	b085      	sub	sp, #20
 8003702:	296e      	cmp	r1, #110	; 0x6e
 8003704:	4617      	mov	r7, r2
 8003706:	4606      	mov	r6, r0
 8003708:	4698      	mov	r8, r3
 800370a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800370c:	f000 80b3 	beq.w	8003876 <_printf_i+0x182>
 8003710:	d822      	bhi.n	8003758 <_printf_i+0x64>
 8003712:	2963      	cmp	r1, #99	; 0x63
 8003714:	d036      	beq.n	8003784 <_printf_i+0x90>
 8003716:	d80a      	bhi.n	800372e <_printf_i+0x3a>
 8003718:	2900      	cmp	r1, #0
 800371a:	f000 80b9 	beq.w	8003890 <_printf_i+0x19c>
 800371e:	2958      	cmp	r1, #88	; 0x58
 8003720:	f000 8083 	beq.w	800382a <_printf_i+0x136>
 8003724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003728:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800372c:	e032      	b.n	8003794 <_printf_i+0xa0>
 800372e:	2964      	cmp	r1, #100	; 0x64
 8003730:	d001      	beq.n	8003736 <_printf_i+0x42>
 8003732:	2969      	cmp	r1, #105	; 0x69
 8003734:	d1f6      	bne.n	8003724 <_printf_i+0x30>
 8003736:	6820      	ldr	r0, [r4, #0]
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	0605      	lsls	r5, r0, #24
 800373c:	f103 0104 	add.w	r1, r3, #4
 8003740:	d52a      	bpl.n	8003798 <_printf_i+0xa4>
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	da03      	bge.n	8003752 <_printf_i+0x5e>
 800374a:	222d      	movs	r2, #45	; 0x2d
 800374c:	425b      	negs	r3, r3
 800374e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003752:	486f      	ldr	r0, [pc, #444]	; (8003910 <_printf_i+0x21c>)
 8003754:	220a      	movs	r2, #10
 8003756:	e039      	b.n	80037cc <_printf_i+0xd8>
 8003758:	2973      	cmp	r1, #115	; 0x73
 800375a:	f000 809d 	beq.w	8003898 <_printf_i+0x1a4>
 800375e:	d808      	bhi.n	8003772 <_printf_i+0x7e>
 8003760:	296f      	cmp	r1, #111	; 0x6f
 8003762:	d020      	beq.n	80037a6 <_printf_i+0xb2>
 8003764:	2970      	cmp	r1, #112	; 0x70
 8003766:	d1dd      	bne.n	8003724 <_printf_i+0x30>
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	f043 0320 	orr.w	r3, r3, #32
 800376e:	6023      	str	r3, [r4, #0]
 8003770:	e003      	b.n	800377a <_printf_i+0x86>
 8003772:	2975      	cmp	r1, #117	; 0x75
 8003774:	d017      	beq.n	80037a6 <_printf_i+0xb2>
 8003776:	2978      	cmp	r1, #120	; 0x78
 8003778:	d1d4      	bne.n	8003724 <_printf_i+0x30>
 800377a:	2378      	movs	r3, #120	; 0x78
 800377c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003780:	4864      	ldr	r0, [pc, #400]	; (8003914 <_printf_i+0x220>)
 8003782:	e055      	b.n	8003830 <_printf_i+0x13c>
 8003784:	6813      	ldr	r3, [r2, #0]
 8003786:	1d19      	adds	r1, r3, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6011      	str	r1, [r2, #0]
 800378c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003794:	2301      	movs	r3, #1
 8003796:	e08c      	b.n	80038b2 <_printf_i+0x1be>
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6011      	str	r1, [r2, #0]
 800379c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037a0:	bf18      	it	ne
 80037a2:	b21b      	sxthne	r3, r3
 80037a4:	e7cf      	b.n	8003746 <_printf_i+0x52>
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	6825      	ldr	r5, [r4, #0]
 80037aa:	1d18      	adds	r0, r3, #4
 80037ac:	6010      	str	r0, [r2, #0]
 80037ae:	0628      	lsls	r0, r5, #24
 80037b0:	d501      	bpl.n	80037b6 <_printf_i+0xc2>
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e002      	b.n	80037bc <_printf_i+0xc8>
 80037b6:	0668      	lsls	r0, r5, #25
 80037b8:	d5fb      	bpl.n	80037b2 <_printf_i+0xbe>
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	4854      	ldr	r0, [pc, #336]	; (8003910 <_printf_i+0x21c>)
 80037be:	296f      	cmp	r1, #111	; 0x6f
 80037c0:	bf14      	ite	ne
 80037c2:	220a      	movne	r2, #10
 80037c4:	2208      	moveq	r2, #8
 80037c6:	2100      	movs	r1, #0
 80037c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037cc:	6865      	ldr	r5, [r4, #4]
 80037ce:	60a5      	str	r5, [r4, #8]
 80037d0:	2d00      	cmp	r5, #0
 80037d2:	f2c0 8095 	blt.w	8003900 <_printf_i+0x20c>
 80037d6:	6821      	ldr	r1, [r4, #0]
 80037d8:	f021 0104 	bic.w	r1, r1, #4
 80037dc:	6021      	str	r1, [r4, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d13d      	bne.n	800385e <_printf_i+0x16a>
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	f040 808e 	bne.w	8003904 <_printf_i+0x210>
 80037e8:	4665      	mov	r5, ip
 80037ea:	2a08      	cmp	r2, #8
 80037ec:	d10b      	bne.n	8003806 <_printf_i+0x112>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	07db      	lsls	r3, r3, #31
 80037f2:	d508      	bpl.n	8003806 <_printf_i+0x112>
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	6862      	ldr	r2, [r4, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	bfde      	ittt	le
 80037fc:	2330      	movle	r3, #48	; 0x30
 80037fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003802:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003806:	ebac 0305 	sub.w	r3, ip, r5
 800380a:	6123      	str	r3, [r4, #16]
 800380c:	f8cd 8000 	str.w	r8, [sp]
 8003810:	463b      	mov	r3, r7
 8003812:	aa03      	add	r2, sp, #12
 8003814:	4621      	mov	r1, r4
 8003816:	4630      	mov	r0, r6
 8003818:	f7ff fef6 	bl	8003608 <_printf_common>
 800381c:	3001      	adds	r0, #1
 800381e:	d14d      	bne.n	80038bc <_printf_i+0x1c8>
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	b005      	add	sp, #20
 8003826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800382a:	4839      	ldr	r0, [pc, #228]	; (8003910 <_printf_i+0x21c>)
 800382c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	6821      	ldr	r1, [r4, #0]
 8003834:	1d1d      	adds	r5, r3, #4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6015      	str	r5, [r2, #0]
 800383a:	060a      	lsls	r2, r1, #24
 800383c:	d50b      	bpl.n	8003856 <_printf_i+0x162>
 800383e:	07ca      	lsls	r2, r1, #31
 8003840:	bf44      	itt	mi
 8003842:	f041 0120 	orrmi.w	r1, r1, #32
 8003846:	6021      	strmi	r1, [r4, #0]
 8003848:	b91b      	cbnz	r3, 8003852 <_printf_i+0x15e>
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	f022 0220 	bic.w	r2, r2, #32
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	2210      	movs	r2, #16
 8003854:	e7b7      	b.n	80037c6 <_printf_i+0xd2>
 8003856:	064d      	lsls	r5, r1, #25
 8003858:	bf48      	it	mi
 800385a:	b29b      	uxthmi	r3, r3
 800385c:	e7ef      	b.n	800383e <_printf_i+0x14a>
 800385e:	4665      	mov	r5, ip
 8003860:	fbb3 f1f2 	udiv	r1, r3, r2
 8003864:	fb02 3311 	mls	r3, r2, r1, r3
 8003868:	5cc3      	ldrb	r3, [r0, r3]
 800386a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800386e:	460b      	mov	r3, r1
 8003870:	2900      	cmp	r1, #0
 8003872:	d1f5      	bne.n	8003860 <_printf_i+0x16c>
 8003874:	e7b9      	b.n	80037ea <_printf_i+0xf6>
 8003876:	6813      	ldr	r3, [r2, #0]
 8003878:	6825      	ldr	r5, [r4, #0]
 800387a:	6961      	ldr	r1, [r4, #20]
 800387c:	1d18      	adds	r0, r3, #4
 800387e:	6010      	str	r0, [r2, #0]
 8003880:	0628      	lsls	r0, r5, #24
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	d501      	bpl.n	800388a <_printf_i+0x196>
 8003886:	6019      	str	r1, [r3, #0]
 8003888:	e002      	b.n	8003890 <_printf_i+0x19c>
 800388a:	066a      	lsls	r2, r5, #25
 800388c:	d5fb      	bpl.n	8003886 <_printf_i+0x192>
 800388e:	8019      	strh	r1, [r3, #0]
 8003890:	2300      	movs	r3, #0
 8003892:	6123      	str	r3, [r4, #16]
 8003894:	4665      	mov	r5, ip
 8003896:	e7b9      	b.n	800380c <_printf_i+0x118>
 8003898:	6813      	ldr	r3, [r2, #0]
 800389a:	1d19      	adds	r1, r3, #4
 800389c:	6011      	str	r1, [r2, #0]
 800389e:	681d      	ldr	r5, [r3, #0]
 80038a0:	6862      	ldr	r2, [r4, #4]
 80038a2:	2100      	movs	r1, #0
 80038a4:	4628      	mov	r0, r5
 80038a6:	f7fc fc9b 	bl	80001e0 <memchr>
 80038aa:	b108      	cbz	r0, 80038b0 <_printf_i+0x1bc>
 80038ac:	1b40      	subs	r0, r0, r5
 80038ae:	6060      	str	r0, [r4, #4]
 80038b0:	6863      	ldr	r3, [r4, #4]
 80038b2:	6123      	str	r3, [r4, #16]
 80038b4:	2300      	movs	r3, #0
 80038b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038ba:	e7a7      	b.n	800380c <_printf_i+0x118>
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	462a      	mov	r2, r5
 80038c0:	4639      	mov	r1, r7
 80038c2:	4630      	mov	r0, r6
 80038c4:	47c0      	blx	r8
 80038c6:	3001      	adds	r0, #1
 80038c8:	d0aa      	beq.n	8003820 <_printf_i+0x12c>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	079b      	lsls	r3, r3, #30
 80038ce:	d413      	bmi.n	80038f8 <_printf_i+0x204>
 80038d0:	68e0      	ldr	r0, [r4, #12]
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	4298      	cmp	r0, r3
 80038d6:	bfb8      	it	lt
 80038d8:	4618      	movlt	r0, r3
 80038da:	e7a3      	b.n	8003824 <_printf_i+0x130>
 80038dc:	2301      	movs	r3, #1
 80038de:	464a      	mov	r2, r9
 80038e0:	4639      	mov	r1, r7
 80038e2:	4630      	mov	r0, r6
 80038e4:	47c0      	blx	r8
 80038e6:	3001      	adds	r0, #1
 80038e8:	d09a      	beq.n	8003820 <_printf_i+0x12c>
 80038ea:	3501      	adds	r5, #1
 80038ec:	68e3      	ldr	r3, [r4, #12]
 80038ee:	9a03      	ldr	r2, [sp, #12]
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	42ab      	cmp	r3, r5
 80038f4:	dcf2      	bgt.n	80038dc <_printf_i+0x1e8>
 80038f6:	e7eb      	b.n	80038d0 <_printf_i+0x1dc>
 80038f8:	2500      	movs	r5, #0
 80038fa:	f104 0919 	add.w	r9, r4, #25
 80038fe:	e7f5      	b.n	80038ec <_printf_i+0x1f8>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ac      	bne.n	800385e <_printf_i+0x16a>
 8003904:	7803      	ldrb	r3, [r0, #0]
 8003906:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800390a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800390e:	e76c      	b.n	80037ea <_printf_i+0xf6>
 8003910:	08003da9 	.word	0x08003da9
 8003914:	08003dba 	.word	0x08003dba

08003918 <memcpy>:
 8003918:	b510      	push	{r4, lr}
 800391a:	1e43      	subs	r3, r0, #1
 800391c:	440a      	add	r2, r1
 800391e:	4291      	cmp	r1, r2
 8003920:	d100      	bne.n	8003924 <memcpy+0xc>
 8003922:	bd10      	pop	{r4, pc}
 8003924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392c:	e7f7      	b.n	800391e <memcpy+0x6>

0800392e <memmove>:
 800392e:	4288      	cmp	r0, r1
 8003930:	b510      	push	{r4, lr}
 8003932:	eb01 0302 	add.w	r3, r1, r2
 8003936:	d807      	bhi.n	8003948 <memmove+0x1a>
 8003938:	1e42      	subs	r2, r0, #1
 800393a:	4299      	cmp	r1, r3
 800393c:	d00a      	beq.n	8003954 <memmove+0x26>
 800393e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003942:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003946:	e7f8      	b.n	800393a <memmove+0xc>
 8003948:	4283      	cmp	r3, r0
 800394a:	d9f5      	bls.n	8003938 <memmove+0xa>
 800394c:	1881      	adds	r1, r0, r2
 800394e:	1ad2      	subs	r2, r2, r3
 8003950:	42d3      	cmn	r3, r2
 8003952:	d100      	bne.n	8003956 <memmove+0x28>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800395a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800395e:	e7f7      	b.n	8003950 <memmove+0x22>

08003960 <_free_r>:
 8003960:	b538      	push	{r3, r4, r5, lr}
 8003962:	4605      	mov	r5, r0
 8003964:	2900      	cmp	r1, #0
 8003966:	d045      	beq.n	80039f4 <_free_r+0x94>
 8003968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800396c:	1f0c      	subs	r4, r1, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	bfb8      	it	lt
 8003972:	18e4      	addlt	r4, r4, r3
 8003974:	f000 f8d2 	bl	8003b1c <__malloc_lock>
 8003978:	4a1f      	ldr	r2, [pc, #124]	; (80039f8 <_free_r+0x98>)
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	4610      	mov	r0, r2
 800397e:	b933      	cbnz	r3, 800398e <_free_r+0x2e>
 8003980:	6063      	str	r3, [r4, #4]
 8003982:	6014      	str	r4, [r2, #0]
 8003984:	4628      	mov	r0, r5
 8003986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800398a:	f000 b8c8 	b.w	8003b1e <__malloc_unlock>
 800398e:	42a3      	cmp	r3, r4
 8003990:	d90c      	bls.n	80039ac <_free_r+0x4c>
 8003992:	6821      	ldr	r1, [r4, #0]
 8003994:	1862      	adds	r2, r4, r1
 8003996:	4293      	cmp	r3, r2
 8003998:	bf04      	itt	eq
 800399a:	681a      	ldreq	r2, [r3, #0]
 800399c:	685b      	ldreq	r3, [r3, #4]
 800399e:	6063      	str	r3, [r4, #4]
 80039a0:	bf04      	itt	eq
 80039a2:	1852      	addeq	r2, r2, r1
 80039a4:	6022      	streq	r2, [r4, #0]
 80039a6:	6004      	str	r4, [r0, #0]
 80039a8:	e7ec      	b.n	8003984 <_free_r+0x24>
 80039aa:	4613      	mov	r3, r2
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	b10a      	cbz	r2, 80039b4 <_free_r+0x54>
 80039b0:	42a2      	cmp	r2, r4
 80039b2:	d9fa      	bls.n	80039aa <_free_r+0x4a>
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	1858      	adds	r0, r3, r1
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d10b      	bne.n	80039d4 <_free_r+0x74>
 80039bc:	6820      	ldr	r0, [r4, #0]
 80039be:	4401      	add	r1, r0
 80039c0:	1858      	adds	r0, r3, r1
 80039c2:	4282      	cmp	r2, r0
 80039c4:	6019      	str	r1, [r3, #0]
 80039c6:	d1dd      	bne.n	8003984 <_free_r+0x24>
 80039c8:	6810      	ldr	r0, [r2, #0]
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	4401      	add	r1, r0
 80039d0:	6019      	str	r1, [r3, #0]
 80039d2:	e7d7      	b.n	8003984 <_free_r+0x24>
 80039d4:	d902      	bls.n	80039dc <_free_r+0x7c>
 80039d6:	230c      	movs	r3, #12
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	e7d3      	b.n	8003984 <_free_r+0x24>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428a      	cmp	r2, r1
 80039e2:	bf04      	itt	eq
 80039e4:	6811      	ldreq	r1, [r2, #0]
 80039e6:	6852      	ldreq	r2, [r2, #4]
 80039e8:	6062      	str	r2, [r4, #4]
 80039ea:	bf04      	itt	eq
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	605c      	str	r4, [r3, #4]
 80039f2:	e7c7      	b.n	8003984 <_free_r+0x24>
 80039f4:	bd38      	pop	{r3, r4, r5, pc}
 80039f6:	bf00      	nop
 80039f8:	20000090 	.word	0x20000090

080039fc <_malloc_r>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	1ccd      	adds	r5, r1, #3
 8003a00:	f025 0503 	bic.w	r5, r5, #3
 8003a04:	3508      	adds	r5, #8
 8003a06:	2d0c      	cmp	r5, #12
 8003a08:	bf38      	it	cc
 8003a0a:	250c      	movcc	r5, #12
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	4606      	mov	r6, r0
 8003a10:	db01      	blt.n	8003a16 <_malloc_r+0x1a>
 8003a12:	42a9      	cmp	r1, r5
 8003a14:	d903      	bls.n	8003a1e <_malloc_r+0x22>
 8003a16:	230c      	movs	r3, #12
 8003a18:	6033      	str	r3, [r6, #0]
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	bd70      	pop	{r4, r5, r6, pc}
 8003a1e:	f000 f87d 	bl	8003b1c <__malloc_lock>
 8003a22:	4a21      	ldr	r2, [pc, #132]	; (8003aa8 <_malloc_r+0xac>)
 8003a24:	6814      	ldr	r4, [r2, #0]
 8003a26:	4621      	mov	r1, r4
 8003a28:	b991      	cbnz	r1, 8003a50 <_malloc_r+0x54>
 8003a2a:	4c20      	ldr	r4, [pc, #128]	; (8003aac <_malloc_r+0xb0>)
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	b91b      	cbnz	r3, 8003a38 <_malloc_r+0x3c>
 8003a30:	4630      	mov	r0, r6
 8003a32:	f000 f863 	bl	8003afc <_sbrk_r>
 8003a36:	6020      	str	r0, [r4, #0]
 8003a38:	4629      	mov	r1, r5
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f000 f85e 	bl	8003afc <_sbrk_r>
 8003a40:	1c43      	adds	r3, r0, #1
 8003a42:	d124      	bne.n	8003a8e <_malloc_r+0x92>
 8003a44:	230c      	movs	r3, #12
 8003a46:	6033      	str	r3, [r6, #0]
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f868 	bl	8003b1e <__malloc_unlock>
 8003a4e:	e7e4      	b.n	8003a1a <_malloc_r+0x1e>
 8003a50:	680b      	ldr	r3, [r1, #0]
 8003a52:	1b5b      	subs	r3, r3, r5
 8003a54:	d418      	bmi.n	8003a88 <_malloc_r+0x8c>
 8003a56:	2b0b      	cmp	r3, #11
 8003a58:	d90f      	bls.n	8003a7a <_malloc_r+0x7e>
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	50cd      	str	r5, [r1, r3]
 8003a5e:	18cc      	adds	r4, r1, r3
 8003a60:	4630      	mov	r0, r6
 8003a62:	f000 f85c 	bl	8003b1e <__malloc_unlock>
 8003a66:	f104 000b 	add.w	r0, r4, #11
 8003a6a:	1d23      	adds	r3, r4, #4
 8003a6c:	f020 0007 	bic.w	r0, r0, #7
 8003a70:	1ac3      	subs	r3, r0, r3
 8003a72:	d0d3      	beq.n	8003a1c <_malloc_r+0x20>
 8003a74:	425a      	negs	r2, r3
 8003a76:	50e2      	str	r2, [r4, r3]
 8003a78:	e7d0      	b.n	8003a1c <_malloc_r+0x20>
 8003a7a:	428c      	cmp	r4, r1
 8003a7c:	684b      	ldr	r3, [r1, #4]
 8003a7e:	bf16      	itet	ne
 8003a80:	6063      	strne	r3, [r4, #4]
 8003a82:	6013      	streq	r3, [r2, #0]
 8003a84:	460c      	movne	r4, r1
 8003a86:	e7eb      	b.n	8003a60 <_malloc_r+0x64>
 8003a88:	460c      	mov	r4, r1
 8003a8a:	6849      	ldr	r1, [r1, #4]
 8003a8c:	e7cc      	b.n	8003a28 <_malloc_r+0x2c>
 8003a8e:	1cc4      	adds	r4, r0, #3
 8003a90:	f024 0403 	bic.w	r4, r4, #3
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d005      	beq.n	8003aa4 <_malloc_r+0xa8>
 8003a98:	1a21      	subs	r1, r4, r0
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f000 f82e 	bl	8003afc <_sbrk_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d0cf      	beq.n	8003a44 <_malloc_r+0x48>
 8003aa4:	6025      	str	r5, [r4, #0]
 8003aa6:	e7db      	b.n	8003a60 <_malloc_r+0x64>
 8003aa8:	20000090 	.word	0x20000090
 8003aac:	20000094 	.word	0x20000094

08003ab0 <_realloc_r>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	4607      	mov	r7, r0
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	460e      	mov	r6, r1
 8003ab8:	b921      	cbnz	r1, 8003ac4 <_realloc_r+0x14>
 8003aba:	4611      	mov	r1, r2
 8003abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ac0:	f7ff bf9c 	b.w	80039fc <_malloc_r>
 8003ac4:	b922      	cbnz	r2, 8003ad0 <_realloc_r+0x20>
 8003ac6:	f7ff ff4b 	bl	8003960 <_free_r>
 8003aca:	4625      	mov	r5, r4
 8003acc:	4628      	mov	r0, r5
 8003ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad0:	f000 f826 	bl	8003b20 <_malloc_usable_size_r>
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d20f      	bcs.n	8003af8 <_realloc_r+0x48>
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4638      	mov	r0, r7
 8003adc:	f7ff ff8e 	bl	80039fc <_malloc_r>
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	d0f2      	beq.n	8003acc <_realloc_r+0x1c>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4622      	mov	r2, r4
 8003aea:	f7ff ff15 	bl	8003918 <memcpy>
 8003aee:	4631      	mov	r1, r6
 8003af0:	4638      	mov	r0, r7
 8003af2:	f7ff ff35 	bl	8003960 <_free_r>
 8003af6:	e7e9      	b.n	8003acc <_realloc_r+0x1c>
 8003af8:	4635      	mov	r5, r6
 8003afa:	e7e7      	b.n	8003acc <_realloc_r+0x1c>

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	4c06      	ldr	r4, [pc, #24]	; (8003b18 <_sbrk_r+0x1c>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	4605      	mov	r5, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	6023      	str	r3, [r4, #0]
 8003b08:	f7fc fec0 	bl	800088c <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	20000140 	.word	0x20000140

08003b1c <__malloc_lock>:
 8003b1c:	4770      	bx	lr

08003b1e <__malloc_unlock>:
 8003b1e:	4770      	bx	lr

08003b20 <_malloc_usable_size_r>:
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbc      	itt	lt
 8003b2a:	580b      	ldrlt	r3, [r1, r0]
 8003b2c:	18c0      	addlt	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

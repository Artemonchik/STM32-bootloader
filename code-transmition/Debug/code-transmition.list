
code-transmition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003350  08003350  00013350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033e4  080033e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  0800345c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800345c  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d9b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000150f  00000000  00000000  00027e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  00029350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  000299c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000198f4  00000000  00000000  00029f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006567  00000000  00000000  0004387c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093ede  00000000  00000000  00049de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddcc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c08  00000000  00000000  000ddd3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003338 	.word	0x08003338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003338 	.word	0x08003338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <sendData>:
int wasSend = 0;

/**
 * int len of data you want to send
 */
int sendData(UART_HandleTypeDef * huart, int32_t messageCode, uint8_t * data, int32_t len, uint32_t timeout){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*)(&len), sizeof(len), timeout);
 800028e:	4639      	mov	r1, r7
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	2204      	movs	r2, #4
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 f807 	bl	80022a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*)(&messageCode), sizeof(messageCode), timeout);
 800029a:	f107 0108 	add.w	r1, r7, #8
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	2204      	movs	r2, #4
 80002a2:	68f8      	ldr	r0, [r7, #12]
 80002a4:	f002 f800 	bl	80022a8 <HAL_UART_Transmit>
	wasSend = HAL_UART_Transmit(huart, data, len, timeout);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	68f8      	ldr	r0, [r7, #12]
 80002b2:	f001 fff9 	bl	80022a8 <HAL_UART_Transmit>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <sendData+0x48>)
 80002bc:	601a      	str	r2, [r3, #0]
	return 0;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000008c 	.word	0x2000008c

080002cc <HAL_printf>:
	return dataBuffer;
}

/**
 * As you can see, max size of sending string after formating must be at most 250 characters*/
void HAL_printf(const char * format, ...){
 80002cc:	b40f      	push	{r0, r1, r2, r3}
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b0c4      	sub	sp, #272	; 0x110
 80002d2:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg ;
	va_start( arg , format );
 80002d4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	f107 0008 	add.w	r0, r7, #8
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80002e8:	f002 fc36 	bl	8002b58 <vsiprintf>
	sendData(&huart1, STR, (uint8_t*)buff, (int)strlen(buff), 60000);
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff6d 	bl	80001d0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f107 0208 	add.w	r2, r7, #8
 80002fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	460b      	mov	r3, r1
 8000306:	2101      	movs	r1, #1
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <HAL_printf+0x54>)
 800030a:	f7ff ffb9 	bl	8000280 <sendData>
	va_end(arg );
}
 800030e:	bf00      	nop
 8000310:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000314:	46bd      	mov	sp, r7
 8000316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800031a:	b004      	add	sp, #16
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000009c 	.word	0x2000009c

08000324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000328:	f000 f9bc 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032c:	f000 f80e 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000330:	f000 f88c 	bl	800044c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000334:	f000 f85a 	bl	80003ec <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_printf("Hello: %s, you so fucking %d/10", "Borya", 10);
 8000338:	220a      	movs	r2, #10
 800033a:	4902      	ldr	r1, [pc, #8]	; (8000344 <main+0x20>)
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <main+0x24>)
 800033e:	f7ff ffc5 	bl	80002cc <HAL_printf>
  while (1)
 8000342:	e7fe      	b.n	8000342 <main+0x1e>
 8000344:	08003350 	.word	0x08003350
 8000348:	08003358 	.word	0x08003358

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b09e      	sub	sp, #120	; 0x78
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f002 fbde 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	223c      	movs	r2, #60	; 0x3c
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fbd0 	bl	8002b1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037c:	2302      	movs	r3, #2
 800037e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	2301      	movs	r3, #1
 8000382:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000384:	2310      	movs	r3, #16
 8000386:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000388:	2300      	movs	r3, #0
 800038a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fc4d 	bl	8000c30 <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800039c:	f000 f86e 	bl	800047c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a4:	2300      	movs	r3, #0
 80003a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fb40 	bl	8001a40 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003c6:	f000 f859 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80003ca:	2301      	movs	r3, #1
 80003cc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 fd69 	bl	8001eac <HAL_RCCEx_PeriphCLKConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80003e0:	f000 f84c 	bl	800047c <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3778      	adds	r7, #120	; 0x78
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <MX_USART1_UART_Init+0x5c>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003f6:	4b13      	ldr	r3, [pc, #76]	; (8000444 <MX_USART1_UART_Init+0x58>)
 80003f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x58>)
 8000430:	f001 feec 	bl	800220c <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800043a:	f000 f81f 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	2000009c 	.word	0x2000009c
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_GPIO_Init+0x2c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <MX_GPIO_Init+0x2c>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_GPIO_Init+0x2c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x44>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x44>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x44>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <HAL_MspInit+0x44>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <HAL_MspInit+0x44>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_MspInit+0x44>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_UART_MspInit+0x80>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d129      	bne.n	800054a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004f6:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_UART_MspInit+0x84>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <HAL_UART_MspInit+0x84>)
 80004fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_UART_MspInit+0x84>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_UART_MspInit+0x84>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_UART_MspInit+0x84>)
 8000514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000518:	6153      	str	r3, [r2, #20]
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <HAL_UART_MspInit+0x84>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000526:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800052a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052c:	2302      	movs	r3, #2
 800052e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000534:	2303      	movs	r3, #3
 8000536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000538:	2307      	movs	r3, #7
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	4619      	mov	r1, r3
 8000542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000546:	f000 f9f9 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40013800 	.word	0x40013800
 8000558:	40021000 	.word	0x40021000

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f8be 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c0:	4a14      	ldr	r2, [pc, #80]	; (8000614 <_sbrk+0x5c>)
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <_sbrk+0x60>)
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d102      	bne.n	80005da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <_sbrk+0x64>)
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <_sbrk+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d207      	bcs.n	80005f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e8:	f002 fa6e 	bl	8002ac8 <__errno>
 80005ec:	4602      	mov	r2, r0
 80005ee:	230c      	movs	r3, #12
 80005f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e009      	b.n	800060c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <_sbrk+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_sbrk+0x64>)
 8000608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000a000 	.word	0x2000a000
 8000618:	00000400 	.word	0x00000400
 800061c:	20000090 	.word	0x20000090
 8000620:	20000318 	.word	0x20000318

08000624 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <SystemInit+0x28>)
 800062a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <SystemInit+0x28>)
 8000630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000638:	4b04      	ldr	r3, [pc, #16]	; (800064c <SystemInit+0x28>)
 800063a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800063e:	609a      	str	r2, [r3, #8]
#endif
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000688 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000654:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000656:	e003      	b.n	8000660 <LoopCopyDataInit>

08000658 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800065a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800065c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800065e:	3104      	adds	r1, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000664:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000666:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000668:	d3f6      	bcc.n	8000658 <CopyDataInit>
	ldr	r2, =_sbss
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <LoopForever+0x12>)
	b	LoopFillZerobss
 800066c:	e002      	b.n	8000674 <LoopFillZerobss>

0800066e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800066e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000670:	f842 3b04 	str.w	r3, [r2], #4

08000674 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <LoopForever+0x16>)
	cmp	r2, r3
 8000676:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000678:	d3f9      	bcc.n	800066e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067a:	f7ff ffd3 	bl	8000624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067e:	f002 fa29 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000682:	f7ff fe4f 	bl	8000324 <main>

08000686 <LoopForever>:

LoopForever:
    b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000688:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 800068c:	080033ec 	.word	0x080033ec
	ldr	r0, =_sdata
 8000690:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000694:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000698:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800069c:	20000318 	.word	0x20000318

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f90d 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff fee4 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f917 	bl	8000922 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f8ed 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000008 	.word	0x20000008
 8000754:	20000310 	.word	0x20000310

08000758 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;  
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000310 	.word	0x20000310

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff5c 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff8e 	bl	8000828 <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5d 	bl	80007d4 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffb0 	bl	8000890 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e154      	b.n	8000bf6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8146 	beq.w	8000bf0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00b      	beq.n	8000984 <HAL_GPIO_Init+0x48>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	2b11      	cmp	r3, #17
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0xea>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	6939      	ldr	r1, [r7, #16]
 8000a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0203 	and.w	r2, r3, #3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80a0 	beq.w	8000bf0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a57      	ldr	r2, [pc, #348]	; (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <HAL_GPIO_Init+0x2d8>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac8:	4a53      	ldr	r2, [pc, #332]	; (8000c18 <HAL_GPIO_Init+0x2dc>)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	3302      	adds	r3, #2
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f003 0303 	and.w	r3, r3, #3
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	220f      	movs	r2, #15
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000af2:	d019      	beq.n	8000b28 <HAL_GPIO_Init+0x1ec>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a49      	ldr	r2, [pc, #292]	; (8000c1c <HAL_GPIO_Init+0x2e0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d013      	beq.n	8000b24 <HAL_GPIO_Init+0x1e8>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a48      	ldr	r2, [pc, #288]	; (8000c20 <HAL_GPIO_Init+0x2e4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d00d      	beq.n	8000b20 <HAL_GPIO_Init+0x1e4>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a47      	ldr	r2, [pc, #284]	; (8000c24 <HAL_GPIO_Init+0x2e8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d007      	beq.n	8000b1c <HAL_GPIO_Init+0x1e0>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <HAL_GPIO_Init+0x2ec>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d101      	bne.n	8000b18 <HAL_GPIO_Init+0x1dc>
 8000b14:	2304      	movs	r3, #4
 8000b16:	e008      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b18:	2305      	movs	r3, #5
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e004      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b20:	2302      	movs	r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <HAL_GPIO_Init+0x1ee>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	f002 0203 	and.w	r2, r2, #3
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	4093      	lsls	r3, r2
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b3a:	4937      	ldr	r1, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2dc>)
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3302      	adds	r3, #2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b6c:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b96:	4a25      	ldr	r2, [pc, #148]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_GPIO_Init+0x2f0>)
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f47f aea3 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000c06:	bf00      	nop
 8000c08:	371c      	adds	r7, #28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000800 	.word	0x48000800
 8000c24:	48000c00 	.word	0x48000c00
 8000c28:	48001000 	.word	0x48001000
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	f000 bef4 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 816a 	beq.w	8000f2e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c5a:	4bb3      	ldr	r3, [pc, #716]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d00c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c66:	4bb0      	ldr	r3, [pc, #704]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d159      	bne.n	8000d26 <HAL_RCC_OscConfig+0xf6>
 8000c72:	4bad      	ldr	r3, [pc, #692]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7e:	d152      	bne.n	8000d26 <HAL_RCC_OscConfig+0xf6>
 8000c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c84:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c8c:	fa93 f3a3 	rbit	r3, r3
 8000c90:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c94:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c98:	fab3 f383 	clz	r3, r3
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d102      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x82>
 8000cac:	4b9e      	ldr	r3, [pc, #632]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	e015      	b.n	8000cde <HAL_RCC_OscConfig+0xae>
 8000cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cb6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000cbe:	fa93 f3a3 	rbit	r3, r3
 8000cc2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cd2:	fa93 f3a3 	rbit	r3, r3
 8000cd6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cda:	4b93      	ldr	r3, [pc, #588]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ce2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000ce6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cea:	fa92 f2a2 	rbit	r2, r2
 8000cee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cf2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cf6:	fab2 f282 	clz	r2, r2
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	f042 0220 	orr.w	r2, r2, #32
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	f002 021f 	and.w	r2, r2, #31
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 810c 	beq.w	8000f2c <HAL_RCC_OscConfig+0x2fc>
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f040 8106 	bne.w	8000f2c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f000 be86 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d106      	bne.n	8000d40 <HAL_RCC_OscConfig+0x110>
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7c      	ldr	r2, [pc, #496]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e030      	b.n	8000da2 <HAL_RCC_OscConfig+0x172>
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x134>
 8000d4a:	4b77      	ldr	r3, [pc, #476]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a76      	ldr	r2, [pc, #472]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	4b74      	ldr	r3, [pc, #464]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a73      	ldr	r2, [pc, #460]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e01e      	b.n	8000da2 <HAL_RCC_OscConfig+0x172>
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d6e:	d10c      	bne.n	8000d8a <HAL_RCC_OscConfig+0x15a>
 8000d70:	4b6d      	ldr	r3, [pc, #436]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6c      	ldr	r2, [pc, #432]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b6a      	ldr	r3, [pc, #424]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a69      	ldr	r2, [pc, #420]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e00b      	b.n	8000da2 <HAL_RCC_OscConfig+0x172>
 8000d8a:	4b67      	ldr	r3, [pc, #412]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a66      	ldr	r2, [pc, #408]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a63      	ldr	r2, [pc, #396]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000da2:	4b61      	ldr	r3, [pc, #388]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	f023 020f 	bic.w	r2, r3, #15
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	495d      	ldr	r1, [pc, #372]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d059      	beq.n	8000e74 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fcca 	bl	8000758 <HAL_GetTick>
 8000dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	e00a      	b.n	8000de0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fcc5 	bl	8000758 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d902      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	f000 be29 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
 8000de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000df4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1e2>
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	e015      	b.n	8000e3e <HAL_RCC_OscConfig+0x20e>
 8000e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e4a:	fa92 f2a2 	rbit	r2, r2
 8000e4e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e52:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	f002 021f 	and.w	r2, r2, #31
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0ab      	beq.n	8000dca <HAL_RCC_OscConfig+0x19a>
 8000e72:	e05c      	b.n	8000f2e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc70 	bl	8000758 <HAL_GetTick>
 8000e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fc6b 	bl	8000758 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d902      	bls.n	8000e94 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f000 bdcf 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ea8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x296>
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2c2>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ede:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ee2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_RCC_OscConfig+0x2f8>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000efa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000efe:	fa92 f2a2 	rbit	r2, r2
 8000f02:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f06:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f0a:	fab2 f282 	clz	r2, r2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1ab      	bne.n	8000e7e <HAL_RCC_OscConfig+0x24e>
 8000f26:	e002      	b.n	8000f2e <HAL_RCC_OscConfig+0x2fe>
 8000f28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 816f 	beq.w	800121c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f3e:	4bd0      	ldr	r3, [pc, #832]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00b      	beq.n	8000f62 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f4a:	4bcd      	ldr	r3, [pc, #820]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d16c      	bne.n	8001030 <HAL_RCC_OscConfig+0x400>
 8000f56:	4bca      	ldr	r3, [pc, #808]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d166      	bne.n	8001030 <HAL_RCC_OscConfig+0x400>
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f74:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f78:	fab3 f383 	clz	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d102      	bne.n	8000f92 <HAL_RCC_OscConfig+0x362>
 8000f8c:	4bbc      	ldr	r3, [pc, #752]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	e013      	b.n	8000fba <HAL_RCC_OscConfig+0x38a>
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f98:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f9c:	fa93 f3a3 	rbit	r3, r3
 8000fa0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000faa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000fb6:	4bb2      	ldr	r3, [pc, #712]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	2202      	movs	r2, #2
 8000fbc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fc0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fc4:	fa92 f2a2 	rbit	r2, r2
 8000fc8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000fcc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000fd0:	fab2 f282 	clz	r2, r2
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	f002 021f 	and.w	r2, r2, #31
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d007      	beq.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d002      	beq.n	8000ffc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f000 bd1b 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4ba0      	ldr	r3, [pc, #640]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	21f8      	movs	r1, #248	; 0xf8
 800100c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001014:	fa91 f1a1 	rbit	r1, r1
 8001018:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800101c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001020:	fab1 f181 	clz	r1, r1
 8001024:	b2c9      	uxtb	r1, r1
 8001026:	408b      	lsls	r3, r1
 8001028:	4995      	ldr	r1, [pc, #596]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	e0f5      	b.n	800121c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8085 	beq.w	8001146 <HAL_RCC_OscConfig+0x516>
 800103c:	2301      	movs	r3, #1
 800103e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800104e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800105c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	461a      	mov	r2, r3
 8001064:	2301      	movs	r3, #1
 8001066:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fb76 	bl	8000758 <HAL_GetTick>
 800106c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	e00a      	b.n	8001088 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fb71 	bl	8000758 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d902      	bls.n	8001088 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	f000 bcd5 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800109a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	fab3 f383 	clz	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	095b      	lsrs	r3, r3, #5
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d102      	bne.n	80010b8 <HAL_RCC_OscConfig+0x488>
 80010b2:	4b73      	ldr	r3, [pc, #460]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	e013      	b.n	80010e0 <HAL_RCC_OscConfig+0x4b0>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80010d4:	fa93 f3a3 	rbit	r3, r3
 80010d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2202      	movs	r2, #2
 80010e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010ea:	fa92 f2a2 	rbit	r2, r2
 80010ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010f6:	fab2 f282 	clz	r2, r2
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	f002 021f 	and.w	r2, r2, #31
 8001106:	2101      	movs	r1, #1
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0af      	beq.n	8001072 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	21f8      	movs	r1, #248	; 0xf8
 8001122:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800112a:	fa91 f1a1 	rbit	r1, r1
 800112e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001132:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001136:	fab1 f181 	clz	r1, r1
 800113a:	b2c9      	uxtb	r1, r1
 800113c:	408b      	lsls	r3, r1
 800113e:	4950      	ldr	r1, [pc, #320]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e06a      	b.n	800121c <HAL_RCC_OscConfig+0x5ec>
 8001146:	2301      	movs	r3, #1
 8001148:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001158:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001166:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	461a      	mov	r2, r3
 800116e:	2300      	movs	r3, #0
 8001170:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff faf1 	bl	8000758 <HAL_GetTick>
 8001176:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	e00a      	b.n	8001192 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff faec 	bl	8000758 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d902      	bls.n	8001192 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	f000 bc50 	b.w	8001a32 <HAL_RCC_OscConfig+0xe02>
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a8:	fab3 f383 	clz	r3, r3
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <HAL_RCC_OscConfig+0x592>
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	e013      	b.n	80011ea <HAL_RCC_OscConfig+0x5ba>
 80011c2:	2302      	movs	r3, #2
 80011c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011d4:	2302      	movs	r3, #2
 80011d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_RCC_OscConfig+0x650>)
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	2202      	movs	r2, #2
 80011ec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011f4:	fa92 f2a2 	rbit	r2, r2
 80011f8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001200:	fab2 f282 	clz	r2, r2
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	f002 021f 	and.w	r2, r2, #31
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f202 	lsl.w	r2, r1, r2
 8001216:	4013      	ands	r3, r2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1af      	bne.n	800117c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80da 	beq.w	80013e0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d069      	beq.n	800130a <HAL_RCC_OscConfig+0x6da>
 8001236:	2301      	movs	r3, #1
 8001238:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_OscConfig+0x654>)
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	461a      	mov	r2, r3
 800125c:	2301      	movs	r3, #1
 800125e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fa7a 	bl	8000758 <HAL_GetTick>
 8001264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001268:	e00e      	b.n	8001288 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126a:	f7ff fa75 	bl	8000758 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d906      	bls.n	8001288 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e3d9      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	10908120 	.word	0x10908120
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800129a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	fa93 f2a3 	rbit	r2, r3
 80012c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	4ba5      	ldr	r3, [pc, #660]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80012cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012d2:	2102      	movs	r1, #2
 80012d4:	6019      	str	r1, [r3, #0]
 80012d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	fa93 f1a3 	rbit	r1, r3
 80012e0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012e4:	6019      	str	r1, [r3, #0]
  return result;
 80012e6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	fab3 f383 	clz	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0b0      	beq.n	800126a <HAL_RCC_OscConfig+0x63a>
 8001308:	e06a      	b.n	80013e0 <HAL_RCC_OscConfig+0x7b0>
 800130a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800130e:	2201      	movs	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001320:	601a      	str	r2, [r3, #0]
  return result;
 8001322:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001326:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001328:	fab3 f383 	clz	r3, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	4b8c      	ldr	r3, [pc, #560]	; (8001564 <HAL_RCC_OscConfig+0x934>)
 8001332:	4413      	add	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	2300      	movs	r3, #0
 800133a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fa0c 	bl	8000758 <HAL_GetTick>
 8001340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e009      	b.n	800135a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fa07 	bl	8000758 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e36b      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 800135a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800135e:	2202      	movs	r2, #2
 8001360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fa93 f2a3 	rbit	r2, r3
 800136c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001376:	2202      	movs	r2, #2
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	fa93 f2a3 	rbit	r2, r3
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800138e:	2202      	movs	r2, #2
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a2:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80013a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013aa:	2102      	movs	r1, #2
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	fa93 f1a3 	rbit	r1, r3
 80013b8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013bc:	6019      	str	r1, [r3, #0]
  return result;
 80013be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1b2      	bne.n	8001346 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8158 	beq.w	80016a0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d112      	bne.n	8001428 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b57      	ldr	r3, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x938>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d11a      	bne.n	800146a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001434:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <HAL_RCC_OscConfig+0x938>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_RCC_OscConfig+0x938>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001440:	f7ff f98a 	bl	8000758 <HAL_GetTick>
 8001444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff f985 	bl	8000758 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e2e9      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_RCC_OscConfig+0x938>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ef      	beq.n	800144a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x852>
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a39      	ldr	r2, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e02f      	b.n	80014e2 <HAL_RCC_OscConfig+0x8b2>
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x876>
 800148c:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a30      	ldr	r2, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 800149e:	f023 0304 	bic.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e01d      	b.n	80014e2 <HAL_RCC_OscConfig+0x8b2>
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x89a>
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6213      	str	r3, [r2, #32]
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_OscConfig+0x8b2>
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a24      	ldr	r2, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d06b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f934 	bl	8000758 <HAL_GetTick>
 80014f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e00b      	b.n	800150e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f92f 	bl	8000758 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e291      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 800150e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800153c:	601a      	str	r2, [r3, #0]
  return result;
 800153e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001542:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d109      	bne.n	800156c <HAL_RCC_OscConfig+0x93c>
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <HAL_RCC_OscConfig+0x930>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x958>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	10908120 	.word	0x10908120
 8001568:	40007000 	.word	0x40007000
 800156c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001574:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	fa93 f2a3 	rbit	r2, r3
 800157e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	4bbb      	ldr	r3, [pc, #748]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800158c:	2102      	movs	r1, #2
 800158e:	6011      	str	r1, [r2, #0]
 8001590:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	fa92 f1a2 	rbit	r1, r2
 800159a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800159e:	6011      	str	r1, [r2, #0]
  return result;
 80015a0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	fab2 f282 	clz	r2, r2
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	f002 021f 	and.w	r2, r2, #31
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4013      	ands	r3, r2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d099      	beq.n	80014f6 <HAL_RCC_OscConfig+0x8c6>
 80015c2:	e063      	b.n	800168c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f8c8 	bl	8000758 <HAL_GetTick>
 80015c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff f8c3 	bl	8000758 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e225      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 80015e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001602:	2202      	movs	r2, #2
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fa93 f2a3 	rbit	r2, r3
 8001610:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001614:	601a      	str	r2, [r3, #0]
  return result;
 8001616:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800161a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0302 	orr.w	r3, r3, #2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0xa06>
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	e00d      	b.n	8001652 <HAL_RCC_OscConfig+0xa22>
 8001636:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800163a:	2202      	movs	r2, #2
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	4b89      	ldr	r3, [pc, #548]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001656:	2102      	movs	r1, #2
 8001658:	6011      	str	r1, [r2, #0]
 800165a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	fa92 f1a2 	rbit	r1, r2
 8001664:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001668:	6011      	str	r1, [r2, #0]
  return result;
 800166a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	fab2 f282 	clz	r2, r2
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1a0      	bne.n	80015ce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001690:	2b01      	cmp	r3, #1
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001694:	4b77      	ldr	r3, [pc, #476]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a76      	ldr	r2, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 800169a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 81c2 	beq.w	8001a30 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b71      	ldr	r3, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	f000 819c 	beq.w	80019f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	f040 8114 	bne.w	80018ee <HAL_RCC_OscConfig+0xcbe>
 80016c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	fa93 f2a3 	rbit	r2, r3
 80016da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016de:	601a      	str	r2, [r3, #0]
  return result;
 80016e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016e4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	2300      	movs	r3, #0
 80016fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff f82c 	bl	8000758 <HAL_GetTick>
 8001700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001704:	e009      	b.n	800171a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f827 	bl	8000758 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e18b      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 800171a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800171e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001732:	601a      	str	r2, [r3, #0]
  return result;
 8001734:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	095b      	lsrs	r3, r3, #5
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d102      	bne.n	8001754 <HAL_RCC_OscConfig+0xb24>
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	e01b      	b.n	800178c <HAL_RCC_OscConfig+0xb5c>
 8001754:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001790:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001794:	6011      	str	r1, [r2, #0]
 8001796:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	fa92 f1a2 	rbit	r1, r2
 80017a0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017a4:	6011      	str	r1, [r2, #0]
  return result;
 80017a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	fab2 f282 	clz	r2, r2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	f042 0220 	orr.w	r2, r2, #32
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f002 021f 	and.w	r2, r2, #31
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d19e      	bne.n	8001706 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	430b      	orrs	r3, r1
 80017de:	4925      	ldr	r1, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
 80017e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017fc:	601a      	str	r2, [r3, #0]
  return result;
 80017fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001802:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800180e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	461a      	mov	r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7fe ff9d 	bl	8000758 <HAL_GetTick>
 800181e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001822:	e009      	b.n	8001838 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7fe ff98 	bl	8000758 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0fc      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 8001838:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800183c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001840:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	fa93 f2a3 	rbit	r2, r3
 800184c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001850:	601a      	str	r2, [r3, #0]
  return result;
 8001852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001856:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001858:	fab3 f383 	clz	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	b2db      	uxtb	r3, r3
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0xc48>
 800186c:	4b01      	ldr	r3, [pc, #4]	; (8001874 <HAL_RCC_OscConfig+0xc44>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	e01e      	b.n	80018b0 <HAL_RCC_OscConfig+0xc80>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800187c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	fa93 f2a3 	rbit	r2, r3
 800188c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f2a3 	rbit	r2, r3
 80018a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	4b63      	ldr	r3, [pc, #396]	; (8001a3c <HAL_RCC_OscConfig+0xe0c>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018b8:	6011      	str	r1, [r2, #0]
 80018ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	fa92 f1a2 	rbit	r1, r2
 80018c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018c8:	6011      	str	r1, [r2, #0]
  return result;
 80018ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	fab2 f282 	clz	r2, r2
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	f042 0220 	orr.w	r2, r2, #32
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f002 021f 	and.w	r2, r2, #31
 80018e0:	2101      	movs	r1, #1
 80018e2:	fa01 f202 	lsl.w	r2, r1, r2
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d09b      	beq.n	8001824 <HAL_RCC_OscConfig+0xbf4>
 80018ec:	e0a0      	b.n	8001a30 <HAL_RCC_OscConfig+0xe00>
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001906:	601a      	str	r2, [r3, #0]
  return result;
 8001908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7fe ff18 	bl	8000758 <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800192c:	e009      	b.n	8001942 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7fe ff13 	bl	8000758 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e077      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195a:	601a      	str	r2, [r3, #0]
  return result;
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0xd4c>
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0xe0c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	e01b      	b.n	80019b4 <HAL_RCC_OscConfig+0xd84>
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	f107 0318 	add.w	r3, r7, #24
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	fa93 f2a3 	rbit	r2, r3
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0xe0c>)
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	f107 0210 	add.w	r2, r7, #16
 80019b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019bc:	6011      	str	r1, [r2, #0]
 80019be:	f107 0210 	add.w	r2, r7, #16
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fa92 f1a2 	rbit	r1, r2
 80019c8:	f107 020c 	add.w	r2, r7, #12
 80019cc:	6011      	str	r1, [r2, #0]
  return result;
 80019ce:	f107 020c 	add.w	r2, r7, #12
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fab2 f282 	clz	r2, r2
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	f042 0220 	orr.w	r2, r2, #32
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	f002 021f 	and.w	r2, r2, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d19e      	bne.n	800192e <HAL_RCC_OscConfig+0xcfe>
 80019f0:	e01e      	b.n	8001a30 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e018      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_RCC_OscConfig+0xe0c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b09e      	sub	sp, #120	; 0x78
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e162      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b90      	ldr	r3, [pc, #576]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b8d      	ldr	r3, [pc, #564]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	498b      	ldr	r1, [pc, #556]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b89      	ldr	r3, [pc, #548]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e14a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b82      	ldr	r3, [pc, #520]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	497f      	ldr	r1, [pc, #508]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80dc 	beq.w	8001c6c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d13c      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xf6>
 8001abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ac0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xa6>
 8001ae0:	4b6f      	ldr	r3, [pc, #444]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e00f      	b.n	8001b06 <HAL_RCC_ClockConfig+0xc6>
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	667b      	str	r3, [r7, #100]	; 0x64
 8001af4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
 8001afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b02:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b0e:	fa92 f2a2 	rbit	r2, r2
 8001b12:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b16:	fab2 f282 	clz	r2, r2
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f042 0220 	orr.w	r2, r2, #32
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f002 021f 	and.w	r2, r2, #31
 8001b26:	2101      	movs	r1, #1
 8001b28:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d17b      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0f3      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d13c      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x178>
 8001b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	095b      	lsrs	r3, r3, #5
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x128>
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e00f      	b.n	8001b88 <HAL_RCC_ClockConfig+0x148>
 8001b68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
 8001b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b84:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b90:	fa92 f2a2 	rbit	r2, r2
 8001b94:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d13a      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b2      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	fab3 f383 	clz	r3, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	095b      	lsrs	r3, r3, #5
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x1a0>
 8001bda:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	e00d      	b.n	8001bfc <HAL_RCC_ClockConfig+0x1bc>
 8001be0:	2302      	movs	r3, #2
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
 8001bec:	2302      	movs	r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	61ba      	str	r2, [r7, #24]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	fa92 f2a2 	rbit	r2, r2
 8001c06:	617a      	str	r2, [r7, #20]
  return result;
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e079      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	491a      	ldr	r1, [pc, #104]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fd8c 	bl	8000758 <HAL_GetTick>
 8001c40:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7fe fd88 	bl	8000758 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e061      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d214      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4906      	ldr	r1, [pc, #24]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_ClockConfig+0x25c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e040      	b.n	8001d1e <HAL_RCC_ClockConfig+0x2de>
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_RCC_ClockConfig+0x2e8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	491a      	ldr	r1, [pc, #104]	; (8001d28 <HAL_RCC_ClockConfig+0x2e8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_RCC_ClockConfig+0x2e8>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4912      	ldr	r1, [pc, #72]	; (8001d28 <HAL_RCC_ClockConfig+0x2e8>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ce2:	f000 f829 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_ClockConfig+0x2e8>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf0:	22f0      	movs	r2, #240	; 0xf0
 8001cf2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	fa92 f2a2 	rbit	r2, r2
 8001cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	fab2 f282 	clz	r2, r2
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	40d3      	lsrs	r3, r2
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x2ec>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_RCC_ClockConfig+0x2f0>)
 8001d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_ClockConfig+0x2f4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fcda 	bl	80006d0 <HAL_InitTick>
  
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3778      	adds	r7, #120	; 0x78
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003378 	.word	0x08003378
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
 8001d3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x30>
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x36>
 8001d66:	e03c      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d6a:	623b      	str	r3, [r7, #32]
      break;
 8001d6c:	e03c      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d74:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d78:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	fa92 f2a2 	rbit	r2, r2
 8001d80:	607a      	str	r2, [r7, #4]
  return result;
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	fab2 f282 	clz	r2, r2
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	40d3      	lsrs	r3, r2
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	fa92 f2a2 	rbit	r2, r2
 8001da4:	60fa      	str	r2, [r7, #12]
  return result;
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	40d3      	lsrs	r3, r2
 8001db0:	4a14      	ldr	r2, [pc, #80]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd0:	e004      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	623b      	str	r3, [r7, #32]
      break;
 8001de0:	e002      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de4:	623b      	str	r3, [r7, #32]
      break;
 8001de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de8:	6a3b      	ldr	r3, [r7, #32]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	372c      	adds	r7, #44	; 0x2c
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	007a1200 	.word	0x007a1200
 8001e00:	08003390 	.word	0x08003390
 8001e04:	080033a0 	.word	0x080033a0
 8001e08:	003d0900 	.word	0x003d0900

08001e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000

08001e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e2a:	f7ff ffef 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e2e:	4601      	mov	r1, r0
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e38:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	fa92 f2a2 	rbit	r2, r2
 8001e44:	603a      	str	r2, [r7, #0]
  return result;
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	fab2 f282 	clz	r2, r2
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	40d3      	lsrs	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08003388 	.word	0x08003388

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e6e:	f7ff ffcd 	bl	8001e0c <HAL_RCC_GetHCLKFreq>
 8001e72:	4601      	mov	r1, r0
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	603a      	str	r2, [r7, #0]
  return result;
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	40d3      	lsrs	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08003388 	.word	0x08003388

08001eac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b092      	sub	sp, #72	; 0x48
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80d7 	beq.w	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10e      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b48      	ldr	r3, [pc, #288]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efa:	4b45      	ldr	r3, [pc, #276]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a41      	ldr	r2, [pc, #260]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fc21 	bl	8000758 <HAL_GetTick>
 8001f16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7fe fc1d 	bl	8000758 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b64      	cmp	r3, #100	; 0x64
 8001f26:	d901      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e169      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8084 	beq.w	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d07c      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d04b      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe fbcd 	bl	8000758 <HAL_GetTick>
 8001fbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fbc9 	bl	8000758 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e113      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
  return result;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d108      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002006:	4b01      	ldr	r3, [pc, #4]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	e00d      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	10908100 	.word	0x10908100
 8002018:	2302      	movs	r3, #2
 800201a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	4b78      	ldr	r3, [pc, #480]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2202      	movs	r2, #2
 800202a:	613a      	str	r2, [r7, #16]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	60fa      	str	r2, [r7, #12]
  return result;
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0b7      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002052:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	496a      	ldr	r1, [pc, #424]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002060:	4313      	orrs	r3, r2
 8002062:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b66      	ldr	r3, [pc, #408]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	4a65      	ldr	r2, [pc, #404]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002084:	4b60      	ldr	r3, [pc, #384]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f023 0203 	bic.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	495d      	ldr	r1, [pc, #372]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d008      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020a2:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4956      	ldr	r1, [pc, #344]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020c0:	4b51      	ldr	r3, [pc, #324]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	494e      	ldr	r1, [pc, #312]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d008      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f023 0210 	bic.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4947      	ldr	r1, [pc, #284]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	493f      	ldr	r1, [pc, #252]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f023 0220 	bic.w	r2, r3, #32
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4938      	ldr	r1, [pc, #224]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4930      	ldr	r1, [pc, #192]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	d008      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002156:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4929      	ldr	r1, [pc, #164]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d008      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	491a      	ldr	r1, [pc, #104]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	4912      	ldr	r1, [pc, #72]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	490b      	ldr	r1, [pc, #44]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3748      	adds	r7, #72	; 0x48
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e040      	b.n	80022a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe f950 	bl	80004d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c0 	bl	80023d0 <UART_SetConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e022      	b.n	80022a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 face 	bl	8002804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fb55 	bl	8002948 <UART_CheckIdleState>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	2b20      	cmp	r3, #32
 80022be:	f040 8081 	bne.w	80023c4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_UART_Transmit+0x26>
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e079      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_UART_Transmit+0x38>
 80022dc:	2302      	movs	r3, #2
 80022de:	e072      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80022f4:	f7fe fa30 	bl	8000758 <HAL_GetTick>
 80022f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	88fa      	ldrh	r2, [r7, #6]
 8002306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d108      	bne.n	8002326 <HAL_UART_Transmit+0x7e>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e003      	b.n	800232e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800232e:	e02d      	b.n	800238c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2200      	movs	r2, #0
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fb49 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e03d      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	b292      	uxth	r2, r2
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	3302      	adds	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	e008      	b.n	800237a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b292      	uxth	r2, r2
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3301      	adds	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1cb      	bne.n	8002330 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2200      	movs	r2, #0
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fb15 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e009      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002402:	f023 030c 	bic.w	r3, r3, #12
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	430b      	orrs	r3, r1
 800240e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	430a      	orrs	r2, r1
 8002448:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4aa9      	ldr	r2, [pc, #676]	; (80026f4 <UART_SetConfig+0x324>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d121      	bne.n	8002498 <UART_SetConfig+0xc8>
 8002454:	4ba8      	ldr	r3, [pc, #672]	; (80026f8 <UART_SetConfig+0x328>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d817      	bhi.n	8002490 <UART_SetConfig+0xc0>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <UART_SetConfig+0x98>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	08002479 	.word	0x08002479
 800246c:	08002485 	.word	0x08002485
 8002470:	0800248b 	.word	0x0800248b
 8002474:	0800247f 	.word	0x0800247f
 8002478:	2301      	movs	r3, #1
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e0b2      	b.n	80025e4 <UART_SetConfig+0x214>
 800247e:	2302      	movs	r3, #2
 8002480:	77fb      	strb	r3, [r7, #31]
 8002482:	e0af      	b.n	80025e4 <UART_SetConfig+0x214>
 8002484:	2304      	movs	r3, #4
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e0ac      	b.n	80025e4 <UART_SetConfig+0x214>
 800248a:	2308      	movs	r3, #8
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	e0a9      	b.n	80025e4 <UART_SetConfig+0x214>
 8002490:	2310      	movs	r3, #16
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	bf00      	nop
 8002496:	e0a5      	b.n	80025e4 <UART_SetConfig+0x214>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a97      	ldr	r2, [pc, #604]	; (80026fc <UART_SetConfig+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d123      	bne.n	80024ea <UART_SetConfig+0x11a>
 80024a2:	4b95      	ldr	r3, [pc, #596]	; (80026f8 <UART_SetConfig+0x328>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d012      	beq.n	80024d6 <UART_SetConfig+0x106>
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d802      	bhi.n	80024bc <UART_SetConfig+0xec>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <UART_SetConfig+0xfa>
 80024ba:	e012      	b.n	80024e2 <UART_SetConfig+0x112>
 80024bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c0:	d00c      	beq.n	80024dc <UART_SetConfig+0x10c>
 80024c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024c6:	d003      	beq.n	80024d0 <UART_SetConfig+0x100>
 80024c8:	e00b      	b.n	80024e2 <UART_SetConfig+0x112>
 80024ca:	2300      	movs	r3, #0
 80024cc:	77fb      	strb	r3, [r7, #31]
 80024ce:	e089      	b.n	80025e4 <UART_SetConfig+0x214>
 80024d0:	2302      	movs	r3, #2
 80024d2:	77fb      	strb	r3, [r7, #31]
 80024d4:	e086      	b.n	80025e4 <UART_SetConfig+0x214>
 80024d6:	2304      	movs	r3, #4
 80024d8:	77fb      	strb	r3, [r7, #31]
 80024da:	e083      	b.n	80025e4 <UART_SetConfig+0x214>
 80024dc:	2308      	movs	r3, #8
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e080      	b.n	80025e4 <UART_SetConfig+0x214>
 80024e2:	2310      	movs	r3, #16
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	bf00      	nop
 80024e8:	e07c      	b.n	80025e4 <UART_SetConfig+0x214>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a84      	ldr	r2, [pc, #528]	; (8002700 <UART_SetConfig+0x330>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d123      	bne.n	800253c <UART_SetConfig+0x16c>
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <UART_SetConfig+0x328>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80024fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002500:	d012      	beq.n	8002528 <UART_SetConfig+0x158>
 8002502:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002506:	d802      	bhi.n	800250e <UART_SetConfig+0x13e>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <UART_SetConfig+0x14c>
 800250c:	e012      	b.n	8002534 <UART_SetConfig+0x164>
 800250e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002512:	d00c      	beq.n	800252e <UART_SetConfig+0x15e>
 8002514:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002518:	d003      	beq.n	8002522 <UART_SetConfig+0x152>
 800251a:	e00b      	b.n	8002534 <UART_SetConfig+0x164>
 800251c:	2300      	movs	r3, #0
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e060      	b.n	80025e4 <UART_SetConfig+0x214>
 8002522:	2302      	movs	r3, #2
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	e05d      	b.n	80025e4 <UART_SetConfig+0x214>
 8002528:	2304      	movs	r3, #4
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e05a      	b.n	80025e4 <UART_SetConfig+0x214>
 800252e:	2308      	movs	r3, #8
 8002530:	77fb      	strb	r3, [r7, #31]
 8002532:	e057      	b.n	80025e4 <UART_SetConfig+0x214>
 8002534:	2310      	movs	r3, #16
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	bf00      	nop
 800253a:	e053      	b.n	80025e4 <UART_SetConfig+0x214>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a70      	ldr	r2, [pc, #448]	; (8002704 <UART_SetConfig+0x334>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d123      	bne.n	800258e <UART_SetConfig+0x1be>
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <UART_SetConfig+0x328>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800254e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002552:	d012      	beq.n	800257a <UART_SetConfig+0x1aa>
 8002554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002558:	d802      	bhi.n	8002560 <UART_SetConfig+0x190>
 800255a:	2b00      	cmp	r3, #0
 800255c:	d007      	beq.n	800256e <UART_SetConfig+0x19e>
 800255e:	e012      	b.n	8002586 <UART_SetConfig+0x1b6>
 8002560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002564:	d00c      	beq.n	8002580 <UART_SetConfig+0x1b0>
 8002566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800256a:	d003      	beq.n	8002574 <UART_SetConfig+0x1a4>
 800256c:	e00b      	b.n	8002586 <UART_SetConfig+0x1b6>
 800256e:	2300      	movs	r3, #0
 8002570:	77fb      	strb	r3, [r7, #31]
 8002572:	e037      	b.n	80025e4 <UART_SetConfig+0x214>
 8002574:	2302      	movs	r3, #2
 8002576:	77fb      	strb	r3, [r7, #31]
 8002578:	e034      	b.n	80025e4 <UART_SetConfig+0x214>
 800257a:	2304      	movs	r3, #4
 800257c:	77fb      	strb	r3, [r7, #31]
 800257e:	e031      	b.n	80025e4 <UART_SetConfig+0x214>
 8002580:	2308      	movs	r3, #8
 8002582:	77fb      	strb	r3, [r7, #31]
 8002584:	e02e      	b.n	80025e4 <UART_SetConfig+0x214>
 8002586:	2310      	movs	r3, #16
 8002588:	77fb      	strb	r3, [r7, #31]
 800258a:	bf00      	nop
 800258c:	e02a      	b.n	80025e4 <UART_SetConfig+0x214>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5d      	ldr	r2, [pc, #372]	; (8002708 <UART_SetConfig+0x338>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d123      	bne.n	80025e0 <UART_SetConfig+0x210>
 8002598:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <UART_SetConfig+0x328>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80025a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a4:	d012      	beq.n	80025cc <UART_SetConfig+0x1fc>
 80025a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025aa:	d802      	bhi.n	80025b2 <UART_SetConfig+0x1e2>
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d007      	beq.n	80025c0 <UART_SetConfig+0x1f0>
 80025b0:	e012      	b.n	80025d8 <UART_SetConfig+0x208>
 80025b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b6:	d00c      	beq.n	80025d2 <UART_SetConfig+0x202>
 80025b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025bc:	d003      	beq.n	80025c6 <UART_SetConfig+0x1f6>
 80025be:	e00b      	b.n	80025d8 <UART_SetConfig+0x208>
 80025c0:	2300      	movs	r3, #0
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e00e      	b.n	80025e4 <UART_SetConfig+0x214>
 80025c6:	2302      	movs	r3, #2
 80025c8:	77fb      	strb	r3, [r7, #31]
 80025ca:	e00b      	b.n	80025e4 <UART_SetConfig+0x214>
 80025cc:	2304      	movs	r3, #4
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e008      	b.n	80025e4 <UART_SetConfig+0x214>
 80025d2:	2308      	movs	r3, #8
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e005      	b.n	80025e4 <UART_SetConfig+0x214>
 80025d8:	2310      	movs	r3, #16
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	bf00      	nop
 80025de:	e001      	b.n	80025e4 <UART_SetConfig+0x214>
 80025e0:	2310      	movs	r3, #16
 80025e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ec:	f040 808e 	bne.w	800270c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d85e      	bhi.n	80026b4 <UART_SetConfig+0x2e4>
 80025f6:	a201      	add	r2, pc, #4	; (adr r2, 80025fc <UART_SetConfig+0x22c>)
 80025f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fc:	08002621 	.word	0x08002621
 8002600:	08002641 	.word	0x08002641
 8002604:	08002661 	.word	0x08002661
 8002608:	080026b5 	.word	0x080026b5
 800260c:	0800267d 	.word	0x0800267d
 8002610:	080026b5 	.word	0x080026b5
 8002614:	080026b5 	.word	0x080026b5
 8002618:	080026b5 	.word	0x080026b5
 800261c:	0800269d 	.word	0x0800269d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002620:	f7ff fc00 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8002624:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	61bb      	str	r3, [r7, #24]
        break;
 800263e:	e03c      	b.n	80026ba <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff fc12 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 8002644:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	005a      	lsls	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	b29b      	uxth	r3, r3
 800265c:	61bb      	str	r3, [r7, #24]
        break;
 800265e:	e02c      	b.n	80026ba <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800266a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6852      	ldr	r2, [r2, #4]
 8002672:	fbb3 f3f2 	udiv	r3, r3, r2
 8002676:	b29b      	uxth	r3, r3
 8002678:	61bb      	str	r3, [r7, #24]
        break;
 800267a:	e01e      	b.n	80026ba <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267c:	f7ff fb5c 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8002680:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	005a      	lsls	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	441a      	add	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	b29b      	uxth	r3, r3
 8002698:	61bb      	str	r3, [r7, #24]
        break;
 800269a:	e00e      	b.n	80026ba <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	61bb      	str	r3, [r7, #24]
        break;
 80026b2:	e002      	b.n	80026ba <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
        break;
 80026b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d916      	bls.n	80026ee <UART_SetConfig+0x31e>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d212      	bcs.n	80026ee <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f023 030f 	bic.w	r3, r3, #15
 80026d0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	b29a      	uxth	r2, r3
 80026de:	897b      	ldrh	r3, [r7, #10]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	897a      	ldrh	r2, [r7, #10]
 80026ea:	60da      	str	r2, [r3, #12]
 80026ec:	e07e      	b.n	80027ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
 80026f2:	e07b      	b.n	80027ec <UART_SetConfig+0x41c>
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40004400 	.word	0x40004400
 8002700:	40004800 	.word	0x40004800
 8002704:	40004c00 	.word	0x40004c00
 8002708:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d85b      	bhi.n	80027ca <UART_SetConfig+0x3fa>
 8002712:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <UART_SetConfig+0x348>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	0800273d 	.word	0x0800273d
 800271c:	0800275b 	.word	0x0800275b
 8002720:	08002779 	.word	0x08002779
 8002724:	080027cb 	.word	0x080027cb
 8002728:	08002795 	.word	0x08002795
 800272c:	080027cb 	.word	0x080027cb
 8002730:	080027cb 	.word	0x080027cb
 8002734:	080027cb 	.word	0x080027cb
 8002738:	080027b3 	.word	0x080027b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800273c:	f7ff fb72 	bl	8001e24 <HAL_RCC_GetPCLK1Freq>
 8002740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	085a      	lsrs	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	441a      	add	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	61bb      	str	r3, [r7, #24]
        break;
 8002758:	e03a      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800275a:	f7ff fb85 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 800275e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	085a      	lsrs	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002772:	b29b      	uxth	r3, r3
 8002774:	61bb      	str	r3, [r7, #24]
        break;
 8002776:	e02b      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002782:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6852      	ldr	r2, [r2, #4]
 800278a:	fbb3 f3f2 	udiv	r3, r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	61bb      	str	r3, [r7, #24]
        break;
 8002792:	e01d      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002794:	f7ff fad0 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8002798:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	085a      	lsrs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	441a      	add	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	61bb      	str	r3, [r7, #24]
        break;
 80027b0:	e00e      	b.n	80027d0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	61bb      	str	r3, [r7, #24]
        break;
 80027c8:	e002      	b.n	80027d0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
        break;
 80027ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	d908      	bls.n	80027e8 <UART_SetConfig+0x418>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d204      	bcs.n	80027e8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	e001      	b.n	80027ec <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80027f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop

08002804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01a      	beq.n	800291a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002902:	d10a      	bne.n	800291a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	430a      	orrs	r2, r1
 800293a:	605a      	str	r2, [r3, #4]
  }
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002956:	f7fd feff 	bl	8000758 <HAL_GetTick>
 800295a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d10e      	bne.n	8002988 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800296a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f82a 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e020      	b.n	80029ca <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b04      	cmp	r3, #4
 8002994:	d10e      	bne.n	80029b4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002996:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f814 	bl	80029d2 <UART_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e00a      	b.n	80029ca <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	4613      	mov	r3, r2
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e2:	e05d      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d059      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fd feb4 	bl	8000758 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11b      	bne.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e042      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d02b      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a56:	d123      	bne.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a60:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a70:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2220      	movs	r2, #32
 8002a86:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d092      	beq.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <__errno>:
 8002ac8:	4b01      	ldr	r3, [pc, #4]	; (8002ad0 <__errno+0x8>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000000c 	.word	0x2000000c

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4e0d      	ldr	r6, [pc, #52]	; (8002b0c <__libc_init_array+0x38>)
 8002ad8:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002ada:	1ba4      	subs	r4, r4, r6
 8002adc:	10a4      	asrs	r4, r4, #2
 8002ade:	2500      	movs	r5, #0
 8002ae0:	42a5      	cmp	r5, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	4e0b      	ldr	r6, [pc, #44]	; (8002b14 <__libc_init_array+0x40>)
 8002ae6:	4c0c      	ldr	r4, [pc, #48]	; (8002b18 <__libc_init_array+0x44>)
 8002ae8:	f000 fc26 	bl	8003338 <_init>
 8002aec:	1ba4      	subs	r4, r4, r6
 8002aee:	10a4      	asrs	r4, r4, #2
 8002af0:	2500      	movs	r5, #0
 8002af2:	42a5      	cmp	r5, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002afc:	4798      	blx	r3
 8002afe:	3501      	adds	r5, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b06:	4798      	blx	r3
 8002b08:	3501      	adds	r5, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	080033e4 	.word	0x080033e4
 8002b10:	080033e4 	.word	0x080033e4
 8002b14:	080033e4 	.word	0x080033e4
 8002b18:	080033e8 	.word	0x080033e8

08002b1c <memset>:
 8002b1c:	4402      	add	r2, r0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <_vsiprintf_r>:
 8002b2c:	b500      	push	{lr}
 8002b2e:	b09b      	sub	sp, #108	; 0x6c
 8002b30:	9100      	str	r1, [sp, #0]
 8002b32:	9104      	str	r1, [sp, #16]
 8002b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b38:	9105      	str	r1, [sp, #20]
 8002b3a:	9102      	str	r1, [sp, #8]
 8002b3c:	4905      	ldr	r1, [pc, #20]	; (8002b54 <_vsiprintf_r+0x28>)
 8002b3e:	9103      	str	r1, [sp, #12]
 8002b40:	4669      	mov	r1, sp
 8002b42:	f000 f86d 	bl	8002c20 <_svfiprintf_r>
 8002b46:	9b00      	ldr	r3, [sp, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	b01b      	add	sp, #108	; 0x6c
 8002b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b52:	bf00      	nop
 8002b54:	ffff0208 	.word	0xffff0208

08002b58 <vsiprintf>:
 8002b58:	4613      	mov	r3, r2
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	4802      	ldr	r0, [pc, #8]	; (8002b68 <vsiprintf+0x10>)
 8002b60:	6800      	ldr	r0, [r0, #0]
 8002b62:	f7ff bfe3 	b.w	8002b2c <_vsiprintf_r>
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c

08002b6c <__ssputs_r>:
 8002b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b70:	688e      	ldr	r6, [r1, #8]
 8002b72:	429e      	cmp	r6, r3
 8002b74:	4682      	mov	sl, r0
 8002b76:	460c      	mov	r4, r1
 8002b78:	4690      	mov	r8, r2
 8002b7a:	4699      	mov	r9, r3
 8002b7c:	d837      	bhi.n	8002bee <__ssputs_r+0x82>
 8002b7e:	898a      	ldrh	r2, [r1, #12]
 8002b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b84:	d031      	beq.n	8002bea <__ssputs_r+0x7e>
 8002b86:	6825      	ldr	r5, [r4, #0]
 8002b88:	6909      	ldr	r1, [r1, #16]
 8002b8a:	1a6f      	subs	r7, r5, r1
 8002b8c:	6965      	ldr	r5, [r4, #20]
 8002b8e:	2302      	movs	r3, #2
 8002b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b94:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b98:	f109 0301 	add.w	r3, r9, #1
 8002b9c:	443b      	add	r3, r7
 8002b9e:	429d      	cmp	r5, r3
 8002ba0:	bf38      	it	cc
 8002ba2:	461d      	movcc	r5, r3
 8002ba4:	0553      	lsls	r3, r2, #21
 8002ba6:	d530      	bpl.n	8002c0a <__ssputs_r+0x9e>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f000 fb2b 	bl	8003204 <_malloc_r>
 8002bae:	4606      	mov	r6, r0
 8002bb0:	b950      	cbnz	r0, 8002bc8 <__ssputs_r+0x5c>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	f8ca 3000 	str.w	r3, [sl]
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbe:	81a3      	strh	r3, [r4, #12]
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc8:	463a      	mov	r2, r7
 8002bca:	6921      	ldr	r1, [r4, #16]
 8002bcc:	f000 faa8 	bl	8003120 <memcpy>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	6126      	str	r6, [r4, #16]
 8002bde:	6165      	str	r5, [r4, #20]
 8002be0:	443e      	add	r6, r7
 8002be2:	1bed      	subs	r5, r5, r7
 8002be4:	6026      	str	r6, [r4, #0]
 8002be6:	60a5      	str	r5, [r4, #8]
 8002be8:	464e      	mov	r6, r9
 8002bea:	454e      	cmp	r6, r9
 8002bec:	d900      	bls.n	8002bf0 <__ssputs_r+0x84>
 8002bee:	464e      	mov	r6, r9
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	4641      	mov	r1, r8
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	f000 fa9e 	bl	8003136 <memmove>
 8002bfa:	68a3      	ldr	r3, [r4, #8]
 8002bfc:	1b9b      	subs	r3, r3, r6
 8002bfe:	60a3      	str	r3, [r4, #8]
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	441e      	add	r6, r3
 8002c04:	6026      	str	r6, [r4, #0]
 8002c06:	2000      	movs	r0, #0
 8002c08:	e7dc      	b.n	8002bc4 <__ssputs_r+0x58>
 8002c0a:	462a      	mov	r2, r5
 8002c0c:	f000 fb54 	bl	80032b8 <_realloc_r>
 8002c10:	4606      	mov	r6, r0
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d1e2      	bne.n	8002bdc <__ssputs_r+0x70>
 8002c16:	6921      	ldr	r1, [r4, #16]
 8002c18:	4650      	mov	r0, sl
 8002c1a:	f000 faa5 	bl	8003168 <_free_r>
 8002c1e:	e7c8      	b.n	8002bb2 <__ssputs_r+0x46>

08002c20 <_svfiprintf_r>:
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	461d      	mov	r5, r3
 8002c26:	898b      	ldrh	r3, [r1, #12]
 8002c28:	061f      	lsls	r7, r3, #24
 8002c2a:	b09d      	sub	sp, #116	; 0x74
 8002c2c:	4680      	mov	r8, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	4616      	mov	r6, r2
 8002c32:	d50f      	bpl.n	8002c54 <_svfiprintf_r+0x34>
 8002c34:	690b      	ldr	r3, [r1, #16]
 8002c36:	b96b      	cbnz	r3, 8002c54 <_svfiprintf_r+0x34>
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	f000 fae3 	bl	8003204 <_malloc_r>
 8002c3e:	6020      	str	r0, [r4, #0]
 8002c40:	6120      	str	r0, [r4, #16]
 8002c42:	b928      	cbnz	r0, 8002c50 <_svfiprintf_r+0x30>
 8002c44:	230c      	movs	r3, #12
 8002c46:	f8c8 3000 	str.w	r3, [r8]
 8002c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4e:	e0c8      	b.n	8002de2 <_svfiprintf_r+0x1c2>
 8002c50:	2340      	movs	r3, #64	; 0x40
 8002c52:	6163      	str	r3, [r4, #20]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9309      	str	r3, [sp, #36]	; 0x24
 8002c58:	2320      	movs	r3, #32
 8002c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c5e:	2330      	movs	r3, #48	; 0x30
 8002c60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c64:	9503      	str	r5, [sp, #12]
 8002c66:	f04f 0b01 	mov.w	fp, #1
 8002c6a:	4637      	mov	r7, r6
 8002c6c:	463d      	mov	r5, r7
 8002c6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c72:	b10b      	cbz	r3, 8002c78 <_svfiprintf_r+0x58>
 8002c74:	2b25      	cmp	r3, #37	; 0x25
 8002c76:	d13e      	bne.n	8002cf6 <_svfiprintf_r+0xd6>
 8002c78:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c7c:	d00b      	beq.n	8002c96 <_svfiprintf_r+0x76>
 8002c7e:	4653      	mov	r3, sl
 8002c80:	4632      	mov	r2, r6
 8002c82:	4621      	mov	r1, r4
 8002c84:	4640      	mov	r0, r8
 8002c86:	f7ff ff71 	bl	8002b6c <__ssputs_r>
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	f000 80a4 	beq.w	8002dd8 <_svfiprintf_r+0x1b8>
 8002c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c92:	4453      	add	r3, sl
 8002c94:	9309      	str	r3, [sp, #36]	; 0x24
 8002c96:	783b      	ldrb	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 809d 	beq.w	8002dd8 <_svfiprintf_r+0x1b8>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	9307      	str	r3, [sp, #28]
 8002cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8002cb2:	462f      	mov	r7, r5
 8002cb4:	2205      	movs	r2, #5
 8002cb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002cba:	4850      	ldr	r0, [pc, #320]	; (8002dfc <_svfiprintf_r+0x1dc>)
 8002cbc:	f7fd fa90 	bl	80001e0 <memchr>
 8002cc0:	9b04      	ldr	r3, [sp, #16]
 8002cc2:	b9d0      	cbnz	r0, 8002cfa <_svfiprintf_r+0xda>
 8002cc4:	06d9      	lsls	r1, r3, #27
 8002cc6:	bf44      	itt	mi
 8002cc8:	2220      	movmi	r2, #32
 8002cca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cce:	071a      	lsls	r2, r3, #28
 8002cd0:	bf44      	itt	mi
 8002cd2:	222b      	movmi	r2, #43	; 0x2b
 8002cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cd8:	782a      	ldrb	r2, [r5, #0]
 8002cda:	2a2a      	cmp	r2, #42	; 0x2a
 8002cdc:	d015      	beq.n	8002d0a <_svfiprintf_r+0xea>
 8002cde:	9a07      	ldr	r2, [sp, #28]
 8002ce0:	462f      	mov	r7, r5
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	250a      	movs	r5, #10
 8002ce6:	4639      	mov	r1, r7
 8002ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cec:	3b30      	subs	r3, #48	; 0x30
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	d94d      	bls.n	8002d8e <_svfiprintf_r+0x16e>
 8002cf2:	b1b8      	cbz	r0, 8002d24 <_svfiprintf_r+0x104>
 8002cf4:	e00f      	b.n	8002d16 <_svfiprintf_r+0xf6>
 8002cf6:	462f      	mov	r7, r5
 8002cf8:	e7b8      	b.n	8002c6c <_svfiprintf_r+0x4c>
 8002cfa:	4a40      	ldr	r2, [pc, #256]	; (8002dfc <_svfiprintf_r+0x1dc>)
 8002cfc:	1a80      	subs	r0, r0, r2
 8002cfe:	fa0b f000 	lsl.w	r0, fp, r0
 8002d02:	4318      	orrs	r0, r3
 8002d04:	9004      	str	r0, [sp, #16]
 8002d06:	463d      	mov	r5, r7
 8002d08:	e7d3      	b.n	8002cb2 <_svfiprintf_r+0x92>
 8002d0a:	9a03      	ldr	r2, [sp, #12]
 8002d0c:	1d11      	adds	r1, r2, #4
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	9103      	str	r1, [sp, #12]
 8002d12:	2a00      	cmp	r2, #0
 8002d14:	db01      	blt.n	8002d1a <_svfiprintf_r+0xfa>
 8002d16:	9207      	str	r2, [sp, #28]
 8002d18:	e004      	b.n	8002d24 <_svfiprintf_r+0x104>
 8002d1a:	4252      	negs	r2, r2
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	9207      	str	r2, [sp, #28]
 8002d22:	9304      	str	r3, [sp, #16]
 8002d24:	783b      	ldrb	r3, [r7, #0]
 8002d26:	2b2e      	cmp	r3, #46	; 0x2e
 8002d28:	d10c      	bne.n	8002d44 <_svfiprintf_r+0x124>
 8002d2a:	787b      	ldrb	r3, [r7, #1]
 8002d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d2e:	d133      	bne.n	8002d98 <_svfiprintf_r+0x178>
 8002d30:	9b03      	ldr	r3, [sp, #12]
 8002d32:	1d1a      	adds	r2, r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	9203      	str	r2, [sp, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bfb8      	it	lt
 8002d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d40:	3702      	adds	r7, #2
 8002d42:	9305      	str	r3, [sp, #20]
 8002d44:	4d2e      	ldr	r5, [pc, #184]	; (8002e00 <_svfiprintf_r+0x1e0>)
 8002d46:	7839      	ldrb	r1, [r7, #0]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f7fd fa48 	bl	80001e0 <memchr>
 8002d50:	b138      	cbz	r0, 8002d62 <_svfiprintf_r+0x142>
 8002d52:	2340      	movs	r3, #64	; 0x40
 8002d54:	1b40      	subs	r0, r0, r5
 8002d56:	fa03 f000 	lsl.w	r0, r3, r0
 8002d5a:	9b04      	ldr	r3, [sp, #16]
 8002d5c:	4303      	orrs	r3, r0
 8002d5e:	3701      	adds	r7, #1
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	7839      	ldrb	r1, [r7, #0]
 8002d64:	4827      	ldr	r0, [pc, #156]	; (8002e04 <_svfiprintf_r+0x1e4>)
 8002d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d6a:	2206      	movs	r2, #6
 8002d6c:	1c7e      	adds	r6, r7, #1
 8002d6e:	f7fd fa37 	bl	80001e0 <memchr>
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d038      	beq.n	8002de8 <_svfiprintf_r+0x1c8>
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <_svfiprintf_r+0x1e8>)
 8002d78:	bb13      	cbnz	r3, 8002dc0 <_svfiprintf_r+0x1a0>
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	f023 0307 	bic.w	r3, r3, #7
 8002d82:	3308      	adds	r3, #8
 8002d84:	9303      	str	r3, [sp, #12]
 8002d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d88:	444b      	add	r3, r9
 8002d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8c:	e76d      	b.n	8002c6a <_svfiprintf_r+0x4a>
 8002d8e:	fb05 3202 	mla	r2, r5, r2, r3
 8002d92:	2001      	movs	r0, #1
 8002d94:	460f      	mov	r7, r1
 8002d96:	e7a6      	b.n	8002ce6 <_svfiprintf_r+0xc6>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	3701      	adds	r7, #1
 8002d9c:	9305      	str	r3, [sp, #20]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	250a      	movs	r5, #10
 8002da2:	4638      	mov	r0, r7
 8002da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002da8:	3a30      	subs	r2, #48	; 0x30
 8002daa:	2a09      	cmp	r2, #9
 8002dac:	d903      	bls.n	8002db6 <_svfiprintf_r+0x196>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0c8      	beq.n	8002d44 <_svfiprintf_r+0x124>
 8002db2:	9105      	str	r1, [sp, #20]
 8002db4:	e7c6      	b.n	8002d44 <_svfiprintf_r+0x124>
 8002db6:	fb05 2101 	mla	r1, r5, r1, r2
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4607      	mov	r7, r0
 8002dbe:	e7f0      	b.n	8002da2 <_svfiprintf_r+0x182>
 8002dc0:	ab03      	add	r3, sp, #12
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <_svfiprintf_r+0x1ec>)
 8002dc8:	a904      	add	r1, sp, #16
 8002dca:	4640      	mov	r0, r8
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002dd4:	4681      	mov	r9, r0
 8002dd6:	d1d6      	bne.n	8002d86 <_svfiprintf_r+0x166>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	065b      	lsls	r3, r3, #25
 8002ddc:	f53f af35 	bmi.w	8002c4a <_svfiprintf_r+0x2a>
 8002de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002de2:	b01d      	add	sp, #116	; 0x74
 8002de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002de8:	ab03      	add	r3, sp, #12
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4622      	mov	r2, r4
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <_svfiprintf_r+0x1ec>)
 8002df0:	a904      	add	r1, sp, #16
 8002df2:	4640      	mov	r0, r8
 8002df4:	f000 f882 	bl	8002efc <_printf_i>
 8002df8:	e7ea      	b.n	8002dd0 <_svfiprintf_r+0x1b0>
 8002dfa:	bf00      	nop
 8002dfc:	080033b0 	.word	0x080033b0
 8002e00:	080033b6 	.word	0x080033b6
 8002e04:	080033ba 	.word	0x080033ba
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	08002b6d 	.word	0x08002b6d

08002e10 <_printf_common>:
 8002e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e14:	4691      	mov	r9, r2
 8002e16:	461f      	mov	r7, r3
 8002e18:	688a      	ldr	r2, [r1, #8]
 8002e1a:	690b      	ldr	r3, [r1, #16]
 8002e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bfb8      	it	lt
 8002e24:	4613      	movlt	r3, r2
 8002e26:	f8c9 3000 	str.w	r3, [r9]
 8002e2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e2e:	4606      	mov	r6, r0
 8002e30:	460c      	mov	r4, r1
 8002e32:	b112      	cbz	r2, 8002e3a <_printf_common+0x2a>
 8002e34:	3301      	adds	r3, #1
 8002e36:	f8c9 3000 	str.w	r3, [r9]
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	0699      	lsls	r1, r3, #26
 8002e3e:	bf42      	ittt	mi
 8002e40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e44:	3302      	addmi	r3, #2
 8002e46:	f8c9 3000 	strmi.w	r3, [r9]
 8002e4a:	6825      	ldr	r5, [r4, #0]
 8002e4c:	f015 0506 	ands.w	r5, r5, #6
 8002e50:	d107      	bne.n	8002e62 <_printf_common+0x52>
 8002e52:	f104 0a19 	add.w	sl, r4, #25
 8002e56:	68e3      	ldr	r3, [r4, #12]
 8002e58:	f8d9 2000 	ldr.w	r2, [r9]
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	42ab      	cmp	r3, r5
 8002e60:	dc28      	bgt.n	8002eb4 <_printf_common+0xa4>
 8002e62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	3300      	adds	r3, #0
 8002e6a:	bf18      	it	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	0692      	lsls	r2, r2, #26
 8002e70:	d42d      	bmi.n	8002ece <_printf_common+0xbe>
 8002e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e76:	4639      	mov	r1, r7
 8002e78:	4630      	mov	r0, r6
 8002e7a:	47c0      	blx	r8
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d020      	beq.n	8002ec2 <_printf_common+0xb2>
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	68e5      	ldr	r5, [r4, #12]
 8002e84:	f8d9 2000 	ldr.w	r2, [r9]
 8002e88:	f003 0306 	and.w	r3, r3, #6
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	bf08      	it	eq
 8002e90:	1aad      	subeq	r5, r5, r2
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	6922      	ldr	r2, [r4, #16]
 8002e96:	bf0c      	ite	eq
 8002e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e9c:	2500      	movne	r5, #0
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	bfc4      	itt	gt
 8002ea2:	1a9b      	subgt	r3, r3, r2
 8002ea4:	18ed      	addgt	r5, r5, r3
 8002ea6:	f04f 0900 	mov.w	r9, #0
 8002eaa:	341a      	adds	r4, #26
 8002eac:	454d      	cmp	r5, r9
 8002eae:	d11a      	bne.n	8002ee6 <_printf_common+0xd6>
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	e008      	b.n	8002ec6 <_printf_common+0xb6>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4652      	mov	r2, sl
 8002eb8:	4639      	mov	r1, r7
 8002eba:	4630      	mov	r0, r6
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d103      	bne.n	8002eca <_printf_common+0xba>
 8002ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eca:	3501      	adds	r5, #1
 8002ecc:	e7c3      	b.n	8002e56 <_printf_common+0x46>
 8002ece:	18e1      	adds	r1, r4, r3
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	2030      	movs	r0, #48	; 0x30
 8002ed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ed8:	4422      	add	r2, r4
 8002eda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	e7c5      	b.n	8002e72 <_printf_common+0x62>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	4622      	mov	r2, r4
 8002eea:	4639      	mov	r1, r7
 8002eec:	4630      	mov	r0, r6
 8002eee:	47c0      	blx	r8
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d0e6      	beq.n	8002ec2 <_printf_common+0xb2>
 8002ef4:	f109 0901 	add.w	r9, r9, #1
 8002ef8:	e7d8      	b.n	8002eac <_printf_common+0x9c>
	...

08002efc <_printf_i>:
 8002efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002f04:	460c      	mov	r4, r1
 8002f06:	7e09      	ldrb	r1, [r1, #24]
 8002f08:	b085      	sub	sp, #20
 8002f0a:	296e      	cmp	r1, #110	; 0x6e
 8002f0c:	4617      	mov	r7, r2
 8002f0e:	4606      	mov	r6, r0
 8002f10:	4698      	mov	r8, r3
 8002f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f14:	f000 80b3 	beq.w	800307e <_printf_i+0x182>
 8002f18:	d822      	bhi.n	8002f60 <_printf_i+0x64>
 8002f1a:	2963      	cmp	r1, #99	; 0x63
 8002f1c:	d036      	beq.n	8002f8c <_printf_i+0x90>
 8002f1e:	d80a      	bhi.n	8002f36 <_printf_i+0x3a>
 8002f20:	2900      	cmp	r1, #0
 8002f22:	f000 80b9 	beq.w	8003098 <_printf_i+0x19c>
 8002f26:	2958      	cmp	r1, #88	; 0x58
 8002f28:	f000 8083 	beq.w	8003032 <_printf_i+0x136>
 8002f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f34:	e032      	b.n	8002f9c <_printf_i+0xa0>
 8002f36:	2964      	cmp	r1, #100	; 0x64
 8002f38:	d001      	beq.n	8002f3e <_printf_i+0x42>
 8002f3a:	2969      	cmp	r1, #105	; 0x69
 8002f3c:	d1f6      	bne.n	8002f2c <_printf_i+0x30>
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	6813      	ldr	r3, [r2, #0]
 8002f42:	0605      	lsls	r5, r0, #24
 8002f44:	f103 0104 	add.w	r1, r3, #4
 8002f48:	d52a      	bpl.n	8002fa0 <_printf_i+0xa4>
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da03      	bge.n	8002f5a <_printf_i+0x5e>
 8002f52:	222d      	movs	r2, #45	; 0x2d
 8002f54:	425b      	negs	r3, r3
 8002f56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f5a:	486f      	ldr	r0, [pc, #444]	; (8003118 <_printf_i+0x21c>)
 8002f5c:	220a      	movs	r2, #10
 8002f5e:	e039      	b.n	8002fd4 <_printf_i+0xd8>
 8002f60:	2973      	cmp	r1, #115	; 0x73
 8002f62:	f000 809d 	beq.w	80030a0 <_printf_i+0x1a4>
 8002f66:	d808      	bhi.n	8002f7a <_printf_i+0x7e>
 8002f68:	296f      	cmp	r1, #111	; 0x6f
 8002f6a:	d020      	beq.n	8002fae <_printf_i+0xb2>
 8002f6c:	2970      	cmp	r1, #112	; 0x70
 8002f6e:	d1dd      	bne.n	8002f2c <_printf_i+0x30>
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	e003      	b.n	8002f82 <_printf_i+0x86>
 8002f7a:	2975      	cmp	r1, #117	; 0x75
 8002f7c:	d017      	beq.n	8002fae <_printf_i+0xb2>
 8002f7e:	2978      	cmp	r1, #120	; 0x78
 8002f80:	d1d4      	bne.n	8002f2c <_printf_i+0x30>
 8002f82:	2378      	movs	r3, #120	; 0x78
 8002f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f88:	4864      	ldr	r0, [pc, #400]	; (800311c <_printf_i+0x220>)
 8002f8a:	e055      	b.n	8003038 <_printf_i+0x13c>
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	1d19      	adds	r1, r3, #4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6011      	str	r1, [r2, #0]
 8002f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e08c      	b.n	80030ba <_printf_i+0x1be>
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6011      	str	r1, [r2, #0]
 8002fa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002fa8:	bf18      	it	ne
 8002faa:	b21b      	sxthne	r3, r3
 8002fac:	e7cf      	b.n	8002f4e <_printf_i+0x52>
 8002fae:	6813      	ldr	r3, [r2, #0]
 8002fb0:	6825      	ldr	r5, [r4, #0]
 8002fb2:	1d18      	adds	r0, r3, #4
 8002fb4:	6010      	str	r0, [r2, #0]
 8002fb6:	0628      	lsls	r0, r5, #24
 8002fb8:	d501      	bpl.n	8002fbe <_printf_i+0xc2>
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e002      	b.n	8002fc4 <_printf_i+0xc8>
 8002fbe:	0668      	lsls	r0, r5, #25
 8002fc0:	d5fb      	bpl.n	8002fba <_printf_i+0xbe>
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	4854      	ldr	r0, [pc, #336]	; (8003118 <_printf_i+0x21c>)
 8002fc6:	296f      	cmp	r1, #111	; 0x6f
 8002fc8:	bf14      	ite	ne
 8002fca:	220a      	movne	r2, #10
 8002fcc:	2208      	moveq	r2, #8
 8002fce:	2100      	movs	r1, #0
 8002fd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fd4:	6865      	ldr	r5, [r4, #4]
 8002fd6:	60a5      	str	r5, [r4, #8]
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	f2c0 8095 	blt.w	8003108 <_printf_i+0x20c>
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	f021 0104 	bic.w	r1, r1, #4
 8002fe4:	6021      	str	r1, [r4, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d13d      	bne.n	8003066 <_printf_i+0x16a>
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	f040 808e 	bne.w	800310c <_printf_i+0x210>
 8002ff0:	4665      	mov	r5, ip
 8002ff2:	2a08      	cmp	r2, #8
 8002ff4:	d10b      	bne.n	800300e <_printf_i+0x112>
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	07db      	lsls	r3, r3, #31
 8002ffa:	d508      	bpl.n	800300e <_printf_i+0x112>
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	6862      	ldr	r2, [r4, #4]
 8003000:	429a      	cmp	r2, r3
 8003002:	bfde      	ittt	le
 8003004:	2330      	movle	r3, #48	; 0x30
 8003006:	f805 3c01 	strble.w	r3, [r5, #-1]
 800300a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800300e:	ebac 0305 	sub.w	r3, ip, r5
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	f8cd 8000 	str.w	r8, [sp]
 8003018:	463b      	mov	r3, r7
 800301a:	aa03      	add	r2, sp, #12
 800301c:	4621      	mov	r1, r4
 800301e:	4630      	mov	r0, r6
 8003020:	f7ff fef6 	bl	8002e10 <_printf_common>
 8003024:	3001      	adds	r0, #1
 8003026:	d14d      	bne.n	80030c4 <_printf_i+0x1c8>
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	b005      	add	sp, #20
 800302e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003032:	4839      	ldr	r0, [pc, #228]	; (8003118 <_printf_i+0x21c>)
 8003034:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003038:	6813      	ldr	r3, [r2, #0]
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	1d1d      	adds	r5, r3, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6015      	str	r5, [r2, #0]
 8003042:	060a      	lsls	r2, r1, #24
 8003044:	d50b      	bpl.n	800305e <_printf_i+0x162>
 8003046:	07ca      	lsls	r2, r1, #31
 8003048:	bf44      	itt	mi
 800304a:	f041 0120 	orrmi.w	r1, r1, #32
 800304e:	6021      	strmi	r1, [r4, #0]
 8003050:	b91b      	cbnz	r3, 800305a <_printf_i+0x15e>
 8003052:	6822      	ldr	r2, [r4, #0]
 8003054:	f022 0220 	bic.w	r2, r2, #32
 8003058:	6022      	str	r2, [r4, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	e7b7      	b.n	8002fce <_printf_i+0xd2>
 800305e:	064d      	lsls	r5, r1, #25
 8003060:	bf48      	it	mi
 8003062:	b29b      	uxthmi	r3, r3
 8003064:	e7ef      	b.n	8003046 <_printf_i+0x14a>
 8003066:	4665      	mov	r5, ip
 8003068:	fbb3 f1f2 	udiv	r1, r3, r2
 800306c:	fb02 3311 	mls	r3, r2, r1, r3
 8003070:	5cc3      	ldrb	r3, [r0, r3]
 8003072:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003076:	460b      	mov	r3, r1
 8003078:	2900      	cmp	r1, #0
 800307a:	d1f5      	bne.n	8003068 <_printf_i+0x16c>
 800307c:	e7b9      	b.n	8002ff2 <_printf_i+0xf6>
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	6825      	ldr	r5, [r4, #0]
 8003082:	6961      	ldr	r1, [r4, #20]
 8003084:	1d18      	adds	r0, r3, #4
 8003086:	6010      	str	r0, [r2, #0]
 8003088:	0628      	lsls	r0, r5, #24
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	d501      	bpl.n	8003092 <_printf_i+0x196>
 800308e:	6019      	str	r1, [r3, #0]
 8003090:	e002      	b.n	8003098 <_printf_i+0x19c>
 8003092:	066a      	lsls	r2, r5, #25
 8003094:	d5fb      	bpl.n	800308e <_printf_i+0x192>
 8003096:	8019      	strh	r1, [r3, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	6123      	str	r3, [r4, #16]
 800309c:	4665      	mov	r5, ip
 800309e:	e7b9      	b.n	8003014 <_printf_i+0x118>
 80030a0:	6813      	ldr	r3, [r2, #0]
 80030a2:	1d19      	adds	r1, r3, #4
 80030a4:	6011      	str	r1, [r2, #0]
 80030a6:	681d      	ldr	r5, [r3, #0]
 80030a8:	6862      	ldr	r2, [r4, #4]
 80030aa:	2100      	movs	r1, #0
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7fd f897 	bl	80001e0 <memchr>
 80030b2:	b108      	cbz	r0, 80030b8 <_printf_i+0x1bc>
 80030b4:	1b40      	subs	r0, r0, r5
 80030b6:	6060      	str	r0, [r4, #4]
 80030b8:	6863      	ldr	r3, [r4, #4]
 80030ba:	6123      	str	r3, [r4, #16]
 80030bc:	2300      	movs	r3, #0
 80030be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c2:	e7a7      	b.n	8003014 <_printf_i+0x118>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	462a      	mov	r2, r5
 80030c8:	4639      	mov	r1, r7
 80030ca:	4630      	mov	r0, r6
 80030cc:	47c0      	blx	r8
 80030ce:	3001      	adds	r0, #1
 80030d0:	d0aa      	beq.n	8003028 <_printf_i+0x12c>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	079b      	lsls	r3, r3, #30
 80030d6:	d413      	bmi.n	8003100 <_printf_i+0x204>
 80030d8:	68e0      	ldr	r0, [r4, #12]
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	4298      	cmp	r0, r3
 80030de:	bfb8      	it	lt
 80030e0:	4618      	movlt	r0, r3
 80030e2:	e7a3      	b.n	800302c <_printf_i+0x130>
 80030e4:	2301      	movs	r3, #1
 80030e6:	464a      	mov	r2, r9
 80030e8:	4639      	mov	r1, r7
 80030ea:	4630      	mov	r0, r6
 80030ec:	47c0      	blx	r8
 80030ee:	3001      	adds	r0, #1
 80030f0:	d09a      	beq.n	8003028 <_printf_i+0x12c>
 80030f2:	3501      	adds	r5, #1
 80030f4:	68e3      	ldr	r3, [r4, #12]
 80030f6:	9a03      	ldr	r2, [sp, #12]
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	42ab      	cmp	r3, r5
 80030fc:	dcf2      	bgt.n	80030e4 <_printf_i+0x1e8>
 80030fe:	e7eb      	b.n	80030d8 <_printf_i+0x1dc>
 8003100:	2500      	movs	r5, #0
 8003102:	f104 0919 	add.w	r9, r4, #25
 8003106:	e7f5      	b.n	80030f4 <_printf_i+0x1f8>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ac      	bne.n	8003066 <_printf_i+0x16a>
 800310c:	7803      	ldrb	r3, [r0, #0]
 800310e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003112:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003116:	e76c      	b.n	8002ff2 <_printf_i+0xf6>
 8003118:	080033c1 	.word	0x080033c1
 800311c:	080033d2 	.word	0x080033d2

08003120 <memcpy>:
 8003120:	b510      	push	{r4, lr}
 8003122:	1e43      	subs	r3, r0, #1
 8003124:	440a      	add	r2, r1
 8003126:	4291      	cmp	r1, r2
 8003128:	d100      	bne.n	800312c <memcpy+0xc>
 800312a:	bd10      	pop	{r4, pc}
 800312c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003134:	e7f7      	b.n	8003126 <memcpy+0x6>

08003136 <memmove>:
 8003136:	4288      	cmp	r0, r1
 8003138:	b510      	push	{r4, lr}
 800313a:	eb01 0302 	add.w	r3, r1, r2
 800313e:	d807      	bhi.n	8003150 <memmove+0x1a>
 8003140:	1e42      	subs	r2, r0, #1
 8003142:	4299      	cmp	r1, r3
 8003144:	d00a      	beq.n	800315c <memmove+0x26>
 8003146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800314a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800314e:	e7f8      	b.n	8003142 <memmove+0xc>
 8003150:	4283      	cmp	r3, r0
 8003152:	d9f5      	bls.n	8003140 <memmove+0xa>
 8003154:	1881      	adds	r1, r0, r2
 8003156:	1ad2      	subs	r2, r2, r3
 8003158:	42d3      	cmn	r3, r2
 800315a:	d100      	bne.n	800315e <memmove+0x28>
 800315c:	bd10      	pop	{r4, pc}
 800315e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003162:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003166:	e7f7      	b.n	8003158 <memmove+0x22>

08003168 <_free_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4605      	mov	r5, r0
 800316c:	2900      	cmp	r1, #0
 800316e:	d045      	beq.n	80031fc <_free_r+0x94>
 8003170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003174:	1f0c      	subs	r4, r1, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	bfb8      	it	lt
 800317a:	18e4      	addlt	r4, r4, r3
 800317c:	f000 f8d2 	bl	8003324 <__malloc_lock>
 8003180:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <_free_r+0x98>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	4610      	mov	r0, r2
 8003186:	b933      	cbnz	r3, 8003196 <_free_r+0x2e>
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	6014      	str	r4, [r2, #0]
 800318c:	4628      	mov	r0, r5
 800318e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003192:	f000 b8c8 	b.w	8003326 <__malloc_unlock>
 8003196:	42a3      	cmp	r3, r4
 8003198:	d90c      	bls.n	80031b4 <_free_r+0x4c>
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	1862      	adds	r2, r4, r1
 800319e:	4293      	cmp	r3, r2
 80031a0:	bf04      	itt	eq
 80031a2:	681a      	ldreq	r2, [r3, #0]
 80031a4:	685b      	ldreq	r3, [r3, #4]
 80031a6:	6063      	str	r3, [r4, #4]
 80031a8:	bf04      	itt	eq
 80031aa:	1852      	addeq	r2, r2, r1
 80031ac:	6022      	streq	r2, [r4, #0]
 80031ae:	6004      	str	r4, [r0, #0]
 80031b0:	e7ec      	b.n	800318c <_free_r+0x24>
 80031b2:	4613      	mov	r3, r2
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	b10a      	cbz	r2, 80031bc <_free_r+0x54>
 80031b8:	42a2      	cmp	r2, r4
 80031ba:	d9fa      	bls.n	80031b2 <_free_r+0x4a>
 80031bc:	6819      	ldr	r1, [r3, #0]
 80031be:	1858      	adds	r0, r3, r1
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d10b      	bne.n	80031dc <_free_r+0x74>
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	4401      	add	r1, r0
 80031c8:	1858      	adds	r0, r3, r1
 80031ca:	4282      	cmp	r2, r0
 80031cc:	6019      	str	r1, [r3, #0]
 80031ce:	d1dd      	bne.n	800318c <_free_r+0x24>
 80031d0:	6810      	ldr	r0, [r2, #0]
 80031d2:	6852      	ldr	r2, [r2, #4]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	4401      	add	r1, r0
 80031d8:	6019      	str	r1, [r3, #0]
 80031da:	e7d7      	b.n	800318c <_free_r+0x24>
 80031dc:	d902      	bls.n	80031e4 <_free_r+0x7c>
 80031de:	230c      	movs	r3, #12
 80031e0:	602b      	str	r3, [r5, #0]
 80031e2:	e7d3      	b.n	800318c <_free_r+0x24>
 80031e4:	6820      	ldr	r0, [r4, #0]
 80031e6:	1821      	adds	r1, r4, r0
 80031e8:	428a      	cmp	r2, r1
 80031ea:	bf04      	itt	eq
 80031ec:	6811      	ldreq	r1, [r2, #0]
 80031ee:	6852      	ldreq	r2, [r2, #4]
 80031f0:	6062      	str	r2, [r4, #4]
 80031f2:	bf04      	itt	eq
 80031f4:	1809      	addeq	r1, r1, r0
 80031f6:	6021      	streq	r1, [r4, #0]
 80031f8:	605c      	str	r4, [r3, #4]
 80031fa:	e7c7      	b.n	800318c <_free_r+0x24>
 80031fc:	bd38      	pop	{r3, r4, r5, pc}
 80031fe:	bf00      	nop
 8003200:	20000094 	.word	0x20000094

08003204 <_malloc_r>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	1ccd      	adds	r5, r1, #3
 8003208:	f025 0503 	bic.w	r5, r5, #3
 800320c:	3508      	adds	r5, #8
 800320e:	2d0c      	cmp	r5, #12
 8003210:	bf38      	it	cc
 8003212:	250c      	movcc	r5, #12
 8003214:	2d00      	cmp	r5, #0
 8003216:	4606      	mov	r6, r0
 8003218:	db01      	blt.n	800321e <_malloc_r+0x1a>
 800321a:	42a9      	cmp	r1, r5
 800321c:	d903      	bls.n	8003226 <_malloc_r+0x22>
 800321e:	230c      	movs	r3, #12
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	2000      	movs	r0, #0
 8003224:	bd70      	pop	{r4, r5, r6, pc}
 8003226:	f000 f87d 	bl	8003324 <__malloc_lock>
 800322a:	4a21      	ldr	r2, [pc, #132]	; (80032b0 <_malloc_r+0xac>)
 800322c:	6814      	ldr	r4, [r2, #0]
 800322e:	4621      	mov	r1, r4
 8003230:	b991      	cbnz	r1, 8003258 <_malloc_r+0x54>
 8003232:	4c20      	ldr	r4, [pc, #128]	; (80032b4 <_malloc_r+0xb0>)
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	b91b      	cbnz	r3, 8003240 <_malloc_r+0x3c>
 8003238:	4630      	mov	r0, r6
 800323a:	f000 f863 	bl	8003304 <_sbrk_r>
 800323e:	6020      	str	r0, [r4, #0]
 8003240:	4629      	mov	r1, r5
 8003242:	4630      	mov	r0, r6
 8003244:	f000 f85e 	bl	8003304 <_sbrk_r>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d124      	bne.n	8003296 <_malloc_r+0x92>
 800324c:	230c      	movs	r3, #12
 800324e:	6033      	str	r3, [r6, #0]
 8003250:	4630      	mov	r0, r6
 8003252:	f000 f868 	bl	8003326 <__malloc_unlock>
 8003256:	e7e4      	b.n	8003222 <_malloc_r+0x1e>
 8003258:	680b      	ldr	r3, [r1, #0]
 800325a:	1b5b      	subs	r3, r3, r5
 800325c:	d418      	bmi.n	8003290 <_malloc_r+0x8c>
 800325e:	2b0b      	cmp	r3, #11
 8003260:	d90f      	bls.n	8003282 <_malloc_r+0x7e>
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	50cd      	str	r5, [r1, r3]
 8003266:	18cc      	adds	r4, r1, r3
 8003268:	4630      	mov	r0, r6
 800326a:	f000 f85c 	bl	8003326 <__malloc_unlock>
 800326e:	f104 000b 	add.w	r0, r4, #11
 8003272:	1d23      	adds	r3, r4, #4
 8003274:	f020 0007 	bic.w	r0, r0, #7
 8003278:	1ac3      	subs	r3, r0, r3
 800327a:	d0d3      	beq.n	8003224 <_malloc_r+0x20>
 800327c:	425a      	negs	r2, r3
 800327e:	50e2      	str	r2, [r4, r3]
 8003280:	e7d0      	b.n	8003224 <_malloc_r+0x20>
 8003282:	428c      	cmp	r4, r1
 8003284:	684b      	ldr	r3, [r1, #4]
 8003286:	bf16      	itet	ne
 8003288:	6063      	strne	r3, [r4, #4]
 800328a:	6013      	streq	r3, [r2, #0]
 800328c:	460c      	movne	r4, r1
 800328e:	e7eb      	b.n	8003268 <_malloc_r+0x64>
 8003290:	460c      	mov	r4, r1
 8003292:	6849      	ldr	r1, [r1, #4]
 8003294:	e7cc      	b.n	8003230 <_malloc_r+0x2c>
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d005      	beq.n	80032ac <_malloc_r+0xa8>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f82e 	bl	8003304 <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d0cf      	beq.n	800324c <_malloc_r+0x48>
 80032ac:	6025      	str	r5, [r4, #0]
 80032ae:	e7db      	b.n	8003268 <_malloc_r+0x64>
 80032b0:	20000094 	.word	0x20000094
 80032b4:	20000098 	.word	0x20000098

080032b8 <_realloc_r>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4607      	mov	r7, r0
 80032bc:	4614      	mov	r4, r2
 80032be:	460e      	mov	r6, r1
 80032c0:	b921      	cbnz	r1, 80032cc <_realloc_r+0x14>
 80032c2:	4611      	mov	r1, r2
 80032c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032c8:	f7ff bf9c 	b.w	8003204 <_malloc_r>
 80032cc:	b922      	cbnz	r2, 80032d8 <_realloc_r+0x20>
 80032ce:	f7ff ff4b 	bl	8003168 <_free_r>
 80032d2:	4625      	mov	r5, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d8:	f000 f826 	bl	8003328 <_malloc_usable_size_r>
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d20f      	bcs.n	8003300 <_realloc_r+0x48>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4638      	mov	r0, r7
 80032e4:	f7ff ff8e 	bl	8003204 <_malloc_r>
 80032e8:	4605      	mov	r5, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0f2      	beq.n	80032d4 <_realloc_r+0x1c>
 80032ee:	4631      	mov	r1, r6
 80032f0:	4622      	mov	r2, r4
 80032f2:	f7ff ff15 	bl	8003120 <memcpy>
 80032f6:	4631      	mov	r1, r6
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff35 	bl	8003168 <_free_r>
 80032fe:	e7e9      	b.n	80032d4 <_realloc_r+0x1c>
 8003300:	4635      	mov	r5, r6
 8003302:	e7e7      	b.n	80032d4 <_realloc_r+0x1c>

08003304 <_sbrk_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4c06      	ldr	r4, [pc, #24]	; (8003320 <_sbrk_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4605      	mov	r5, r0
 800330c:	4608      	mov	r0, r1
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	f7fd f952 	bl	80005b8 <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_sbrk_r+0x1a>
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	b103      	cbz	r3, 800331e <_sbrk_r+0x1a>
 800331c:	602b      	str	r3, [r5, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000314 	.word	0x20000314

08003324 <__malloc_lock>:
 8003324:	4770      	bx	lr

08003326 <__malloc_unlock>:
 8003326:	4770      	bx	lr

08003328 <_malloc_usable_size_r>:
 8003328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800332c:	1f18      	subs	r0, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	bfbc      	itt	lt
 8003332:	580b      	ldrlt	r3, [r1, r0]
 8003334:	18c0      	addlt	r0, r0, r3
 8003336:	4770      	bx	lr

08003338 <_init>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr

08003344 <_fini>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	bf00      	nop
 8003348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800334a:	bc08      	pop	{r3}
 800334c:	469e      	mov	lr, r3
 800334e:	4770      	bx	lr

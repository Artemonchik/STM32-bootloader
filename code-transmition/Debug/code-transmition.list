
code-transmition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004384  08004384  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004384  08004384  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800438c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  080043fc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080043fc  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b84  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bf4  00000000  00000000  00029c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000840  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a998  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007de0  00000000  00000000  00047148  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095251  00000000  00000000  0004ef28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000e41f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080041f8 	.word	0x080041f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080041f8 	.word	0x080041f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <sendData>:

/**
 * int len of data you want to send
 */
int sendData(UART_HandleTypeDef *huart, int32_t messageCode, uint8_t *data,
		int32_t len, uint32_t timeout) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
 800028c:	603b      	str	r3, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t*) (&len), sizeof(len), timeout);
 800028e:	4639      	mov	r1, r7
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	2204      	movs	r2, #4
 8000294:	68f8      	ldr	r0, [r7, #12]
 8000296:	f002 fac5 	bl	8002824 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*) (&messageCode), sizeof(messageCode),
 800029a:	f107 0108 	add.w	r1, r7, #8
 800029e:	69bb      	ldr	r3, [r7, #24]
 80002a0:	2204      	movs	r2, #4
 80002a2:	68f8      	ldr	r0, [r7, #12]
 80002a4:	f002 fabe 	bl	8002824 <HAL_UART_Transmit>
			timeout);
	wasSend = HAL_UART_Transmit(huart, data, len, timeout);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b29a      	uxth	r2, r3
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	6879      	ldr	r1, [r7, #4]
 80002b0:	68f8      	ldr	r0, [r7, #12]
 80002b2:	f002 fab7 	bl	8002824 <HAL_UART_Transmit>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <sendData+0x48>)
 80002bc:	601a      	str	r2, [r3, #0]
	return 0;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000008c 	.word	0x2000008c

080002cc <HAL_printf>:
	return dataBuffer;
}

/**
 * As you can see, max size of sending string after formating must be at most 250 characters*/
void HAL_printf(const char *format, ...) {
 80002cc:	b40f      	push	{r0, r1, r2, r3}
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b0c4      	sub	sp, #272	; 0x110
 80002d2:	af02      	add	r7, sp, #8
	char buff[256];
	va_list arg;
	va_start(arg, format);
 80002d4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	601a      	str	r2, [r3, #0]
	vsprintf(buff, format, arg);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	f107 0008 	add.w	r0, r7, #8
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80002e8:	f002 ff0c 	bl	8003104 <vsiprintf>
	sendData(&huart1, STR, (uint8_t*) buff, (int) strlen(buff), 3000);
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff6d 	bl	80001d0 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4619      	mov	r1, r3
 80002fa:	f107 0208 	add.w	r2, r7, #8
 80002fe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000302:	9300      	str	r3, [sp, #0]
 8000304:	460b      	mov	r3, r1
 8000306:	2101      	movs	r1, #1
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <HAL_printf+0x54>)
 800030a:	f7ff ffb9 	bl	8000280 <sendData>
	va_end(arg);
}
 800030e:	bf00      	nop
 8000310:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000314:	46bd      	mov	sp, r7
 8000316:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800031a:	b004      	add	sp, #16
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000009c 	.word	0x2000009c

08000324 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b08d      	sub	sp, #52	; 0x34
 8000328:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800032a:	f000 fa8f 	bl	800084c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800032e:	f000 f873 	bl	8000418 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000332:	f000 f8f1 	bl	8000518 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000336:	f000 f8bf 	bl	80004b8 <MX_USART1_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_printf("Hello: %s, you so fucking %d/10", "Borya", 10);
 800033a:	220a      	movs	r2, #10
 800033c:	492f      	ldr	r1, [pc, #188]	; (80003fc <main+0xd8>)
 800033e:	4830      	ldr	r0, [pc, #192]	; (8000400 <main+0xdc>)
 8000340:	f7ff ffc4 	bl	80002cc <HAL_printf>
	HAL_FLASH_Unlock();
 8000344:	f000 fc60 	bl	8000c08 <HAL_FLASH_Unlock>
	uint32_t startAddress = 0x08020000;
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <main+0xe0>)
 800034a:	62bb      	str	r3, [r7, #40]	; 0x28

	FLASH_EraseInitTypeDef eraseConfig = { FLASH_TYPEERASE_PAGES, startAddress + 8,
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]
 8000350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000352:	3308      	adds	r3, #8
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
			1 };
	uint32_t PageError;
	HAL_FLASHEx_Erase(&eraseConfig, &PageError);
 800035a:	f107 020c 	add.w	r2, r7, #12
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fd03 	bl	8000d70 <HAL_FLASHEx_Erase>

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		int32_t word[] = { 0xBFBFBFBF, 0xABCABCFF };
 800036a:	4a27      	ldr	r2, [pc, #156]	; (8000408 <main+0xe4>)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000372:	e883 0003 	stmia.w	r3, {r0, r1}

		for (int i = 0; i >= 0; i += 4) {
 8000376:	2300      	movs	r3, #0
 8000378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800037a:	e03a      	b.n	80003f2 <main+0xce>
			uint64_t zero = 0;
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	f04f 0400 	mov.w	r4, #0
 8000384:	e9c7 3408 	strd	r3, r4, [r7, #32]
//		    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, startAddress + i, zero);
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8000388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800038a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038c:	18d1      	adds	r1, r2, r3
					startAddress + i, word[i % 2]);
 800038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000390:	2b00      	cmp	r3, #0
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	bfb8      	it	lt
 8000398:	425b      	neglt	r3, r3
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80003a0:	4413      	add	r3, r2
 80003a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80003a6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80003aa:	461a      	mov	r2, r3
 80003ac:	4623      	mov	r3, r4
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fbba 	bl	8000b28 <HAL_FLASH_Program>
 80003b4:	4603      	mov	r3, r0
 80003b6:	77fb      	strb	r3, [r7, #31]
			if (result == HAL_OK) {
 80003b8:	7ffb      	ldrb	r3, [r7, #31]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d106      	bne.n	80003cc <main+0xa8>
				HAL_printf("The byte was successfully written word 0x%lX",
 80003be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003c2:	4413      	add	r3, r2
 80003c4:	4619      	mov	r1, r3
 80003c6:	4811      	ldr	r0, [pc, #68]	; (800040c <main+0xe8>)
 80003c8:	f7ff ff80 	bl	80002cc <HAL_printf>
						startAddress + i);
			}

			if (result == HAL_ERROR) {
 80003cc:	7ffb      	ldrb	r3, [r7, #31]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d109      	bne.n	80003e6 <main+0xc2>
				HAL_printf(
 80003d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003d6:	4413      	add	r3, r2
 80003d8:	4619      	mov	r1, r3
 80003da:	480d      	ldr	r0, [pc, #52]	; (8000410 <main+0xec>)
 80003dc:	f7ff ff76 	bl	80002cc <HAL_printf>
						"Occurred an error while was writing the current word 0x%lX",
						startAddress + i);
				printf("mew :(");
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <main+0xf0>)
 80003e2:	f002 fe61 	bl	80030a8 <iprintf>
			}
			HAL_Delay(3);
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 fa96 	bl	8000918 <HAL_Delay>
		for (int i = 0; i >= 0; i += 4) {
 80003ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ee:	3304      	adds	r3, #4
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dac1      	bge.n	800037c <main+0x58>
	while (1) {
 80003f8:	e7b7      	b.n	800036a <main+0x46>
 80003fa:	bf00      	nop
 80003fc:	08004210 	.word	0x08004210
 8000400:	08004218 	.word	0x08004218
 8000404:	08020000 	.word	0x08020000
 8000408:	080042ac 	.word	0x080042ac
 800040c:	08004238 	.word	0x08004238
 8000410:	08004268 	.word	0x08004268
 8000414:	080042a4 	.word	0x080042a4

08000418 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b09e      	sub	sp, #120	; 0x78
 800041c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800041e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f002 fe36 	bl	8003098 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800042c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800043c:	463b      	mov	r3, r7
 800043e:	223c      	movs	r2, #60	; 0x3c
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 fe28 	bl	8003098 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	2302      	movs	r3, #2
 800044a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000450:	2310      	movs	r3, #16
 8000452:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000454:	2300      	movs	r3, #0
 8000456:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800045c:	4618      	mov	r0, r3
 800045e:	f000 fea5 	bl	80011ac <HAL_RCC_OscConfig>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x54>
		Error_Handler();
 8000468:	f000 f86e 	bl	8000548 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800046c:	230f      	movs	r3, #15
 800046e:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000470:	2300      	movs	r3, #0
 8000472:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000480:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f001 fd98 	bl	8001fbc <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x7e>
		Error_Handler();
 8000492:	f000 f859 	bl	8000548 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000496:	2301      	movs	r3, #1
 8000498:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800049a:	2300      	movs	r3, #0
 800049c:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800049e:	463b      	mov	r3, r7
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 ffc1 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x98>
		Error_Handler();
 80004ac:	f000 f84c 	bl	8000548 <Error_Handler>
	}
}
 80004b0:	bf00      	nop
 80004b2:	3778      	adds	r7, #120	; 0x78
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <MX_USART1_UART_Init+0x5c>)
 80004c0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_USART1_UART_Init+0x58>)
 80004fc:	f002 f944 	bl	8002788 <HAL_UART_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000506:	f000 f81f 	bl	8000548 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000009c 	.word	0x2000009c
 8000514:	40013800 	.word	0x40013800

08000518 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_GPIO_Init+0x2c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <MX_GPIO_Init+0x2c>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <MX_GPIO_Init+0x2c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_MspInit+0x44>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <HAL_MspInit+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_MspInit+0x44>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <HAL_MspInit+0x44>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <HAL_MspInit+0x44>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a18      	ldr	r2, [pc, #96]	; (8000620 <HAL_UART_MspInit+0x80>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d129      	bne.n	8000616 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005cc:	6193      	str	r3, [r2, #24]
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_UART_MspInit+0x84>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000604:	2307      	movs	r3, #7
 8000606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 fc51 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	; 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40013800 	.word	0x40013800
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067c:	f000 f92c 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e00a      	b.n	80006ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000696:	f3af 8000 	nop.w
 800069a:	4601      	mov	r1, r0
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	b2ca      	uxtb	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbf0      	blt.n	8000696 <_read+0x12>
	}

return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b086      	sub	sp, #24
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e009      	b.n	80006e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf1      	blt.n	80006d0 <_write+0x12>
	}
	return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_close>:

int _close(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	return -1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071e:	605a      	str	r2, [r3, #4]
	return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <_isatty>:

int _isatty(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
	return 1;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f002 fc58 	bl	8003044 <__errno>
 8000794:	4602      	mov	r2, r0
 8000796:	230c      	movs	r3, #12
 8000798:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000a000 	.word	0x2000a000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000090 	.word	0x20000090
 80007c8:	20000340 	.word	0x20000340

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <SystemInit+0x28>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <SystemInit+0x28>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SystemInit+0x28>)
 80007e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e6:	609a      	str	r2, [r3, #8]
#endif
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000830 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80007fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80007fe:	e003      	b.n	8000808 <LoopCopyDataInit>

08000800 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000802:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000804:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000806:	3104      	adds	r1, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <LoopForever+0xa>)
	ldr	r3, =_edata
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <LoopForever+0xe>)
	adds	r2, r0, r1
 800080c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800080e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000810:	d3f6      	bcc.n	8000800 <CopyDataInit>
	ldr	r2, =_sbss
 8000812:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000814:	e002      	b.n	800081c <LoopFillZerobss>

08000816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000816:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000818:	f842 3b04 	str.w	r3, [r2], #4

0800081c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <LoopForever+0x16>)
	cmp	r2, r3
 800081e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000820:	d3f9      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffd3 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f002 fc13 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800082a:	f7ff fd7b 	bl	8000324 <main>

0800082e <LoopForever>:

LoopForever:
    b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000834:	0800438c 	.word	0x0800438c
	ldr	r0, =_sdata
 8000838:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800083c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000840:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000844:	2000033c 	.word	0x2000033c

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f92f 	bl	8000ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fe76 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f939 	bl	8000b0e <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f90f 	bl	8000ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000310 	.word	0x20000310

08000900 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;  
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000310 	.word	0x20000310

08000918 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_Delay+0x40>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffde 	bl	8000900 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000008 	.word	0x20000008

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	6039      	str	r1, [r7, #0]
 80009ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0a      	blt.n	80009ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	490c      	ldr	r1, [pc, #48]	; (8000a0c <__NVIC_SetPriority+0x4c>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	0112      	lsls	r2, r2, #4
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	440b      	add	r3, r1
 80009e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e8:	e00a      	b.n	8000a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4908      	ldr	r1, [pc, #32]	; (8000a10 <__NVIC_SetPriority+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	3b04      	subs	r3, #4
 80009f8:	0112      	lsls	r2, r2, #4
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	440b      	add	r3, r1
 80009fe:	761a      	strb	r2, [r3, #24]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b089      	sub	sp, #36	; 0x24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f1c3 0307 	rsb	r3, r3, #7
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	bf28      	it	cs
 8000a32:	2304      	movcs	r3, #4
 8000a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	d902      	bls.n	8000a44 <NVIC_EncodePriority+0x30>
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3b03      	subs	r3, #3
 8000a42:	e000      	b.n	8000a46 <NVIC_EncodePriority+0x32>
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43d9      	mvns	r1, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	4313      	orrs	r3, r2
         );
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3724      	adds	r7, #36	; 0x24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a8c:	d301      	bcc.n	8000a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00f      	b.n	8000ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <SysTick_Config+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f7ff ff8e 	bl	80009c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <SysTick_Config+0x40>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SysTick_Config+0x40>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff47 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b086      	sub	sp, #24
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff5c 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff8e 	bl	8000a14 <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff5d 	bl	80009c0 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb0 	bl	8000a7c <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000b44:	7e1b      	ldrb	r3, [r3, #24]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d101      	bne.n	8000b4e <HAL_FLASH_Program+0x26>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e054      	b.n	8000bf8 <HAL_FLASH_Program+0xd0>
 8000b4e:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b58:	f000 f898 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d144      	bne.n	8000bf0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	757b      	strb	r3, [r7, #21]
 8000b70:	e007      	b.n	8000b82 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d102      	bne.n	8000b7e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	757b      	strb	r3, [r7, #21]
 8000b7c:	e001      	b.n	8000b82 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	75bb      	strb	r3, [r7, #22]
 8000b86:	e02d      	b.n	8000be4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000b88:	7dbb      	ldrb	r3, [r7, #22]
 8000b8a:	005a      	lsls	r2, r3, #1
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	eb02 0c03 	add.w	ip, r2, r3
 8000b92:	7dbb      	ldrb	r3, [r7, #22]
 8000b94:	0119      	lsls	r1, r3, #4
 8000b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b9a:	f1c1 0620 	rsb	r6, r1, #32
 8000b9e:	f1a1 0020 	sub.w	r0, r1, #32
 8000ba2:	fa22 f401 	lsr.w	r4, r2, r1
 8000ba6:	fa03 f606 	lsl.w	r6, r3, r6
 8000baa:	4334      	orrs	r4, r6
 8000bac:	fa23 f000 	lsr.w	r0, r3, r0
 8000bb0:	4304      	orrs	r4, r0
 8000bb2:	fa23 f501 	lsr.w	r5, r3, r1
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4660      	mov	r0, ip
 8000bbc:	f000 f84a 	bl	8000c54 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc4:	f000 f862 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_FLASH_Program+0xdc>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_FLASH_Program+0xdc>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000bde:	7dbb      	ldrb	r3, [r7, #22]
 8000be0:	3301      	adds	r3, #1
 8000be2:	75bb      	strb	r3, [r7, #22]
 8000be4:	7dba      	ldrb	r2, [r7, #22]
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3cd      	bcc.n	8000b88 <HAL_FLASH_Program+0x60>
 8000bec:	e000      	b.n	8000bf0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000bee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <HAL_FLASH_Program+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]

  return status;
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	20000318 	.word	0x20000318
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00d      	beq.n	8000c3a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_FLASH_Unlock+0x44>)
 8000c22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_FLASH_Unlock+0x48>)
 8000c28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <HAL_FLASH_Unlock+0x40>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	45670123 	.word	0x45670123
 8000c50:	cdef89ab 	.word	0xcdef89ab

08000c54 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <FLASH_Program_HalfWord+0x30>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <FLASH_Program_HalfWord+0x34>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <FLASH_Program_HalfWord+0x34>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	887a      	ldrh	r2, [r7, #2]
 8000c76:	801a      	strh	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000318 	.word	0x20000318
 8000c88:	40022000 	.word	0x40022000

08000c8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fe34 	bl	8000900 <HAL_GetTick>
 8000c98:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000c9a:	e010      	b.n	8000cbe <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca2:	d00c      	beq.n	8000cbe <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d007      	beq.n	8000cba <FLASH_WaitForLastOperation+0x2e>
 8000caa:	f7ff fe29 	bl	8000900 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d201      	bcs.n	8000cbe <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e01f      	b.n	8000cfe <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <FLASH_WaitForLastOperation+0x7c>)
 8000cc0:	68db      	ldr	r3, [r3, #12]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d0e8      	beq.n	8000c9c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <FLASH_WaitForLastOperation+0x7c>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f003 0320 	and.w	r3, r3, #32
 8000cd2:	2b20      	cmp	r3, #32
 8000cd4:	d102      	bne.n	8000cdc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <FLASH_WaitForLastOperation+0x7c>)
 8000cd8:	2220      	movs	r2, #32
 8000cda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <FLASH_WaitForLastOperation+0x7c>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	f003 0310 	and.w	r3, r3, #16
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d005      	beq.n	8000cf4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <FLASH_WaitForLastOperation+0x7c>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d103      	bne.n	8000cfc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000cf4:	f000 f80a 	bl	8000d0c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e000      	b.n	8000cfe <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40022000 	.word	0x40022000

08000d0c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <FLASH_SetErrorCode+0x5c>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	d109      	bne.n	8000d36 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <FLASH_SetErrorCode+0x60>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <FLASH_SetErrorCode+0x60>)
 8000d2c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <FLASH_SetErrorCode+0x5c>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d109      	bne.n	8000d56 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <FLASH_SetErrorCode+0x60>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <FLASH_SetErrorCode+0x60>)
 8000d4c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <FLASH_SetErrorCode+0x5c>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	60d3      	str	r3, [r2, #12]
}  
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40022000 	.word	0x40022000
 8000d6c:	20000318 	.word	0x20000318

08000d70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_FLASHEx_Erase+0xcc>)
 8000d84:	7e1b      	ldrb	r3, [r3, #24]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d101      	bne.n	8000d8e <HAL_FLASHEx_Erase+0x1e>
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	e052      	b.n	8000e34 <HAL_FLASHEx_Erase+0xc4>
 8000d8e:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_FLASHEx_Erase+0xcc>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d115      	bne.n	8000dc8 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000d9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000da0:	f7ff ff74 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d140      	bne.n	8000e2c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000daa:	f000 f84b 	bl	8000e44 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000db2:	f7ff ff6b 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000db6:	4603      	mov	r3, r0
 8000db8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_FLASHEx_Erase+0xd0>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <HAL_FLASHEx_Erase+0xd0>)
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	6113      	str	r3, [r2, #16]
 8000dc6:	e031      	b.n	8000e2c <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000dc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000dcc:	f7ff ff5e 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d12a      	bne.n	8000e2c <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	e019      	b.n	8000e1a <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000de6:	68b8      	ldr	r0, [r7, #8]
 8000de8:	f000 f846 	bl	8000e78 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000dec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000df0:	f7ff ff4c 	bl	8000c8c <FLASH_WaitForLastOperation>
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_FLASHEx_Erase+0xd0>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_FLASHEx_Erase+0xd0>)
 8000dfe:	f023 0302 	bic.w	r3, r3, #2
 8000e02:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	601a      	str	r2, [r3, #0]
            break;
 8000e10:	e00c      	b.n	8000e2c <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e18:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	02da      	lsls	r2, r3, #11
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3dc      	bcc.n	8000de6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <HAL_FLASHEx_Erase+0xcc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	761a      	strb	r2, [r3, #24]

  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000318 	.word	0x20000318
 8000e40:	40022000 	.word	0x40022000

08000e44 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <FLASH_MassErase+0x2c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <FLASH_MassErase+0x30>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <FLASH_MassErase+0x30>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <FLASH_MassErase+0x30>)
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <FLASH_MassErase+0x30>)
 8000e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e64:	6113      	str	r3, [r2, #16]
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000318 	.word	0x20000318
 8000e74:	40022000 	.word	0x40022000

08000e78 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <FLASH_PageErase+0x38>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <FLASH_PageErase+0x3c>)
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <FLASH_PageErase+0x3c>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <FLASH_PageErase+0x3c>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <FLASH_PageErase+0x3c>)
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <FLASH_PageErase+0x3c>)
 8000e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea2:	6113      	str	r3, [r2, #16]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	20000318 	.word	0x20000318
 8000eb4:	40022000 	.word	0x40022000

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e154      	b.n	8001172 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8146 	beq.w	800116c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d00b      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	2b11      	cmp	r3, #17
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b12      	cmp	r3, #18
 8000efe:	d130      	bne.n	8000f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	2201      	movs	r2, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	f003 0201 	and.w	r2, r3, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0xea>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d123      	bne.n	8000fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0203 	and.w	r2, r3, #3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80a0 	beq.w	800116c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x2d8>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a57      	ldr	r2, [pc, #348]	; (8001190 <HAL_GPIO_Init+0x2d8>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b55      	ldr	r3, [pc, #340]	; (8001190 <HAL_GPIO_Init+0x2d8>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001044:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_GPIO_Init+0x2dc>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800106e:	d019      	beq.n	80010a4 <HAL_GPIO_Init+0x1ec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a49      	ldr	r2, [pc, #292]	; (8001198 <HAL_GPIO_Init+0x2e0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d013      	beq.n	80010a0 <HAL_GPIO_Init+0x1e8>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2e4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d00d      	beq.n	800109c <HAL_GPIO_Init+0x1e4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <HAL_GPIO_Init+0x2e8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x1e0>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a46      	ldr	r2, [pc, #280]	; (80011a4 <HAL_GPIO_Init+0x2ec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d101      	bne.n	8001094 <HAL_GPIO_Init+0x1dc>
 8001090:	2304      	movs	r3, #4
 8001092:	e008      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 8001094:	2305      	movs	r3, #5
 8001096:	e006      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 8001098:	2303      	movs	r3, #3
 800109a:	e004      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 800109c:	2302      	movs	r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <HAL_GPIO_Init+0x1ee>
 80010a4:	2300      	movs	r3, #0
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	f002 0203 	and.w	r2, r2, #3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4093      	lsls	r3, r2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010b6:	4937      	ldr	r1, [pc, #220]	; (8001194 <HAL_GPIO_Init+0x2dc>)
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001112:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800113c:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_GPIO_Init+0x2f0>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	f47f aea3 	bne.w	8000ec8 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000
 8001198:	48000400 	.word	0x48000400
 800119c:	48000800 	.word	0x48000800
 80011a0:	48000c00 	.word	0x48000c00
 80011a4:	48001000 	.word	0x48001000
 80011a8:	40010400 	.word	0x40010400

080011ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f000 bef4 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 816a 	beq.w	80014aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011d6:	4bb3      	ldr	r3, [pc, #716]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011e2:	4bb0      	ldr	r3, [pc, #704]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d159      	bne.n	80012a2 <HAL_RCC_OscConfig+0xf6>
 80011ee:	4bad      	ldr	r3, [pc, #692]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fa:	d152      	bne.n	80012a2 <HAL_RCC_OscConfig+0xf6>
 80011fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001200:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001204:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001210:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b01      	cmp	r3, #1
 8001226:	d102      	bne.n	800122e <HAL_RCC_OscConfig+0x82>
 8001228:	4b9e      	ldr	r3, [pc, #632]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0xae>
 800122e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001232:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001246:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800124a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001256:	4b93      	ldr	r3, [pc, #588]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001262:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001266:	fa92 f2a2 	rbit	r2, r2
 800126a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800126e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f042 0220 	orr.w	r2, r2, #32
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f002 021f 	and.w	r2, r2, #31
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 810c 	beq.w	80014a8 <HAL_RCC_OscConfig+0x2fc>
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 8106 	bne.w	80014a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	f000 be86 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d106      	bne.n	80012bc <HAL_RCC_OscConfig+0x110>
 80012ae:	4b7d      	ldr	r3, [pc, #500]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7c      	ldr	r2, [pc, #496]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e030      	b.n	800131e <HAL_RCC_OscConfig+0x172>
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x134>
 80012c6:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a76      	ldr	r2, [pc, #472]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b74      	ldr	r3, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a73      	ldr	r2, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01e      	b.n	800131e <HAL_RCC_OscConfig+0x172>
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012ea:	d10c      	bne.n	8001306 <HAL_RCC_OscConfig+0x15a>
 80012ec:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a6c      	ldr	r2, [pc, #432]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a69      	ldr	r2, [pc, #420]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e00b      	b.n	800131e <HAL_RCC_OscConfig+0x172>
 8001306:	4b67      	ldr	r3, [pc, #412]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a66      	ldr	r2, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800130c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b64      	ldr	r3, [pc, #400]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 8001318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800131c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800131e:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f023 020f 	bic.w	r2, r3, #15
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	495d      	ldr	r1, [pc, #372]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800132e:	4313      	orrs	r3, r2
 8001330:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d059      	beq.n	80013f0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fae0 	bl	8000900 <HAL_GetTick>
 8001340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001346:	f7ff fadb 	bl	8000900 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d902      	bls.n	800135c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	f000 be29 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
 800135c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001360:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001370:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d102      	bne.n	800138e <HAL_RCC_OscConfig+0x1e2>
 8001388:	4b46      	ldr	r3, [pc, #280]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	e015      	b.n	80013ba <HAL_RCC_OscConfig+0x20e>
 800138e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001392:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80013aa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80013b6:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80013c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80013c6:	fa92 f2a2 	rbit	r2, r2
 80013ca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80013ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80013d2:	fab2 f282 	clz	r2, r2
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	f042 0220 	orr.w	r2, r2, #32
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	f002 021f 	and.w	r2, r2, #31
 80013e2:	2101      	movs	r1, #1
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ab      	beq.n	8001346 <HAL_RCC_OscConfig+0x19a>
 80013ee:	e05c      	b.n	80014aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fa86 	bl	8000900 <HAL_GetTick>
 80013f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fa:	f7ff fa81 	bl	8000900 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d902      	bls.n	8001410 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	f000 bdcf 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
 8001410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001414:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001424:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d102      	bne.n	8001442 <HAL_RCC_OscConfig+0x296>
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x2c2>
 8001442:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001446:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800145a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800145e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_RCC_OscConfig+0x2f8>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001472:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001476:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800147a:	fa92 f2a2 	rbit	r2, r2
 800147e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001482:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f042 0220 	orr.w	r2, r2, #32
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ab      	bne.n	80013fa <HAL_RCC_OscConfig+0x24e>
 80014a2:	e002      	b.n	80014aa <HAL_RCC_OscConfig+0x2fe>
 80014a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 816f 	beq.w	8001798 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ba:	4bd0      	ldr	r3, [pc, #832]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014c6:	4bcd      	ldr	r3, [pc, #820]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d16c      	bne.n	80015ac <HAL_RCC_OscConfig+0x400>
 80014d2:	4bca      	ldr	r3, [pc, #808]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d166      	bne.n	80015ac <HAL_RCC_OscConfig+0x400>
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014e8:	fa93 f3a3 	rbit	r3, r3
 80014ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d102      	bne.n	800150e <HAL_RCC_OscConfig+0x362>
 8001508:	4bbc      	ldr	r3, [pc, #752]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	e013      	b.n	8001536 <HAL_RCC_OscConfig+0x38a>
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001526:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001532:	4bb2      	ldr	r3, [pc, #712]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800153c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001540:	fa92 f2a2 	rbit	r2, r2
 8001544:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001548:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800154c:	fab2 f282 	clz	r2, r2
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	f042 0220 	orr.w	r2, r2, #32
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f002 021f 	and.w	r2, r2, #31
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_RCC_OscConfig+0x3cc>
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d002      	beq.n	8001578 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	f000 bd1b 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4ba0      	ldr	r3, [pc, #640]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	21f8      	movs	r1, #248	; 0xf8
 8001588:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001590:	fa91 f1a1 	rbit	r1, r1
 8001594:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001598:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800159c:	fab1 f181 	clz	r1, r1
 80015a0:	b2c9      	uxtb	r1, r1
 80015a2:	408b      	lsls	r3, r1
 80015a4:	4995      	ldr	r1, [pc, #596]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	e0f5      	b.n	8001798 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8085 	beq.w	80016c2 <HAL_RCC_OscConfig+0x516>
 80015b8:	2301      	movs	r3, #1
 80015ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80015c2:	fa93 f3a3 	rbit	r3, r3
 80015c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80015ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	461a      	mov	r2, r3
 80015e0:	2301      	movs	r3, #1
 80015e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff f98c 	bl	8000900 <HAL_GetTick>
 80015e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff f987 	bl	8000900 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d902      	bls.n	8001604 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 bcd5 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
 8001604:	2302      	movs	r3, #2
 8001606:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001616:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	095b      	lsrs	r3, r3, #5
 8001622:	b2db      	uxtb	r3, r3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0x488>
 800162e:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	e013      	b.n	800165c <HAL_RCC_OscConfig+0x4b0>
 8001634:	2302      	movs	r3, #2
 8001636:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800164c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001658:	4b68      	ldr	r3, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2202      	movs	r2, #2
 800165e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001662:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001666:	fa92 f2a2 	rbit	r2, r2
 800166a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800166e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001672:	fab2 f282 	clz	r2, r2
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	f042 0220 	orr.w	r2, r2, #32
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	f002 021f 	and.w	r2, r2, #31
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0af      	beq.n	80015ee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	21f8      	movs	r1, #248	; 0xf8
 800169e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80016a6:	fa91 f1a1 	rbit	r1, r1
 80016aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80016ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80016b2:	fab1 f181 	clz	r1, r1
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	408b      	lsls	r3, r1
 80016ba:	4950      	ldr	r1, [pc, #320]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
 80016c0:	e06a      	b.n	8001798 <HAL_RCC_OscConfig+0x5ec>
 80016c2:	2301      	movs	r3, #1
 80016c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80016d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff f907 	bl	8000900 <HAL_GetTick>
 80016f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff f902 	bl	8000900 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d902      	bls.n	800170e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	f000 bc50 	b.w	8001fae <HAL_RCC_OscConfig+0xe02>
 800170e:	2302      	movs	r3, #2
 8001710:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001714:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x592>
 8001738:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	e013      	b.n	8001766 <HAL_RCC_OscConfig+0x5ba>
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001756:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800175a:	fa93 f3a3 	rbit	r3, r3
 800175e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_RCC_OscConfig+0x650>)
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	2202      	movs	r2, #2
 8001768:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800176c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001778:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800177c:	fab2 f282 	clz	r2, r2
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	f042 0220 	orr.w	r2, r2, #32
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	f002 021f 	and.w	r2, r2, #31
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1af      	bne.n	80016f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80da 	beq.w	800195c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d069      	beq.n	8001886 <HAL_RCC_OscConfig+0x6da>
 80017b2:	2301      	movs	r3, #1
 80017b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80017c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c8:	fab3 f383 	clz	r3, r3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x654>)
 80017d2:	4413      	add	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	461a      	mov	r2, r3
 80017d8:	2301      	movs	r3, #1
 80017da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f890 	bl	8000900 <HAL_GetTick>
 80017e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff f88b 	bl	8000900 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d906      	bls.n	8001804 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e3d9      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	10908120 	.word	0x10908120
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001816:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001844:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800184e:	2102      	movs	r1, #2
 8001850:	6019      	str	r1, [r3, #0]
 8001852:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f1a3 	rbit	r1, r3
 800185c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001860:	6019      	str	r1, [r3, #0]
  return result;
 8001862:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0b0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x63a>
 8001884:	e06a      	b.n	800195c <HAL_RCC_OscConfig+0x7b0>
 8001886:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800189c:	601a      	str	r2, [r3, #0]
  return result;
 800189e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <HAL_RCC_OscConfig+0x934>)
 80018ae:	4413      	add	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	2300      	movs	r3, #0
 80018b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b8:	f7ff f822 	bl	8000900 <HAL_GetTick>
 80018bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff f81d 	bl	8000900 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e36b      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 80018d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018da:	2202      	movs	r2, #2
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800191c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191e:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001922:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001926:	2102      	movs	r1, #2
 8001928:	6019      	str	r1, [r3, #0]
 800192a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f1a3 	rbit	r1, r3
 8001934:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001938:	6019      	str	r1, [r3, #0]
  return result;
 800193a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1b2      	bne.n	80018c2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8158 	beq.w	8001c1c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b5a      	ldr	r3, [pc, #360]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d112      	bne.n	80019a4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	61d3      	str	r3, [r2, #28]
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001992:	f107 0308 	add.w	r3, r7, #8
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	f107 0308 	add.w	r3, r7, #8
 800199c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <HAL_RCC_OscConfig+0x938>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d11a      	bne.n	80019e6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b0:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <HAL_RCC_OscConfig+0x938>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x938>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019bc:	f7fe ffa0 	bl	8000900 <HAL_GetTick>
 80019c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	e009      	b.n	80019da <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c6:	f7fe ff9b 	bl	8000900 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e2e9      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_OscConfig+0x938>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0ef      	beq.n	80019c6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x852>
 80019f0:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a39      	ldr	r2, [pc, #228]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02f      	b.n	8001a5e <HAL_RCC_OscConfig+0x8b2>
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x876>
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a33      	ldr	r2, [pc, #204]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e01d      	b.n	8001a5e <HAL_RCC_OscConfig+0x8b2>
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x89a>
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x8b2>
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a24      	ldr	r2, [pc, #144]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d06b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7fe ff4a 	bl	8000900 <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00b      	b.n	8001a8a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe ff45 	bl	8000900 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e291      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 8001a8a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a8e:	2202      	movs	r2, #2
 8001a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f2a3 	rbit	r2, r3
 8001a9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ab8:	601a      	str	r2, [r3, #0]
  return result;
 8001aba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001abe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d109      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x93c>
 8001ad4:	4b01      	ldr	r3, [pc, #4]	; (8001adc <HAL_RCC_OscConfig+0x930>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	e014      	b.n	8001b04 <HAL_RCC_OscConfig+0x958>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	10908120 	.word	0x10908120
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aec:	2202      	movs	r2, #2
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4bbb      	ldr	r3, [pc, #748]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b08:	2102      	movs	r1, #2
 8001b0a:	6011      	str	r1, [r2, #0]
 8001b0c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	fa92 f1a2 	rbit	r1, r2
 8001b16:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b1a:	6011      	str	r1, [r2, #0]
  return result;
 8001b1c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	fab2 f282 	clz	r2, r2
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f002 021f 	and.w	r2, r2, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d099      	beq.n	8001a72 <HAL_RCC_OscConfig+0x8c6>
 8001b3e:	e063      	b.n	8001c08 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b40:	f7fe fede 	bl	8000900 <HAL_GetTick>
 8001b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7fe fed9 	bl	8000900 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e225      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 8001b62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b66:	2202      	movs	r2, #2
 8001b68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f2a3 	rbit	r2, r3
 8001b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b7e:	2202      	movs	r2, #2
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b90:	601a      	str	r2, [r3, #0]
  return result;
 8001b92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0xa06>
 8001bac:	4b90      	ldr	r3, [pc, #576]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	e00d      	b.n	8001bce <HAL_RCC_OscConfig+0xa22>
 8001bb2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	6011      	str	r1, [r2, #0]
 8001bd6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	fa92 f1a2 	rbit	r1, r2
 8001be0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001be4:	6011      	str	r1, [r2, #0]
  return result;
 8001be6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	fab2 f282 	clz	r2, r2
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	f002 021f 	and.w	r2, r2, #31
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1a0      	bne.n	8001b4a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b77      	ldr	r3, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	4a76      	ldr	r2, [pc, #472]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 81c2 	beq.w	8001fac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	f000 819c 	beq.w	8001f6e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	f040 8114 	bne.w	8001e6a <HAL_RCC_OscConfig+0xcbe>
 8001c42:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c5a:	601a      	str	r2, [r3, #0]
  return result;
 8001c5c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	461a      	mov	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe fe42 	bl	8000900 <HAL_GetTick>
 8001c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c82:	f7fe fe3d 	bl	8000900 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e18b      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 8001c96:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cae:	601a      	str	r2, [r3, #0]
  return result;
 8001cb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cb4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_OscConfig+0xb24>
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e01b      	b.n	8001d08 <HAL_RCC_OscConfig+0xb5c>
 8001cd0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d20:	6011      	str	r1, [r2, #0]
  return result;
 8001d22:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d19e      	bne.n	8001c82 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	4925      	ldr	r1, [pc, #148]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d7e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	461a      	mov	r2, r3
 8001d92:	2301      	movs	r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fdb3 	bl	8000900 <HAL_GetTick>
 8001d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9e:	e009      	b.n	8001db4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fdae 	bl	8000900 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0fc      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 8001db4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dcc:	601a      	str	r2, [r3, #0]
  return result;
 8001dce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d105      	bne.n	8001df4 <HAL_RCC_OscConfig+0xc48>
 8001de8:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <HAL_RCC_OscConfig+0xc44>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	e01e      	b.n	8001e2c <HAL_RCC_OscConfig+0xc80>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001df8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <HAL_RCC_OscConfig+0xe0c>)
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e34:	6011      	str	r1, [r2, #0]
 8001e36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fa92 f1a2 	rbit	r1, r2
 8001e40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e44:	6011      	str	r1, [r2, #0]
  return result;
 8001e46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	fab2 f282 	clz	r2, r2
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f042 0220 	orr.w	r2, r2, #32
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f002 021f 	and.w	r2, r2, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d09b      	beq.n	8001da0 <HAL_RCC_OscConfig+0xbf4>
 8001e68:	e0a0      	b.n	8001fac <HAL_RCC_OscConfig+0xe00>
 8001e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	fa93 f2a3 	rbit	r2, r3
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	601a      	str	r2, [r3, #0]
  return result;
 8001e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fd2e 	bl	8000900 <HAL_GetTick>
 8001ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea8:	e009      	b.n	8001ebe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fd29 	bl	8000900 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e077      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
 8001ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	fa93 f2a3 	rbit	r2, r3
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	601a      	str	r2, [r3, #0]
  return result;
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xd4c>
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0xe0c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd84>
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f107 0320 	add.w	r3, r7, #32
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fa93 f2a3 	rbit	r2, r3
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f107 0318 	add.w	r3, r7, #24
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0xe0c>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f107 0210 	add.w	r2, r7, #16
 8001f34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f38:	6011      	str	r1, [r2, #0]
 8001f3a:	f107 0210 	add.w	r2, r7, #16
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	fa92 f1a2 	rbit	r1, r2
 8001f44:	f107 020c 	add.w	r2, r7, #12
 8001f48:	6011      	str	r1, [r2, #0]
  return result;
 8001f4a:	f107 020c 	add.w	r2, r7, #12
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f002 021f 	and.w	r2, r2, #31
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f202 	lsl.w	r2, r1, r2
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d19e      	bne.n	8001eaa <HAL_RCC_OscConfig+0xcfe>
 8001f6c:	e01e      	b.n	8001fac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e018      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_RCC_OscConfig+0xe0c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000

08001fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b09e      	sub	sp, #120	; 0x78
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e162      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 0207 	bic.w	r2, r3, #7
 8001fea:	498b      	ldr	r1, [pc, #556]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b89      	ldr	r3, [pc, #548]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e14a      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	497f      	ldr	r1, [pc, #508]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80dc 	beq.w	80021e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d13c      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xf6>
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d102      	bne.n	8002062 <HAL_RCC_ClockConfig+0xa6>
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e00f      	b.n	8002082 <HAL_RCC_ClockConfig+0xc6>
 8002062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	667b      	str	r3, [r7, #100]	; 0x64
 8002070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002074:	663b      	str	r3, [r7, #96]	; 0x60
 8002076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002086:	65ba      	str	r2, [r7, #88]	; 0x58
 8002088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d17b      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0f3      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d13c      	bne.n	8002134 <HAL_RCC_ClockConfig+0x178>
 80020ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80020c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x128>
 80020de:	4b4f      	ldr	r3, [pc, #316]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	e00f      	b.n	8002104 <HAL_RCC_ClockConfig+0x148>
 80020e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	647b      	str	r3, [r7, #68]	; 0x44
 80020f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
 80020f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002100:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002108:	63ba      	str	r2, [r7, #56]	; 0x38
 800210a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800210c:	fa92 f2a2 	rbit	r2, r2
 8002110:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d13a      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0b2      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
 8002134:	2302      	movs	r3, #2
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	b2db      	uxtb	r3, r3
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_RCC_ClockConfig+0x1a0>
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	e00d      	b.n	8002178 <HAL_RCC_ClockConfig+0x1bc>
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	2202      	movs	r2, #2
 800217a:	61ba      	str	r2, [r7, #24]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	fa92 f2a2 	rbit	r2, r2
 8002182:	617a      	str	r2, [r7, #20]
  return result;
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e079      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	491a      	ldr	r1, [pc, #104]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7fe fba2 	bl	8000900 <HAL_GetTick>
 80021bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7fe fb9e 	bl	8000900 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e061      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_ClockConfig+0x260>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d214      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4906      	ldr	r1, [pc, #24]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_RCC_ClockConfig+0x25c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e040      	b.n	800229a <HAL_RCC_ClockConfig+0x2de>
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	491a      	ldr	r1, [pc, #104]	; (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4912      	ldr	r1, [pc, #72]	; (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800225e:	f000 f829 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800226c:	22f0      	movs	r2, #240	; 0xf0
 800226e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	fa92 f2a2 	rbit	r2, r2
 8002276:	60fa      	str	r2, [r7, #12]
  return result;
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	fab2 f282 	clz	r2, r2
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	40d3      	lsrs	r3, r2
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	fa21 f303 	lsr.w	r3, r1, r3
 800228a:	4a08      	ldr	r2, [pc, #32]	; (80022ac <HAL_RCC_ClockConfig+0x2f0>)
 800228c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe faf0 	bl	8000878 <HAL_InitTick>
  
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3778      	adds	r7, #120	; 0x78
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080042b4 	.word	0x080042b4
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b08b      	sub	sp, #44	; 0x2c
 80022b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x30>
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x36>
 80022e2:	e03c      	b.n	800235e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	e03c      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fa92 f2a2 	rbit	r2, r2
 80022fc:	607a      	str	r2, [r7, #4]
  return result;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	fab2 f282 	clz	r2, r2
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	40d3      	lsrs	r3, r2
 8002308:	4a1c      	ldr	r2, [pc, #112]	; (800237c <HAL_RCC_GetSysClockFreq+0xc8>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	220f      	movs	r2, #15
 8002318:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	fa92 f2a2 	rbit	r2, r2
 8002320:	60fa      	str	r2, [r7, #12]
  return result;
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	fab2 f282 	clz	r2, r2
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	40d3      	lsrs	r3, r2
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_RCC_GetSysClockFreq+0xcc>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc4>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	fbb2 f2f3 	udiv	r2, r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e004      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e002      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002360:	623b      	str	r3, [r7, #32]
      break;
 8002362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002364:	6a3b      	ldr	r3, [r7, #32]
}
 8002366:	4618      	mov	r0, r3
 8002368:	372c      	adds	r7, #44	; 0x2c
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	007a1200 	.word	0x007a1200
 800237c:	080042cc 	.word	0x080042cc
 8002380:	080042dc 	.word	0x080042dc
 8002384:	003d0900 	.word	0x003d0900

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023a6:	f7ff ffef 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	603a      	str	r2, [r7, #0]
  return result;
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	40d3      	lsrs	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080042c4 	.word	0x080042c4

080023e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ea:	f7ff ffcd 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023ee:	4601      	mov	r1, r0
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	fa92 f2a2 	rbit	r2, r2
 8002404:	603a      	str	r2, [r7, #0]
  return result;
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	fab2 f282 	clz	r2, r2
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	40d3      	lsrs	r3, r2
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002412:	5cd3      	ldrb	r3, [r2, r3]
 8002414:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	080042c4 	.word	0x080042c4

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b092      	sub	sp, #72	; 0x48
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80d7 	beq.w	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244c:	4b4e      	ldr	r3, [pc, #312]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10e      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a4a      	ldr	r2, [pc, #296]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002462:	61d3      	str	r3, [r2, #28]
 8002464:	4b48      	ldr	r3, [pc, #288]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a41      	ldr	r2, [pc, #260]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe fa37 	bl	8000900 <HAL_GetTick>
 8002492:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe fa33 	bl	8000900 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e169      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	4b38      	ldr	r3, [pc, #224]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8084 	beq.w	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d07c      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d4:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	461a      	mov	r2, r3
 80024fe:	2301      	movs	r3, #1
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2300      	movs	r3, #0
 8002524:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800252c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d04b      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002536:	f7fe f9e3 	bl	8000900 <HAL_GetTick>
 800253a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7fe f9df 	bl	8000900 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e113      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002554:	2302      	movs	r3, #2
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	61fb      	str	r3, [r7, #28]
  return result;
 800256c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d108      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002582:	4b01      	ldr	r3, [pc, #4]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	e00d      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	10908100 	.word	0x10908100
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2202      	movs	r2, #2
 80025a6:	613a      	str	r2, [r7, #16]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	60fa      	str	r2, [r7, #12]
  return result;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0b7      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025ce:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	496a      	ldr	r1, [pc, #424]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f023 0203 	bic.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	495d      	ldr	r1, [pc, #372]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261e:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4956      	ldr	r1, [pc, #344]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800262c:	4313      	orrs	r3, r2
 800262e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	494e      	ldr	r1, [pc, #312]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f023 0210 	bic.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4947      	ldr	r1, [pc, #284]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002668:	4313      	orrs	r3, r2
 800266a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002678:	4b42      	ldr	r3, [pc, #264]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	493f      	ldr	r1, [pc, #252]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f023 0220 	bic.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4938      	ldr	r1, [pc, #224]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026b4:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4930      	ldr	r1, [pc, #192]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	4921      	ldr	r1, [pc, #132]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	491a      	ldr	r1, [pc, #104]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	4912      	ldr	r1, [pc, #72]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800273a:	4313      	orrs	r3, r2
 800273c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	490b      	ldr	r1, [pc, #44]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002758:	4313      	orrs	r3, r2
 800275a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	4903      	ldr	r1, [pc, #12]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002776:	4313      	orrs	r3, r2
 8002778:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3748      	adds	r7, #72	; 0x48
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e040      	b.n	800281c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fd fef8 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8c0 	bl	800294c <UART_SetConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 face 	bl	8002d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb55 	bl	8002ec4 <UART_CheckIdleState>
 800281a:	4603      	mov	r3, r0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4613      	mov	r3, r2
 8002832:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 8081 	bne.w	8002940 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_UART_Transmit+0x26>
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e079      	b.n	8002942 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x38>
 8002858:	2302      	movs	r3, #2
 800285a:	e072      	b.n	8002942 <HAL_UART_Transmit+0x11e>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2221      	movs	r2, #33	; 0x21
 800286e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002870:	f7fe f846 	bl	8000900 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	d108      	bne.n	80028a2 <HAL_UART_Transmit+0x7e>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	e003      	b.n	80028aa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028aa:	e02d      	b.n	8002908 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb49 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03d      	b.n	8002942 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d8:	b292      	uxth	r2, r2
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3302      	adds	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e008      	b.n	80028f6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b292      	uxth	r2, r2
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1cb      	bne.n	80028ac <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2200      	movs	r2, #0
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fb15 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e009      	b.n	8002942 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
	...

0800294c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002954:	2300      	movs	r3, #0
 8002956:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800297e:	f023 030c 	bic.w	r3, r3, #12
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	6939      	ldr	r1, [r7, #16]
 8002988:	430b      	orrs	r3, r1
 800298a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4aa9      	ldr	r2, [pc, #676]	; (8002c70 <UART_SetConfig+0x324>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d121      	bne.n	8002a14 <UART_SetConfig+0xc8>
 80029d0:	4ba8      	ldr	r3, [pc, #672]	; (8002c74 <UART_SetConfig+0x328>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d817      	bhi.n	8002a0c <UART_SetConfig+0xc0>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <UART_SetConfig+0x98>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a01 	.word	0x08002a01
 80029ec:	08002a07 	.word	0x08002a07
 80029f0:	080029fb 	.word	0x080029fb
 80029f4:	2301      	movs	r3, #1
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e0b2      	b.n	8002b60 <UART_SetConfig+0x214>
 80029fa:	2302      	movs	r3, #2
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e0af      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a00:	2304      	movs	r3, #4
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e0ac      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a06:	2308      	movs	r3, #8
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e0a9      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	bf00      	nop
 8002a12:	e0a5      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a97      	ldr	r2, [pc, #604]	; (8002c78 <UART_SetConfig+0x32c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d123      	bne.n	8002a66 <UART_SetConfig+0x11a>
 8002a1e:	4b95      	ldr	r3, [pc, #596]	; (8002c74 <UART_SetConfig+0x328>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d012      	beq.n	8002a52 <UART_SetConfig+0x106>
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d802      	bhi.n	8002a38 <UART_SetConfig+0xec>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <UART_SetConfig+0xfa>
 8002a36:	e012      	b.n	8002a5e <UART_SetConfig+0x112>
 8002a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a3c:	d00c      	beq.n	8002a58 <UART_SetConfig+0x10c>
 8002a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a42:	d003      	beq.n	8002a4c <UART_SetConfig+0x100>
 8002a44:	e00b      	b.n	8002a5e <UART_SetConfig+0x112>
 8002a46:	2300      	movs	r3, #0
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e089      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e086      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a52:	2304      	movs	r3, #4
 8002a54:	77fb      	strb	r3, [r7, #31]
 8002a56:	e083      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a58:	2308      	movs	r3, #8
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e080      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a5e:	2310      	movs	r3, #16
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	bf00      	nop
 8002a64:	e07c      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a84      	ldr	r2, [pc, #528]	; (8002c7c <UART_SetConfig+0x330>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d123      	bne.n	8002ab8 <UART_SetConfig+0x16c>
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <UART_SetConfig+0x328>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a7c:	d012      	beq.n	8002aa4 <UART_SetConfig+0x158>
 8002a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a82:	d802      	bhi.n	8002a8a <UART_SetConfig+0x13e>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <UART_SetConfig+0x14c>
 8002a88:	e012      	b.n	8002ab0 <UART_SetConfig+0x164>
 8002a8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a8e:	d00c      	beq.n	8002aaa <UART_SetConfig+0x15e>
 8002a90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a94:	d003      	beq.n	8002a9e <UART_SetConfig+0x152>
 8002a96:	e00b      	b.n	8002ab0 <UART_SetConfig+0x164>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e060      	b.n	8002b60 <UART_SetConfig+0x214>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e05d      	b.n	8002b60 <UART_SetConfig+0x214>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e05a      	b.n	8002b60 <UART_SetConfig+0x214>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e057      	b.n	8002b60 <UART_SetConfig+0x214>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	bf00      	nop
 8002ab6:	e053      	b.n	8002b60 <UART_SetConfig+0x214>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a70      	ldr	r2, [pc, #448]	; (8002c80 <UART_SetConfig+0x334>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d123      	bne.n	8002b0a <UART_SetConfig+0x1be>
 8002ac2:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <UART_SetConfig+0x328>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ace:	d012      	beq.n	8002af6 <UART_SetConfig+0x1aa>
 8002ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad4:	d802      	bhi.n	8002adc <UART_SetConfig+0x190>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <UART_SetConfig+0x19e>
 8002ada:	e012      	b.n	8002b02 <UART_SetConfig+0x1b6>
 8002adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae0:	d00c      	beq.n	8002afc <UART_SetConfig+0x1b0>
 8002ae2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ae6:	d003      	beq.n	8002af0 <UART_SetConfig+0x1a4>
 8002ae8:	e00b      	b.n	8002b02 <UART_SetConfig+0x1b6>
 8002aea:	2300      	movs	r3, #0
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e037      	b.n	8002b60 <UART_SetConfig+0x214>
 8002af0:	2302      	movs	r3, #2
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e034      	b.n	8002b60 <UART_SetConfig+0x214>
 8002af6:	2304      	movs	r3, #4
 8002af8:	77fb      	strb	r3, [r7, #31]
 8002afa:	e031      	b.n	8002b60 <UART_SetConfig+0x214>
 8002afc:	2308      	movs	r3, #8
 8002afe:	77fb      	strb	r3, [r7, #31]
 8002b00:	e02e      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b02:	2310      	movs	r3, #16
 8002b04:	77fb      	strb	r3, [r7, #31]
 8002b06:	bf00      	nop
 8002b08:	e02a      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <UART_SetConfig+0x338>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d123      	bne.n	8002b5c <UART_SetConfig+0x210>
 8002b14:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <UART_SetConfig+0x328>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d012      	beq.n	8002b48 <UART_SetConfig+0x1fc>
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d802      	bhi.n	8002b2e <UART_SetConfig+0x1e2>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <UART_SetConfig+0x1f0>
 8002b2c:	e012      	b.n	8002b54 <UART_SetConfig+0x208>
 8002b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b32:	d00c      	beq.n	8002b4e <UART_SetConfig+0x202>
 8002b34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b38:	d003      	beq.n	8002b42 <UART_SetConfig+0x1f6>
 8002b3a:	e00b      	b.n	8002b54 <UART_SetConfig+0x208>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
 8002b40:	e00e      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b42:	2302      	movs	r3, #2
 8002b44:	77fb      	strb	r3, [r7, #31]
 8002b46:	e00b      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	77fb      	strb	r3, [r7, #31]
 8002b4c:	e008      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	77fb      	strb	r3, [r7, #31]
 8002b52:	e005      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b54:	2310      	movs	r3, #16
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	bf00      	nop
 8002b5a:	e001      	b.n	8002b60 <UART_SetConfig+0x214>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b68:	f040 808e 	bne.w	8002c88 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002b6c:	7ffb      	ldrb	r3, [r7, #31]
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d85e      	bhi.n	8002c30 <UART_SetConfig+0x2e4>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0x22c>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002bbd 	.word	0x08002bbd
 8002b80:	08002bdd 	.word	0x08002bdd
 8002b84:	08002c31 	.word	0x08002c31
 8002b88:	08002bf9 	.word	0x08002bf9
 8002b8c:	08002c31 	.word	0x08002c31
 8002b90:	08002c31 	.word	0x08002c31
 8002b94:	08002c31 	.word	0x08002c31
 8002b98:	08002c19 	.word	0x08002c19
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff fc00 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	005a      	lsls	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	61bb      	str	r3, [r7, #24]
        break;
 8002bba:	e03c      	b.n	8002c36 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fc12 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	005a      	lsls	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	085b      	lsrs	r3, r3, #1
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	61bb      	str	r3, [r7, #24]
        break;
 8002bda:	e02c      	b.n	8002c36 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002be6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	6852      	ldr	r2, [r2, #4]
 8002bee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	61bb      	str	r3, [r7, #24]
        break;
 8002bf6:	e01e      	b.n	8002c36 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf8:	f7ff fb5c 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002bfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	005a      	lsls	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	61bb      	str	r3, [r7, #24]
        break;
 8002c16:	e00e      	b.n	8002c36 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	61bb      	str	r3, [r7, #24]
        break;
 8002c2e:	e002      	b.n	8002c36 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
        break;
 8002c34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b0f      	cmp	r3, #15
 8002c3a:	d916      	bls.n	8002c6a <UART_SetConfig+0x31e>
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c42:	d212      	bcs.n	8002c6a <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f023 030f 	bic.w	r3, r3, #15
 8002c4c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	085b      	lsrs	r3, r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	897a      	ldrh	r2, [r7, #10]
 8002c66:	60da      	str	r2, [r3, #12]
 8002c68:	e07e      	b.n	8002d68 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
 8002c6e:	e07b      	b.n	8002d68 <UART_SetConfig+0x41c>
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	40004800 	.word	0x40004800
 8002c80:	40004c00 	.word	0x40004c00
 8002c84:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8002c88:	7ffb      	ldrb	r3, [r7, #31]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d85b      	bhi.n	8002d46 <UART_SetConfig+0x3fa>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <UART_SetConfig+0x348>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002cd7 	.word	0x08002cd7
 8002c9c:	08002cf5 	.word	0x08002cf5
 8002ca0:	08002d47 	.word	0x08002d47
 8002ca4:	08002d11 	.word	0x08002d11
 8002ca8:	08002d47 	.word	0x08002d47
 8002cac:	08002d47 	.word	0x08002d47
 8002cb0:	08002d47 	.word	0x08002d47
 8002cb4:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb8:	f7ff fb72 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	085a      	lsrs	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	441a      	add	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e03a      	b.n	8002d4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cd6:	f7ff fb85 	bl	80023e4 <HAL_RCC_GetPCLK2Freq>
 8002cda:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	085a      	lsrs	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
        break;
 8002cf2:	e02b      	b.n	8002d4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002cfe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6852      	ldr	r2, [r2, #4]
 8002d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	61bb      	str	r3, [r7, #24]
        break;
 8002d0e:	e01d      	b.n	8002d4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d10:	f7ff fad0 	bl	80022b4 <HAL_RCC_GetSysClockFreq>
 8002d14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	085a      	lsrs	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	61bb      	str	r3, [r7, #24]
        break;
 8002d2c:	e00e      	b.n	8002d4c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	61bb      	str	r3, [r7, #24]
        break;
 8002d44:	e002      	b.n	8002d4c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75fb      	strb	r3, [r7, #23]
        break;
 8002d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	d908      	bls.n	8002d64 <UART_SetConfig+0x418>
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d204      	bcs.n	8002d64 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e001      	b.n	8002d68 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop

08002d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f003 0310 	and.w	r3, r3, #16
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7e:	d10a      	bne.n	8002e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ed2:	f7fd fd15 	bl	8000900 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10e      	bne.n	8002f04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 f82a 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e020      	b.n	8002f46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d10e      	bne.n	8002f30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f814 	bl	8002f4e <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e00a      	b.n	8002f46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	e05d      	b.n	800301c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d059      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f68:	f7fd fcca 	bl	8000900 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11b      	bne.n	8002fb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e042      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d02b      	beq.n	800301c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd2:	d123      	bne.n	800301c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fdc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e00f      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	429a      	cmp	r2, r3
 8003038:	d092      	beq.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <__errno>:
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__errno+0x8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0d      	ldr	r6, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1ba4      	subs	r4, r4, r6
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2500      	movs	r5, #0
 800305c:	42a5      	cmp	r5, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4e0b      	ldr	r6, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f001 f8c8 	bl	80041f8 <_init>
 8003068:	1ba4      	subs	r4, r4, r6
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2500      	movs	r5, #0
 800306e:	42a5      	cmp	r5, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003078:	4798      	blx	r3
 800307a:	3501      	adds	r5, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003082:	4798      	blx	r3
 8003084:	3501      	adds	r5, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08004384 	.word	0x08004384
 800308c:	08004384 	.word	0x08004384
 8003090:	08004384 	.word	0x08004384
 8003094:	08004388 	.word	0x08004388

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <iprintf>:
 80030a8:	b40f      	push	{r0, r1, r2, r3}
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <iprintf+0x2c>)
 80030ac:	b513      	push	{r0, r1, r4, lr}
 80030ae:	681c      	ldr	r4, [r3, #0]
 80030b0:	b124      	cbz	r4, 80030bc <iprintf+0x14>
 80030b2:	69a3      	ldr	r3, [r4, #24]
 80030b4:	b913      	cbnz	r3, 80030bc <iprintf+0x14>
 80030b6:	4620      	mov	r0, r4
 80030b8:	f000 f86e 	bl	8003198 <__sinit>
 80030bc:	ab05      	add	r3, sp, #20
 80030be:	9a04      	ldr	r2, [sp, #16]
 80030c0:	68a1      	ldr	r1, [r4, #8]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 fac7 	bl	8003658 <_vfiprintf_r>
 80030ca:	b002      	add	sp, #8
 80030cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030d0:	b004      	add	sp, #16
 80030d2:	4770      	bx	lr
 80030d4:	2000000c 	.word	0x2000000c

080030d8 <_vsiprintf_r>:
 80030d8:	b500      	push	{lr}
 80030da:	b09b      	sub	sp, #108	; 0x6c
 80030dc:	9100      	str	r1, [sp, #0]
 80030de:	9104      	str	r1, [sp, #16]
 80030e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e4:	9105      	str	r1, [sp, #20]
 80030e6:	9102      	str	r1, [sp, #8]
 80030e8:	4905      	ldr	r1, [pc, #20]	; (8003100 <_vsiprintf_r+0x28>)
 80030ea:	9103      	str	r1, [sp, #12]
 80030ec:	4669      	mov	r1, sp
 80030ee:	f000 f991 	bl	8003414 <_svfiprintf_r>
 80030f2:	9b00      	ldr	r3, [sp, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	b01b      	add	sp, #108	; 0x6c
 80030fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80030fe:	bf00      	nop
 8003100:	ffff0208 	.word	0xffff0208

08003104 <vsiprintf>:
 8003104:	4613      	mov	r3, r2
 8003106:	460a      	mov	r2, r1
 8003108:	4601      	mov	r1, r0
 800310a:	4802      	ldr	r0, [pc, #8]	; (8003114 <vsiprintf+0x10>)
 800310c:	6800      	ldr	r0, [r0, #0]
 800310e:	f7ff bfe3 	b.w	80030d8 <_vsiprintf_r>
 8003112:	bf00      	nop
 8003114:	2000000c 	.word	0x2000000c

08003118 <std>:
 8003118:	2300      	movs	r3, #0
 800311a:	b510      	push	{r4, lr}
 800311c:	4604      	mov	r4, r0
 800311e:	e9c0 3300 	strd	r3, r3, [r0]
 8003122:	6083      	str	r3, [r0, #8]
 8003124:	8181      	strh	r1, [r0, #12]
 8003126:	6643      	str	r3, [r0, #100]	; 0x64
 8003128:	81c2      	strh	r2, [r0, #14]
 800312a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800312e:	6183      	str	r3, [r0, #24]
 8003130:	4619      	mov	r1, r3
 8003132:	2208      	movs	r2, #8
 8003134:	305c      	adds	r0, #92	; 0x5c
 8003136:	f7ff ffaf 	bl	8003098 <memset>
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <std+0x38>)
 800313c:	6263      	str	r3, [r4, #36]	; 0x24
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <std+0x3c>)
 8003140:	62a3      	str	r3, [r4, #40]	; 0x28
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <std+0x40>)
 8003144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <std+0x44>)
 8003148:	6224      	str	r4, [r4, #32]
 800314a:	6323      	str	r3, [r4, #48]	; 0x30
 800314c:	bd10      	pop	{r4, pc}
 800314e:	bf00      	nop
 8003150:	08003bb5 	.word	0x08003bb5
 8003154:	08003bd7 	.word	0x08003bd7
 8003158:	08003c0f 	.word	0x08003c0f
 800315c:	08003c33 	.word	0x08003c33

08003160 <_cleanup_r>:
 8003160:	4901      	ldr	r1, [pc, #4]	; (8003168 <_cleanup_r+0x8>)
 8003162:	f000 b885 	b.w	8003270 <_fwalk_reent>
 8003166:	bf00      	nop
 8003168:	08003f0d 	.word	0x08003f0d

0800316c <__sfmoreglue>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	1e4a      	subs	r2, r1, #1
 8003170:	2568      	movs	r5, #104	; 0x68
 8003172:	4355      	muls	r5, r2
 8003174:	460e      	mov	r6, r1
 8003176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800317a:	f000 f897 	bl	80032ac <_malloc_r>
 800317e:	4604      	mov	r4, r0
 8003180:	b140      	cbz	r0, 8003194 <__sfmoreglue+0x28>
 8003182:	2100      	movs	r1, #0
 8003184:	e9c0 1600 	strd	r1, r6, [r0]
 8003188:	300c      	adds	r0, #12
 800318a:	60a0      	str	r0, [r4, #8]
 800318c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003190:	f7ff ff82 	bl	8003098 <memset>
 8003194:	4620      	mov	r0, r4
 8003196:	bd70      	pop	{r4, r5, r6, pc}

08003198 <__sinit>:
 8003198:	6983      	ldr	r3, [r0, #24]
 800319a:	b510      	push	{r4, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	bb33      	cbnz	r3, 80031ee <__sinit+0x56>
 80031a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80031a4:	6503      	str	r3, [r0, #80]	; 0x50
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <__sinit+0x58>)
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <__sinit+0x5c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6282      	str	r2, [r0, #40]	; 0x28
 80031ae:	4298      	cmp	r0, r3
 80031b0:	bf04      	itt	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	6183      	streq	r3, [r0, #24]
 80031b6:	f000 f81f 	bl	80031f8 <__sfp>
 80031ba:	6060      	str	r0, [r4, #4]
 80031bc:	4620      	mov	r0, r4
 80031be:	f000 f81b 	bl	80031f8 <__sfp>
 80031c2:	60a0      	str	r0, [r4, #8]
 80031c4:	4620      	mov	r0, r4
 80031c6:	f000 f817 	bl	80031f8 <__sfp>
 80031ca:	2200      	movs	r2, #0
 80031cc:	60e0      	str	r0, [r4, #12]
 80031ce:	2104      	movs	r1, #4
 80031d0:	6860      	ldr	r0, [r4, #4]
 80031d2:	f7ff ffa1 	bl	8003118 <std>
 80031d6:	2201      	movs	r2, #1
 80031d8:	2109      	movs	r1, #9
 80031da:	68a0      	ldr	r0, [r4, #8]
 80031dc:	f7ff ff9c 	bl	8003118 <std>
 80031e0:	2202      	movs	r2, #2
 80031e2:	2112      	movs	r1, #18
 80031e4:	68e0      	ldr	r0, [r4, #12]
 80031e6:	f7ff ff97 	bl	8003118 <std>
 80031ea:	2301      	movs	r3, #1
 80031ec:	61a3      	str	r3, [r4, #24]
 80031ee:	bd10      	pop	{r4, pc}
 80031f0:	080042ec 	.word	0x080042ec
 80031f4:	08003161 	.word	0x08003161

080031f8 <__sfp>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <__sfp+0x70>)
 80031fc:	681e      	ldr	r6, [r3, #0]
 80031fe:	69b3      	ldr	r3, [r6, #24]
 8003200:	4607      	mov	r7, r0
 8003202:	b913      	cbnz	r3, 800320a <__sfp+0x12>
 8003204:	4630      	mov	r0, r6
 8003206:	f7ff ffc7 	bl	8003198 <__sinit>
 800320a:	3648      	adds	r6, #72	; 0x48
 800320c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003210:	3b01      	subs	r3, #1
 8003212:	d503      	bpl.n	800321c <__sfp+0x24>
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	b133      	cbz	r3, 8003226 <__sfp+0x2e>
 8003218:	6836      	ldr	r6, [r6, #0]
 800321a:	e7f7      	b.n	800320c <__sfp+0x14>
 800321c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003220:	b16d      	cbz	r5, 800323e <__sfp+0x46>
 8003222:	3468      	adds	r4, #104	; 0x68
 8003224:	e7f4      	b.n	8003210 <__sfp+0x18>
 8003226:	2104      	movs	r1, #4
 8003228:	4638      	mov	r0, r7
 800322a:	f7ff ff9f 	bl	800316c <__sfmoreglue>
 800322e:	6030      	str	r0, [r6, #0]
 8003230:	2800      	cmp	r0, #0
 8003232:	d1f1      	bne.n	8003218 <__sfp+0x20>
 8003234:	230c      	movs	r3, #12
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4604      	mov	r4, r0
 800323a:	4620      	mov	r0, r4
 800323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <__sfp+0x74>)
 8003240:	6665      	str	r5, [r4, #100]	; 0x64
 8003242:	e9c4 5500 	strd	r5, r5, [r4]
 8003246:	60a5      	str	r5, [r4, #8]
 8003248:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800324c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003250:	2208      	movs	r2, #8
 8003252:	4629      	mov	r1, r5
 8003254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003258:	f7ff ff1e 	bl	8003098 <memset>
 800325c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003264:	e7e9      	b.n	800323a <__sfp+0x42>
 8003266:	bf00      	nop
 8003268:	080042ec 	.word	0x080042ec
 800326c:	ffff0001 	.word	0xffff0001

08003270 <_fwalk_reent>:
 8003270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003274:	4680      	mov	r8, r0
 8003276:	4689      	mov	r9, r1
 8003278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800327c:	2600      	movs	r6, #0
 800327e:	b914      	cbnz	r4, 8003286 <_fwalk_reent+0x16>
 8003280:	4630      	mov	r0, r6
 8003282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003286:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800328a:	3f01      	subs	r7, #1
 800328c:	d501      	bpl.n	8003292 <_fwalk_reent+0x22>
 800328e:	6824      	ldr	r4, [r4, #0]
 8003290:	e7f5      	b.n	800327e <_fwalk_reent+0xe>
 8003292:	89ab      	ldrh	r3, [r5, #12]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d907      	bls.n	80032a8 <_fwalk_reent+0x38>
 8003298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800329c:	3301      	adds	r3, #1
 800329e:	d003      	beq.n	80032a8 <_fwalk_reent+0x38>
 80032a0:	4629      	mov	r1, r5
 80032a2:	4640      	mov	r0, r8
 80032a4:	47c8      	blx	r9
 80032a6:	4306      	orrs	r6, r0
 80032a8:	3568      	adds	r5, #104	; 0x68
 80032aa:	e7ee      	b.n	800328a <_fwalk_reent+0x1a>

080032ac <_malloc_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	1ccd      	adds	r5, r1, #3
 80032b0:	f025 0503 	bic.w	r5, r5, #3
 80032b4:	3508      	adds	r5, #8
 80032b6:	2d0c      	cmp	r5, #12
 80032b8:	bf38      	it	cc
 80032ba:	250c      	movcc	r5, #12
 80032bc:	2d00      	cmp	r5, #0
 80032be:	4606      	mov	r6, r0
 80032c0:	db01      	blt.n	80032c6 <_malloc_r+0x1a>
 80032c2:	42a9      	cmp	r1, r5
 80032c4:	d903      	bls.n	80032ce <_malloc_r+0x22>
 80032c6:	230c      	movs	r3, #12
 80032c8:	6033      	str	r3, [r6, #0]
 80032ca:	2000      	movs	r0, #0
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	f000 fee1 	bl	8004094 <__malloc_lock>
 80032d2:	4a21      	ldr	r2, [pc, #132]	; (8003358 <_malloc_r+0xac>)
 80032d4:	6814      	ldr	r4, [r2, #0]
 80032d6:	4621      	mov	r1, r4
 80032d8:	b991      	cbnz	r1, 8003300 <_malloc_r+0x54>
 80032da:	4c20      	ldr	r4, [pc, #128]	; (800335c <_malloc_r+0xb0>)
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	b91b      	cbnz	r3, 80032e8 <_malloc_r+0x3c>
 80032e0:	4630      	mov	r0, r6
 80032e2:	f000 fc57 	bl	8003b94 <_sbrk_r>
 80032e6:	6020      	str	r0, [r4, #0]
 80032e8:	4629      	mov	r1, r5
 80032ea:	4630      	mov	r0, r6
 80032ec:	f000 fc52 	bl	8003b94 <_sbrk_r>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d124      	bne.n	800333e <_malloc_r+0x92>
 80032f4:	230c      	movs	r3, #12
 80032f6:	6033      	str	r3, [r6, #0]
 80032f8:	4630      	mov	r0, r6
 80032fa:	f000 fecc 	bl	8004096 <__malloc_unlock>
 80032fe:	e7e4      	b.n	80032ca <_malloc_r+0x1e>
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	1b5b      	subs	r3, r3, r5
 8003304:	d418      	bmi.n	8003338 <_malloc_r+0x8c>
 8003306:	2b0b      	cmp	r3, #11
 8003308:	d90f      	bls.n	800332a <_malloc_r+0x7e>
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	50cd      	str	r5, [r1, r3]
 800330e:	18cc      	adds	r4, r1, r3
 8003310:	4630      	mov	r0, r6
 8003312:	f000 fec0 	bl	8004096 <__malloc_unlock>
 8003316:	f104 000b 	add.w	r0, r4, #11
 800331a:	1d23      	adds	r3, r4, #4
 800331c:	f020 0007 	bic.w	r0, r0, #7
 8003320:	1ac3      	subs	r3, r0, r3
 8003322:	d0d3      	beq.n	80032cc <_malloc_r+0x20>
 8003324:	425a      	negs	r2, r3
 8003326:	50e2      	str	r2, [r4, r3]
 8003328:	e7d0      	b.n	80032cc <_malloc_r+0x20>
 800332a:	428c      	cmp	r4, r1
 800332c:	684b      	ldr	r3, [r1, #4]
 800332e:	bf16      	itet	ne
 8003330:	6063      	strne	r3, [r4, #4]
 8003332:	6013      	streq	r3, [r2, #0]
 8003334:	460c      	movne	r4, r1
 8003336:	e7eb      	b.n	8003310 <_malloc_r+0x64>
 8003338:	460c      	mov	r4, r1
 800333a:	6849      	ldr	r1, [r1, #4]
 800333c:	e7cc      	b.n	80032d8 <_malloc_r+0x2c>
 800333e:	1cc4      	adds	r4, r0, #3
 8003340:	f024 0403 	bic.w	r4, r4, #3
 8003344:	42a0      	cmp	r0, r4
 8003346:	d005      	beq.n	8003354 <_malloc_r+0xa8>
 8003348:	1a21      	subs	r1, r4, r0
 800334a:	4630      	mov	r0, r6
 800334c:	f000 fc22 	bl	8003b94 <_sbrk_r>
 8003350:	3001      	adds	r0, #1
 8003352:	d0cf      	beq.n	80032f4 <_malloc_r+0x48>
 8003354:	6025      	str	r5, [r4, #0]
 8003356:	e7db      	b.n	8003310 <_malloc_r+0x64>
 8003358:	20000094 	.word	0x20000094
 800335c:	20000098 	.word	0x20000098

08003360 <__ssputs_r>:
 8003360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	688e      	ldr	r6, [r1, #8]
 8003366:	429e      	cmp	r6, r3
 8003368:	4682      	mov	sl, r0
 800336a:	460c      	mov	r4, r1
 800336c:	4690      	mov	r8, r2
 800336e:	4699      	mov	r9, r3
 8003370:	d837      	bhi.n	80033e2 <__ssputs_r+0x82>
 8003372:	898a      	ldrh	r2, [r1, #12]
 8003374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003378:	d031      	beq.n	80033de <__ssputs_r+0x7e>
 800337a:	6825      	ldr	r5, [r4, #0]
 800337c:	6909      	ldr	r1, [r1, #16]
 800337e:	1a6f      	subs	r7, r5, r1
 8003380:	6965      	ldr	r5, [r4, #20]
 8003382:	2302      	movs	r3, #2
 8003384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003388:	fb95 f5f3 	sdiv	r5, r5, r3
 800338c:	f109 0301 	add.w	r3, r9, #1
 8003390:	443b      	add	r3, r7
 8003392:	429d      	cmp	r5, r3
 8003394:	bf38      	it	cc
 8003396:	461d      	movcc	r5, r3
 8003398:	0553      	lsls	r3, r2, #21
 800339a:	d530      	bpl.n	80033fe <__ssputs_r+0x9e>
 800339c:	4629      	mov	r1, r5
 800339e:	f7ff ff85 	bl	80032ac <_malloc_r>
 80033a2:	4606      	mov	r6, r0
 80033a4:	b950      	cbnz	r0, 80033bc <__ssputs_r+0x5c>
 80033a6:	230c      	movs	r3, #12
 80033a8:	f8ca 3000 	str.w	r3, [sl]
 80033ac:	89a3      	ldrh	r3, [r4, #12]
 80033ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b2:	81a3      	strh	r3, [r4, #12]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033bc:	463a      	mov	r2, r7
 80033be:	6921      	ldr	r1, [r4, #16]
 80033c0:	f000 fe44 	bl	800404c <memcpy>
 80033c4:	89a3      	ldrh	r3, [r4, #12]
 80033c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ce:	81a3      	strh	r3, [r4, #12]
 80033d0:	6126      	str	r6, [r4, #16]
 80033d2:	6165      	str	r5, [r4, #20]
 80033d4:	443e      	add	r6, r7
 80033d6:	1bed      	subs	r5, r5, r7
 80033d8:	6026      	str	r6, [r4, #0]
 80033da:	60a5      	str	r5, [r4, #8]
 80033dc:	464e      	mov	r6, r9
 80033de:	454e      	cmp	r6, r9
 80033e0:	d900      	bls.n	80033e4 <__ssputs_r+0x84>
 80033e2:	464e      	mov	r6, r9
 80033e4:	4632      	mov	r2, r6
 80033e6:	4641      	mov	r1, r8
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	f000 fe3a 	bl	8004062 <memmove>
 80033ee:	68a3      	ldr	r3, [r4, #8]
 80033f0:	1b9b      	subs	r3, r3, r6
 80033f2:	60a3      	str	r3, [r4, #8]
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	441e      	add	r6, r3
 80033f8:	6026      	str	r6, [r4, #0]
 80033fa:	2000      	movs	r0, #0
 80033fc:	e7dc      	b.n	80033b8 <__ssputs_r+0x58>
 80033fe:	462a      	mov	r2, r5
 8003400:	f000 fe98 	bl	8004134 <_realloc_r>
 8003404:	4606      	mov	r6, r0
 8003406:	2800      	cmp	r0, #0
 8003408:	d1e2      	bne.n	80033d0 <__ssputs_r+0x70>
 800340a:	6921      	ldr	r1, [r4, #16]
 800340c:	4650      	mov	r0, sl
 800340e:	f000 fe43 	bl	8004098 <_free_r>
 8003412:	e7c8      	b.n	80033a6 <__ssputs_r+0x46>

08003414 <_svfiprintf_r>:
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	461d      	mov	r5, r3
 800341a:	898b      	ldrh	r3, [r1, #12]
 800341c:	061f      	lsls	r7, r3, #24
 800341e:	b09d      	sub	sp, #116	; 0x74
 8003420:	4680      	mov	r8, r0
 8003422:	460c      	mov	r4, r1
 8003424:	4616      	mov	r6, r2
 8003426:	d50f      	bpl.n	8003448 <_svfiprintf_r+0x34>
 8003428:	690b      	ldr	r3, [r1, #16]
 800342a:	b96b      	cbnz	r3, 8003448 <_svfiprintf_r+0x34>
 800342c:	2140      	movs	r1, #64	; 0x40
 800342e:	f7ff ff3d 	bl	80032ac <_malloc_r>
 8003432:	6020      	str	r0, [r4, #0]
 8003434:	6120      	str	r0, [r4, #16]
 8003436:	b928      	cbnz	r0, 8003444 <_svfiprintf_r+0x30>
 8003438:	230c      	movs	r3, #12
 800343a:	f8c8 3000 	str.w	r3, [r8]
 800343e:	f04f 30ff 	mov.w	r0, #4294967295
 8003442:	e0c8      	b.n	80035d6 <_svfiprintf_r+0x1c2>
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	6163      	str	r3, [r4, #20]
 8003448:	2300      	movs	r3, #0
 800344a:	9309      	str	r3, [sp, #36]	; 0x24
 800344c:	2320      	movs	r3, #32
 800344e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003452:	2330      	movs	r3, #48	; 0x30
 8003454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003458:	9503      	str	r5, [sp, #12]
 800345a:	f04f 0b01 	mov.w	fp, #1
 800345e:	4637      	mov	r7, r6
 8003460:	463d      	mov	r5, r7
 8003462:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003466:	b10b      	cbz	r3, 800346c <_svfiprintf_r+0x58>
 8003468:	2b25      	cmp	r3, #37	; 0x25
 800346a:	d13e      	bne.n	80034ea <_svfiprintf_r+0xd6>
 800346c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003470:	d00b      	beq.n	800348a <_svfiprintf_r+0x76>
 8003472:	4653      	mov	r3, sl
 8003474:	4632      	mov	r2, r6
 8003476:	4621      	mov	r1, r4
 8003478:	4640      	mov	r0, r8
 800347a:	f7ff ff71 	bl	8003360 <__ssputs_r>
 800347e:	3001      	adds	r0, #1
 8003480:	f000 80a4 	beq.w	80035cc <_svfiprintf_r+0x1b8>
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	4453      	add	r3, sl
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	783b      	ldrb	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 809d 	beq.w	80035cc <_svfiprintf_r+0x1b8>
 8003492:	2300      	movs	r3, #0
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	9307      	str	r3, [sp, #28]
 80034a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034a4:	931a      	str	r3, [sp, #104]	; 0x68
 80034a6:	462f      	mov	r7, r5
 80034a8:	2205      	movs	r2, #5
 80034aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80034ae:	4850      	ldr	r0, [pc, #320]	; (80035f0 <_svfiprintf_r+0x1dc>)
 80034b0:	f7fc fe96 	bl	80001e0 <memchr>
 80034b4:	9b04      	ldr	r3, [sp, #16]
 80034b6:	b9d0      	cbnz	r0, 80034ee <_svfiprintf_r+0xda>
 80034b8:	06d9      	lsls	r1, r3, #27
 80034ba:	bf44      	itt	mi
 80034bc:	2220      	movmi	r2, #32
 80034be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034c2:	071a      	lsls	r2, r3, #28
 80034c4:	bf44      	itt	mi
 80034c6:	222b      	movmi	r2, #43	; 0x2b
 80034c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034cc:	782a      	ldrb	r2, [r5, #0]
 80034ce:	2a2a      	cmp	r2, #42	; 0x2a
 80034d0:	d015      	beq.n	80034fe <_svfiprintf_r+0xea>
 80034d2:	9a07      	ldr	r2, [sp, #28]
 80034d4:	462f      	mov	r7, r5
 80034d6:	2000      	movs	r0, #0
 80034d8:	250a      	movs	r5, #10
 80034da:	4639      	mov	r1, r7
 80034dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034e0:	3b30      	subs	r3, #48	; 0x30
 80034e2:	2b09      	cmp	r3, #9
 80034e4:	d94d      	bls.n	8003582 <_svfiprintf_r+0x16e>
 80034e6:	b1b8      	cbz	r0, 8003518 <_svfiprintf_r+0x104>
 80034e8:	e00f      	b.n	800350a <_svfiprintf_r+0xf6>
 80034ea:	462f      	mov	r7, r5
 80034ec:	e7b8      	b.n	8003460 <_svfiprintf_r+0x4c>
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <_svfiprintf_r+0x1dc>)
 80034f0:	1a80      	subs	r0, r0, r2
 80034f2:	fa0b f000 	lsl.w	r0, fp, r0
 80034f6:	4318      	orrs	r0, r3
 80034f8:	9004      	str	r0, [sp, #16]
 80034fa:	463d      	mov	r5, r7
 80034fc:	e7d3      	b.n	80034a6 <_svfiprintf_r+0x92>
 80034fe:	9a03      	ldr	r2, [sp, #12]
 8003500:	1d11      	adds	r1, r2, #4
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	9103      	str	r1, [sp, #12]
 8003506:	2a00      	cmp	r2, #0
 8003508:	db01      	blt.n	800350e <_svfiprintf_r+0xfa>
 800350a:	9207      	str	r2, [sp, #28]
 800350c:	e004      	b.n	8003518 <_svfiprintf_r+0x104>
 800350e:	4252      	negs	r2, r2
 8003510:	f043 0302 	orr.w	r3, r3, #2
 8003514:	9207      	str	r2, [sp, #28]
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	783b      	ldrb	r3, [r7, #0]
 800351a:	2b2e      	cmp	r3, #46	; 0x2e
 800351c:	d10c      	bne.n	8003538 <_svfiprintf_r+0x124>
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d133      	bne.n	800358c <_svfiprintf_r+0x178>
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	9203      	str	r2, [sp, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	bfb8      	it	lt
 8003530:	f04f 33ff 	movlt.w	r3, #4294967295
 8003534:	3702      	adds	r7, #2
 8003536:	9305      	str	r3, [sp, #20]
 8003538:	4d2e      	ldr	r5, [pc, #184]	; (80035f4 <_svfiprintf_r+0x1e0>)
 800353a:	7839      	ldrb	r1, [r7, #0]
 800353c:	2203      	movs	r2, #3
 800353e:	4628      	mov	r0, r5
 8003540:	f7fc fe4e 	bl	80001e0 <memchr>
 8003544:	b138      	cbz	r0, 8003556 <_svfiprintf_r+0x142>
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	1b40      	subs	r0, r0, r5
 800354a:	fa03 f000 	lsl.w	r0, r3, r0
 800354e:	9b04      	ldr	r3, [sp, #16]
 8003550:	4303      	orrs	r3, r0
 8003552:	3701      	adds	r7, #1
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	7839      	ldrb	r1, [r7, #0]
 8003558:	4827      	ldr	r0, [pc, #156]	; (80035f8 <_svfiprintf_r+0x1e4>)
 800355a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800355e:	2206      	movs	r2, #6
 8003560:	1c7e      	adds	r6, r7, #1
 8003562:	f7fc fe3d 	bl	80001e0 <memchr>
 8003566:	2800      	cmp	r0, #0
 8003568:	d038      	beq.n	80035dc <_svfiprintf_r+0x1c8>
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <_svfiprintf_r+0x1e8>)
 800356c:	bb13      	cbnz	r3, 80035b4 <_svfiprintf_r+0x1a0>
 800356e:	9b03      	ldr	r3, [sp, #12]
 8003570:	3307      	adds	r3, #7
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	3308      	adds	r3, #8
 8003578:	9303      	str	r3, [sp, #12]
 800357a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800357c:	444b      	add	r3, r9
 800357e:	9309      	str	r3, [sp, #36]	; 0x24
 8003580:	e76d      	b.n	800345e <_svfiprintf_r+0x4a>
 8003582:	fb05 3202 	mla	r2, r5, r2, r3
 8003586:	2001      	movs	r0, #1
 8003588:	460f      	mov	r7, r1
 800358a:	e7a6      	b.n	80034da <_svfiprintf_r+0xc6>
 800358c:	2300      	movs	r3, #0
 800358e:	3701      	adds	r7, #1
 8003590:	9305      	str	r3, [sp, #20]
 8003592:	4619      	mov	r1, r3
 8003594:	250a      	movs	r5, #10
 8003596:	4638      	mov	r0, r7
 8003598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800359c:	3a30      	subs	r2, #48	; 0x30
 800359e:	2a09      	cmp	r2, #9
 80035a0:	d903      	bls.n	80035aa <_svfiprintf_r+0x196>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0c8      	beq.n	8003538 <_svfiprintf_r+0x124>
 80035a6:	9105      	str	r1, [sp, #20]
 80035a8:	e7c6      	b.n	8003538 <_svfiprintf_r+0x124>
 80035aa:	fb05 2101 	mla	r1, r5, r1, r2
 80035ae:	2301      	movs	r3, #1
 80035b0:	4607      	mov	r7, r0
 80035b2:	e7f0      	b.n	8003596 <_svfiprintf_r+0x182>
 80035b4:	ab03      	add	r3, sp, #12
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4622      	mov	r2, r4
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <_svfiprintf_r+0x1ec>)
 80035bc:	a904      	add	r1, sp, #16
 80035be:	4640      	mov	r0, r8
 80035c0:	f3af 8000 	nop.w
 80035c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80035c8:	4681      	mov	r9, r0
 80035ca:	d1d6      	bne.n	800357a <_svfiprintf_r+0x166>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	065b      	lsls	r3, r3, #25
 80035d0:	f53f af35 	bmi.w	800343e <_svfiprintf_r+0x2a>
 80035d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035d6:	b01d      	add	sp, #116	; 0x74
 80035d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	ab03      	add	r3, sp, #12
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4622      	mov	r2, r4
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <_svfiprintf_r+0x1ec>)
 80035e4:	a904      	add	r1, sp, #16
 80035e6:	4640      	mov	r0, r8
 80035e8:	f000 f9c2 	bl	8003970 <_printf_i>
 80035ec:	e7ea      	b.n	80035c4 <_svfiprintf_r+0x1b0>
 80035ee:	bf00      	nop
 80035f0:	08004350 	.word	0x08004350
 80035f4:	08004356 	.word	0x08004356
 80035f8:	0800435a 	.word	0x0800435a
 80035fc:	00000000 	.word	0x00000000
 8003600:	08003361 	.word	0x08003361

08003604 <__sfputc_r>:
 8003604:	6893      	ldr	r3, [r2, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	b410      	push	{r4}
 800360c:	6093      	str	r3, [r2, #8]
 800360e:	da08      	bge.n	8003622 <__sfputc_r+0x1e>
 8003610:	6994      	ldr	r4, [r2, #24]
 8003612:	42a3      	cmp	r3, r4
 8003614:	db01      	blt.n	800361a <__sfputc_r+0x16>
 8003616:	290a      	cmp	r1, #10
 8003618:	d103      	bne.n	8003622 <__sfputc_r+0x1e>
 800361a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800361e:	f000 bb0d 	b.w	8003c3c <__swbuf_r>
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	1c58      	adds	r0, r3, #1
 8003626:	6010      	str	r0, [r2, #0]
 8003628:	7019      	strb	r1, [r3, #0]
 800362a:	4608      	mov	r0, r1
 800362c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003630:	4770      	bx	lr

08003632 <__sfputs_r>:
 8003632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003634:	4606      	mov	r6, r0
 8003636:	460f      	mov	r7, r1
 8003638:	4614      	mov	r4, r2
 800363a:	18d5      	adds	r5, r2, r3
 800363c:	42ac      	cmp	r4, r5
 800363e:	d101      	bne.n	8003644 <__sfputs_r+0x12>
 8003640:	2000      	movs	r0, #0
 8003642:	e007      	b.n	8003654 <__sfputs_r+0x22>
 8003644:	463a      	mov	r2, r7
 8003646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff ffda 	bl	8003604 <__sfputc_r>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d1f3      	bne.n	800363c <__sfputs_r+0xa>
 8003654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003658 <_vfiprintf_r>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	460c      	mov	r4, r1
 800365e:	b09d      	sub	sp, #116	; 0x74
 8003660:	4617      	mov	r7, r2
 8003662:	461d      	mov	r5, r3
 8003664:	4606      	mov	r6, r0
 8003666:	b118      	cbz	r0, 8003670 <_vfiprintf_r+0x18>
 8003668:	6983      	ldr	r3, [r0, #24]
 800366a:	b90b      	cbnz	r3, 8003670 <_vfiprintf_r+0x18>
 800366c:	f7ff fd94 	bl	8003198 <__sinit>
 8003670:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <_vfiprintf_r+0x20c>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d158      	bne.n	8003728 <_vfiprintf_r+0xd0>
 8003676:	6874      	ldr	r4, [r6, #4]
 8003678:	89a3      	ldrh	r3, [r4, #12]
 800367a:	0718      	lsls	r0, r3, #28
 800367c:	d55e      	bpl.n	800373c <_vfiprintf_r+0xe4>
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05b      	beq.n	800373c <_vfiprintf_r+0xe4>
 8003684:	2300      	movs	r3, #0
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	2320      	movs	r3, #32
 800368a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368e:	2330      	movs	r3, #48	; 0x30
 8003690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003694:	9503      	str	r5, [sp, #12]
 8003696:	f04f 0b01 	mov.w	fp, #1
 800369a:	46b8      	mov	r8, r7
 800369c:	4645      	mov	r5, r8
 800369e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036a2:	b10b      	cbz	r3, 80036a8 <_vfiprintf_r+0x50>
 80036a4:	2b25      	cmp	r3, #37	; 0x25
 80036a6:	d154      	bne.n	8003752 <_vfiprintf_r+0xfa>
 80036a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80036ac:	d00b      	beq.n	80036c6 <_vfiprintf_r+0x6e>
 80036ae:	4653      	mov	r3, sl
 80036b0:	463a      	mov	r2, r7
 80036b2:	4621      	mov	r1, r4
 80036b4:	4630      	mov	r0, r6
 80036b6:	f7ff ffbc 	bl	8003632 <__sfputs_r>
 80036ba:	3001      	adds	r0, #1
 80036bc:	f000 80c2 	beq.w	8003844 <_vfiprintf_r+0x1ec>
 80036c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036c2:	4453      	add	r3, sl
 80036c4:	9309      	str	r3, [sp, #36]	; 0x24
 80036c6:	f898 3000 	ldrb.w	r3, [r8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80ba 	beq.w	8003844 <_vfiprintf_r+0x1ec>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	9307      	str	r3, [sp, #28]
 80036de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e2:	931a      	str	r3, [sp, #104]	; 0x68
 80036e4:	46a8      	mov	r8, r5
 80036e6:	2205      	movs	r2, #5
 80036e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036ec:	485e      	ldr	r0, [pc, #376]	; (8003868 <_vfiprintf_r+0x210>)
 80036ee:	f7fc fd77 	bl	80001e0 <memchr>
 80036f2:	9b04      	ldr	r3, [sp, #16]
 80036f4:	bb78      	cbnz	r0, 8003756 <_vfiprintf_r+0xfe>
 80036f6:	06d9      	lsls	r1, r3, #27
 80036f8:	bf44      	itt	mi
 80036fa:	2220      	movmi	r2, #32
 80036fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003700:	071a      	lsls	r2, r3, #28
 8003702:	bf44      	itt	mi
 8003704:	222b      	movmi	r2, #43	; 0x2b
 8003706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800370a:	782a      	ldrb	r2, [r5, #0]
 800370c:	2a2a      	cmp	r2, #42	; 0x2a
 800370e:	d02a      	beq.n	8003766 <_vfiprintf_r+0x10e>
 8003710:	9a07      	ldr	r2, [sp, #28]
 8003712:	46a8      	mov	r8, r5
 8003714:	2000      	movs	r0, #0
 8003716:	250a      	movs	r5, #10
 8003718:	4641      	mov	r1, r8
 800371a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800371e:	3b30      	subs	r3, #48	; 0x30
 8003720:	2b09      	cmp	r3, #9
 8003722:	d969      	bls.n	80037f8 <_vfiprintf_r+0x1a0>
 8003724:	b360      	cbz	r0, 8003780 <_vfiprintf_r+0x128>
 8003726:	e024      	b.n	8003772 <_vfiprintf_r+0x11a>
 8003728:	4b50      	ldr	r3, [pc, #320]	; (800386c <_vfiprintf_r+0x214>)
 800372a:	429c      	cmp	r4, r3
 800372c:	d101      	bne.n	8003732 <_vfiprintf_r+0xda>
 800372e:	68b4      	ldr	r4, [r6, #8]
 8003730:	e7a2      	b.n	8003678 <_vfiprintf_r+0x20>
 8003732:	4b4f      	ldr	r3, [pc, #316]	; (8003870 <_vfiprintf_r+0x218>)
 8003734:	429c      	cmp	r4, r3
 8003736:	bf08      	it	eq
 8003738:	68f4      	ldreq	r4, [r6, #12]
 800373a:	e79d      	b.n	8003678 <_vfiprintf_r+0x20>
 800373c:	4621      	mov	r1, r4
 800373e:	4630      	mov	r0, r6
 8003740:	f000 fae0 	bl	8003d04 <__swsetup_r>
 8003744:	2800      	cmp	r0, #0
 8003746:	d09d      	beq.n	8003684 <_vfiprintf_r+0x2c>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	b01d      	add	sp, #116	; 0x74
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	46a8      	mov	r8, r5
 8003754:	e7a2      	b.n	800369c <_vfiprintf_r+0x44>
 8003756:	4a44      	ldr	r2, [pc, #272]	; (8003868 <_vfiprintf_r+0x210>)
 8003758:	1a80      	subs	r0, r0, r2
 800375a:	fa0b f000 	lsl.w	r0, fp, r0
 800375e:	4318      	orrs	r0, r3
 8003760:	9004      	str	r0, [sp, #16]
 8003762:	4645      	mov	r5, r8
 8003764:	e7be      	b.n	80036e4 <_vfiprintf_r+0x8c>
 8003766:	9a03      	ldr	r2, [sp, #12]
 8003768:	1d11      	adds	r1, r2, #4
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	9103      	str	r1, [sp, #12]
 800376e:	2a00      	cmp	r2, #0
 8003770:	db01      	blt.n	8003776 <_vfiprintf_r+0x11e>
 8003772:	9207      	str	r2, [sp, #28]
 8003774:	e004      	b.n	8003780 <_vfiprintf_r+0x128>
 8003776:	4252      	negs	r2, r2
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	9207      	str	r2, [sp, #28]
 800377e:	9304      	str	r3, [sp, #16]
 8003780:	f898 3000 	ldrb.w	r3, [r8]
 8003784:	2b2e      	cmp	r3, #46	; 0x2e
 8003786:	d10e      	bne.n	80037a6 <_vfiprintf_r+0x14e>
 8003788:	f898 3001 	ldrb.w	r3, [r8, #1]
 800378c:	2b2a      	cmp	r3, #42	; 0x2a
 800378e:	d138      	bne.n	8003802 <_vfiprintf_r+0x1aa>
 8003790:	9b03      	ldr	r3, [sp, #12]
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	9203      	str	r2, [sp, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	bfb8      	it	lt
 800379c:	f04f 33ff 	movlt.w	r3, #4294967295
 80037a0:	f108 0802 	add.w	r8, r8, #2
 80037a4:	9305      	str	r3, [sp, #20]
 80037a6:	4d33      	ldr	r5, [pc, #204]	; (8003874 <_vfiprintf_r+0x21c>)
 80037a8:	f898 1000 	ldrb.w	r1, [r8]
 80037ac:	2203      	movs	r2, #3
 80037ae:	4628      	mov	r0, r5
 80037b0:	f7fc fd16 	bl	80001e0 <memchr>
 80037b4:	b140      	cbz	r0, 80037c8 <_vfiprintf_r+0x170>
 80037b6:	2340      	movs	r3, #64	; 0x40
 80037b8:	1b40      	subs	r0, r0, r5
 80037ba:	fa03 f000 	lsl.w	r0, r3, r0
 80037be:	9b04      	ldr	r3, [sp, #16]
 80037c0:	4303      	orrs	r3, r0
 80037c2:	f108 0801 	add.w	r8, r8, #1
 80037c6:	9304      	str	r3, [sp, #16]
 80037c8:	f898 1000 	ldrb.w	r1, [r8]
 80037cc:	482a      	ldr	r0, [pc, #168]	; (8003878 <_vfiprintf_r+0x220>)
 80037ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037d2:	2206      	movs	r2, #6
 80037d4:	f108 0701 	add.w	r7, r8, #1
 80037d8:	f7fc fd02 	bl	80001e0 <memchr>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d037      	beq.n	8003850 <_vfiprintf_r+0x1f8>
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <_vfiprintf_r+0x224>)
 80037e2:	bb1b      	cbnz	r3, 800382c <_vfiprintf_r+0x1d4>
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	3307      	adds	r3, #7
 80037e8:	f023 0307 	bic.w	r3, r3, #7
 80037ec:	3308      	adds	r3, #8
 80037ee:	9303      	str	r3, [sp, #12]
 80037f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f2:	444b      	add	r3, r9
 80037f4:	9309      	str	r3, [sp, #36]	; 0x24
 80037f6:	e750      	b.n	800369a <_vfiprintf_r+0x42>
 80037f8:	fb05 3202 	mla	r2, r5, r2, r3
 80037fc:	2001      	movs	r0, #1
 80037fe:	4688      	mov	r8, r1
 8003800:	e78a      	b.n	8003718 <_vfiprintf_r+0xc0>
 8003802:	2300      	movs	r3, #0
 8003804:	f108 0801 	add.w	r8, r8, #1
 8003808:	9305      	str	r3, [sp, #20]
 800380a:	4619      	mov	r1, r3
 800380c:	250a      	movs	r5, #10
 800380e:	4640      	mov	r0, r8
 8003810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003814:	3a30      	subs	r2, #48	; 0x30
 8003816:	2a09      	cmp	r2, #9
 8003818:	d903      	bls.n	8003822 <_vfiprintf_r+0x1ca>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0c3      	beq.n	80037a6 <_vfiprintf_r+0x14e>
 800381e:	9105      	str	r1, [sp, #20]
 8003820:	e7c1      	b.n	80037a6 <_vfiprintf_r+0x14e>
 8003822:	fb05 2101 	mla	r1, r5, r1, r2
 8003826:	2301      	movs	r3, #1
 8003828:	4680      	mov	r8, r0
 800382a:	e7f0      	b.n	800380e <_vfiprintf_r+0x1b6>
 800382c:	ab03      	add	r3, sp, #12
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	4622      	mov	r2, r4
 8003832:	4b13      	ldr	r3, [pc, #76]	; (8003880 <_vfiprintf_r+0x228>)
 8003834:	a904      	add	r1, sp, #16
 8003836:	4630      	mov	r0, r6
 8003838:	f3af 8000 	nop.w
 800383c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003840:	4681      	mov	r9, r0
 8003842:	d1d5      	bne.n	80037f0 <_vfiprintf_r+0x198>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	065b      	lsls	r3, r3, #25
 8003848:	f53f af7e 	bmi.w	8003748 <_vfiprintf_r+0xf0>
 800384c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800384e:	e77d      	b.n	800374c <_vfiprintf_r+0xf4>
 8003850:	ab03      	add	r3, sp, #12
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4622      	mov	r2, r4
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <_vfiprintf_r+0x228>)
 8003858:	a904      	add	r1, sp, #16
 800385a:	4630      	mov	r0, r6
 800385c:	f000 f888 	bl	8003970 <_printf_i>
 8003860:	e7ec      	b.n	800383c <_vfiprintf_r+0x1e4>
 8003862:	bf00      	nop
 8003864:	08004310 	.word	0x08004310
 8003868:	08004350 	.word	0x08004350
 800386c:	08004330 	.word	0x08004330
 8003870:	080042f0 	.word	0x080042f0
 8003874:	08004356 	.word	0x08004356
 8003878:	0800435a 	.word	0x0800435a
 800387c:	00000000 	.word	0x00000000
 8003880:	08003633 	.word	0x08003633

08003884 <_printf_common>:
 8003884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	4691      	mov	r9, r2
 800388a:	461f      	mov	r7, r3
 800388c:	688a      	ldr	r2, [r1, #8]
 800388e:	690b      	ldr	r3, [r1, #16]
 8003890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003894:	4293      	cmp	r3, r2
 8003896:	bfb8      	it	lt
 8003898:	4613      	movlt	r3, r2
 800389a:	f8c9 3000 	str.w	r3, [r9]
 800389e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038a2:	4606      	mov	r6, r0
 80038a4:	460c      	mov	r4, r1
 80038a6:	b112      	cbz	r2, 80038ae <_printf_common+0x2a>
 80038a8:	3301      	adds	r3, #1
 80038aa:	f8c9 3000 	str.w	r3, [r9]
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	0699      	lsls	r1, r3, #26
 80038b2:	bf42      	ittt	mi
 80038b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038b8:	3302      	addmi	r3, #2
 80038ba:	f8c9 3000 	strmi.w	r3, [r9]
 80038be:	6825      	ldr	r5, [r4, #0]
 80038c0:	f015 0506 	ands.w	r5, r5, #6
 80038c4:	d107      	bne.n	80038d6 <_printf_common+0x52>
 80038c6:	f104 0a19 	add.w	sl, r4, #25
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	f8d9 2000 	ldr.w	r2, [r9]
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	42ab      	cmp	r3, r5
 80038d4:	dc28      	bgt.n	8003928 <_printf_common+0xa4>
 80038d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	3300      	adds	r3, #0
 80038de:	bf18      	it	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	0692      	lsls	r2, r2, #26
 80038e4:	d42d      	bmi.n	8003942 <_printf_common+0xbe>
 80038e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ea:	4639      	mov	r1, r7
 80038ec:	4630      	mov	r0, r6
 80038ee:	47c0      	blx	r8
 80038f0:	3001      	adds	r0, #1
 80038f2:	d020      	beq.n	8003936 <_printf_common+0xb2>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	68e5      	ldr	r5, [r4, #12]
 80038f8:	f8d9 2000 	ldr.w	r2, [r9]
 80038fc:	f003 0306 	and.w	r3, r3, #6
 8003900:	2b04      	cmp	r3, #4
 8003902:	bf08      	it	eq
 8003904:	1aad      	subeq	r5, r5, r2
 8003906:	68a3      	ldr	r3, [r4, #8]
 8003908:	6922      	ldr	r2, [r4, #16]
 800390a:	bf0c      	ite	eq
 800390c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003910:	2500      	movne	r5, #0
 8003912:	4293      	cmp	r3, r2
 8003914:	bfc4      	itt	gt
 8003916:	1a9b      	subgt	r3, r3, r2
 8003918:	18ed      	addgt	r5, r5, r3
 800391a:	f04f 0900 	mov.w	r9, #0
 800391e:	341a      	adds	r4, #26
 8003920:	454d      	cmp	r5, r9
 8003922:	d11a      	bne.n	800395a <_printf_common+0xd6>
 8003924:	2000      	movs	r0, #0
 8003926:	e008      	b.n	800393a <_printf_common+0xb6>
 8003928:	2301      	movs	r3, #1
 800392a:	4652      	mov	r2, sl
 800392c:	4639      	mov	r1, r7
 800392e:	4630      	mov	r0, r6
 8003930:	47c0      	blx	r8
 8003932:	3001      	adds	r0, #1
 8003934:	d103      	bne.n	800393e <_printf_common+0xba>
 8003936:	f04f 30ff 	mov.w	r0, #4294967295
 800393a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393e:	3501      	adds	r5, #1
 8003940:	e7c3      	b.n	80038ca <_printf_common+0x46>
 8003942:	18e1      	adds	r1, r4, r3
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	2030      	movs	r0, #48	; 0x30
 8003948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800394c:	4422      	add	r2, r4
 800394e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003956:	3302      	adds	r3, #2
 8003958:	e7c5      	b.n	80038e6 <_printf_common+0x62>
 800395a:	2301      	movs	r3, #1
 800395c:	4622      	mov	r2, r4
 800395e:	4639      	mov	r1, r7
 8003960:	4630      	mov	r0, r6
 8003962:	47c0      	blx	r8
 8003964:	3001      	adds	r0, #1
 8003966:	d0e6      	beq.n	8003936 <_printf_common+0xb2>
 8003968:	f109 0901 	add.w	r9, r9, #1
 800396c:	e7d8      	b.n	8003920 <_printf_common+0x9c>
	...

08003970 <_printf_i>:
 8003970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003974:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003978:	460c      	mov	r4, r1
 800397a:	7e09      	ldrb	r1, [r1, #24]
 800397c:	b085      	sub	sp, #20
 800397e:	296e      	cmp	r1, #110	; 0x6e
 8003980:	4617      	mov	r7, r2
 8003982:	4606      	mov	r6, r0
 8003984:	4698      	mov	r8, r3
 8003986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003988:	f000 80b3 	beq.w	8003af2 <_printf_i+0x182>
 800398c:	d822      	bhi.n	80039d4 <_printf_i+0x64>
 800398e:	2963      	cmp	r1, #99	; 0x63
 8003990:	d036      	beq.n	8003a00 <_printf_i+0x90>
 8003992:	d80a      	bhi.n	80039aa <_printf_i+0x3a>
 8003994:	2900      	cmp	r1, #0
 8003996:	f000 80b9 	beq.w	8003b0c <_printf_i+0x19c>
 800399a:	2958      	cmp	r1, #88	; 0x58
 800399c:	f000 8083 	beq.w	8003aa6 <_printf_i+0x136>
 80039a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039a8:	e032      	b.n	8003a10 <_printf_i+0xa0>
 80039aa:	2964      	cmp	r1, #100	; 0x64
 80039ac:	d001      	beq.n	80039b2 <_printf_i+0x42>
 80039ae:	2969      	cmp	r1, #105	; 0x69
 80039b0:	d1f6      	bne.n	80039a0 <_printf_i+0x30>
 80039b2:	6820      	ldr	r0, [r4, #0]
 80039b4:	6813      	ldr	r3, [r2, #0]
 80039b6:	0605      	lsls	r5, r0, #24
 80039b8:	f103 0104 	add.w	r1, r3, #4
 80039bc:	d52a      	bpl.n	8003a14 <_printf_i+0xa4>
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6011      	str	r1, [r2, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da03      	bge.n	80039ce <_printf_i+0x5e>
 80039c6:	222d      	movs	r2, #45	; 0x2d
 80039c8:	425b      	negs	r3, r3
 80039ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039ce:	486f      	ldr	r0, [pc, #444]	; (8003b8c <_printf_i+0x21c>)
 80039d0:	220a      	movs	r2, #10
 80039d2:	e039      	b.n	8003a48 <_printf_i+0xd8>
 80039d4:	2973      	cmp	r1, #115	; 0x73
 80039d6:	f000 809d 	beq.w	8003b14 <_printf_i+0x1a4>
 80039da:	d808      	bhi.n	80039ee <_printf_i+0x7e>
 80039dc:	296f      	cmp	r1, #111	; 0x6f
 80039de:	d020      	beq.n	8003a22 <_printf_i+0xb2>
 80039e0:	2970      	cmp	r1, #112	; 0x70
 80039e2:	d1dd      	bne.n	80039a0 <_printf_i+0x30>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	e003      	b.n	80039f6 <_printf_i+0x86>
 80039ee:	2975      	cmp	r1, #117	; 0x75
 80039f0:	d017      	beq.n	8003a22 <_printf_i+0xb2>
 80039f2:	2978      	cmp	r1, #120	; 0x78
 80039f4:	d1d4      	bne.n	80039a0 <_printf_i+0x30>
 80039f6:	2378      	movs	r3, #120	; 0x78
 80039f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039fc:	4864      	ldr	r0, [pc, #400]	; (8003b90 <_printf_i+0x220>)
 80039fe:	e055      	b.n	8003aac <_printf_i+0x13c>
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	1d19      	adds	r1, r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6011      	str	r1, [r2, #0]
 8003a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a10:	2301      	movs	r3, #1
 8003a12:	e08c      	b.n	8003b2e <_printf_i+0x1be>
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6011      	str	r1, [r2, #0]
 8003a18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a1c:	bf18      	it	ne
 8003a1e:	b21b      	sxthne	r3, r3
 8003a20:	e7cf      	b.n	80039c2 <_printf_i+0x52>
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	6825      	ldr	r5, [r4, #0]
 8003a26:	1d18      	adds	r0, r3, #4
 8003a28:	6010      	str	r0, [r2, #0]
 8003a2a:	0628      	lsls	r0, r5, #24
 8003a2c:	d501      	bpl.n	8003a32 <_printf_i+0xc2>
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	e002      	b.n	8003a38 <_printf_i+0xc8>
 8003a32:	0668      	lsls	r0, r5, #25
 8003a34:	d5fb      	bpl.n	8003a2e <_printf_i+0xbe>
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	4854      	ldr	r0, [pc, #336]	; (8003b8c <_printf_i+0x21c>)
 8003a3a:	296f      	cmp	r1, #111	; 0x6f
 8003a3c:	bf14      	ite	ne
 8003a3e:	220a      	movne	r2, #10
 8003a40:	2208      	moveq	r2, #8
 8003a42:	2100      	movs	r1, #0
 8003a44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a48:	6865      	ldr	r5, [r4, #4]
 8003a4a:	60a5      	str	r5, [r4, #8]
 8003a4c:	2d00      	cmp	r5, #0
 8003a4e:	f2c0 8095 	blt.w	8003b7c <_printf_i+0x20c>
 8003a52:	6821      	ldr	r1, [r4, #0]
 8003a54:	f021 0104 	bic.w	r1, r1, #4
 8003a58:	6021      	str	r1, [r4, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13d      	bne.n	8003ada <_printf_i+0x16a>
 8003a5e:	2d00      	cmp	r5, #0
 8003a60:	f040 808e 	bne.w	8003b80 <_printf_i+0x210>
 8003a64:	4665      	mov	r5, ip
 8003a66:	2a08      	cmp	r2, #8
 8003a68:	d10b      	bne.n	8003a82 <_printf_i+0x112>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	07db      	lsls	r3, r3, #31
 8003a6e:	d508      	bpl.n	8003a82 <_printf_i+0x112>
 8003a70:	6923      	ldr	r3, [r4, #16]
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bfde      	ittt	le
 8003a78:	2330      	movle	r3, #48	; 0x30
 8003a7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a82:	ebac 0305 	sub.w	r3, ip, r5
 8003a86:	6123      	str	r3, [r4, #16]
 8003a88:	f8cd 8000 	str.w	r8, [sp]
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	aa03      	add	r2, sp, #12
 8003a90:	4621      	mov	r1, r4
 8003a92:	4630      	mov	r0, r6
 8003a94:	f7ff fef6 	bl	8003884 <_printf_common>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d14d      	bne.n	8003b38 <_printf_i+0x1c8>
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	b005      	add	sp, #20
 8003aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aa6:	4839      	ldr	r0, [pc, #228]	; (8003b8c <_printf_i+0x21c>)
 8003aa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003aac:	6813      	ldr	r3, [r2, #0]
 8003aae:	6821      	ldr	r1, [r4, #0]
 8003ab0:	1d1d      	adds	r5, r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6015      	str	r5, [r2, #0]
 8003ab6:	060a      	lsls	r2, r1, #24
 8003ab8:	d50b      	bpl.n	8003ad2 <_printf_i+0x162>
 8003aba:	07ca      	lsls	r2, r1, #31
 8003abc:	bf44      	itt	mi
 8003abe:	f041 0120 	orrmi.w	r1, r1, #32
 8003ac2:	6021      	strmi	r1, [r4, #0]
 8003ac4:	b91b      	cbnz	r3, 8003ace <_printf_i+0x15e>
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	f022 0220 	bic.w	r2, r2, #32
 8003acc:	6022      	str	r2, [r4, #0]
 8003ace:	2210      	movs	r2, #16
 8003ad0:	e7b7      	b.n	8003a42 <_printf_i+0xd2>
 8003ad2:	064d      	lsls	r5, r1, #25
 8003ad4:	bf48      	it	mi
 8003ad6:	b29b      	uxthmi	r3, r3
 8003ad8:	e7ef      	b.n	8003aba <_printf_i+0x14a>
 8003ada:	4665      	mov	r5, ip
 8003adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ae0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ae4:	5cc3      	ldrb	r3, [r0, r3]
 8003ae6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003aea:	460b      	mov	r3, r1
 8003aec:	2900      	cmp	r1, #0
 8003aee:	d1f5      	bne.n	8003adc <_printf_i+0x16c>
 8003af0:	e7b9      	b.n	8003a66 <_printf_i+0xf6>
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	6825      	ldr	r5, [r4, #0]
 8003af6:	6961      	ldr	r1, [r4, #20]
 8003af8:	1d18      	adds	r0, r3, #4
 8003afa:	6010      	str	r0, [r2, #0]
 8003afc:	0628      	lsls	r0, r5, #24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	d501      	bpl.n	8003b06 <_printf_i+0x196>
 8003b02:	6019      	str	r1, [r3, #0]
 8003b04:	e002      	b.n	8003b0c <_printf_i+0x19c>
 8003b06:	066a      	lsls	r2, r5, #25
 8003b08:	d5fb      	bpl.n	8003b02 <_printf_i+0x192>
 8003b0a:	8019      	strh	r1, [r3, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6123      	str	r3, [r4, #16]
 8003b10:	4665      	mov	r5, ip
 8003b12:	e7b9      	b.n	8003a88 <_printf_i+0x118>
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	1d19      	adds	r1, r3, #4
 8003b18:	6011      	str	r1, [r2, #0]
 8003b1a:	681d      	ldr	r5, [r3, #0]
 8003b1c:	6862      	ldr	r2, [r4, #4]
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7fc fb5d 	bl	80001e0 <memchr>
 8003b26:	b108      	cbz	r0, 8003b2c <_printf_i+0x1bc>
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	6060      	str	r0, [r4, #4]
 8003b2c:	6863      	ldr	r3, [r4, #4]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b36:	e7a7      	b.n	8003a88 <_printf_i+0x118>
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	462a      	mov	r2, r5
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d0aa      	beq.n	8003a9c <_printf_i+0x12c>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	079b      	lsls	r3, r3, #30
 8003b4a:	d413      	bmi.n	8003b74 <_printf_i+0x204>
 8003b4c:	68e0      	ldr	r0, [r4, #12]
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	4298      	cmp	r0, r3
 8003b52:	bfb8      	it	lt
 8003b54:	4618      	movlt	r0, r3
 8003b56:	e7a3      	b.n	8003aa0 <_printf_i+0x130>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	464a      	mov	r2, r9
 8003b5c:	4639      	mov	r1, r7
 8003b5e:	4630      	mov	r0, r6
 8003b60:	47c0      	blx	r8
 8003b62:	3001      	adds	r0, #1
 8003b64:	d09a      	beq.n	8003a9c <_printf_i+0x12c>
 8003b66:	3501      	adds	r5, #1
 8003b68:	68e3      	ldr	r3, [r4, #12]
 8003b6a:	9a03      	ldr	r2, [sp, #12]
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	42ab      	cmp	r3, r5
 8003b70:	dcf2      	bgt.n	8003b58 <_printf_i+0x1e8>
 8003b72:	e7eb      	b.n	8003b4c <_printf_i+0x1dc>
 8003b74:	2500      	movs	r5, #0
 8003b76:	f104 0919 	add.w	r9, r4, #25
 8003b7a:	e7f5      	b.n	8003b68 <_printf_i+0x1f8>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ac      	bne.n	8003ada <_printf_i+0x16a>
 8003b80:	7803      	ldrb	r3, [r0, #0]
 8003b82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b8a:	e76c      	b.n	8003a66 <_printf_i+0xf6>
 8003b8c:	08004361 	.word	0x08004361
 8003b90:	08004372 	.word	0x08004372

08003b94 <_sbrk_r>:
 8003b94:	b538      	push	{r3, r4, r5, lr}
 8003b96:	4c06      	ldr	r4, [pc, #24]	; (8003bb0 <_sbrk_r+0x1c>)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	6023      	str	r3, [r4, #0]
 8003ba0:	f7fc fdde 	bl	8000760 <_sbrk>
 8003ba4:	1c43      	adds	r3, r0, #1
 8003ba6:	d102      	bne.n	8003bae <_sbrk_r+0x1a>
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	b103      	cbz	r3, 8003bae <_sbrk_r+0x1a>
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	bd38      	pop	{r3, r4, r5, pc}
 8003bb0:	20000338 	.word	0x20000338

08003bb4 <__sread>:
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bbc:	f000 fae0 	bl	8004180 <_read_r>
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	bfab      	itete	ge
 8003bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc8:	181b      	addge	r3, r3, r0
 8003bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bce:	bfac      	ite	ge
 8003bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bd2:	81a3      	strhlt	r3, [r4, #12]
 8003bd4:	bd10      	pop	{r4, pc}

08003bd6 <__swrite>:
 8003bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bda:	461f      	mov	r7, r3
 8003bdc:	898b      	ldrh	r3, [r1, #12]
 8003bde:	05db      	lsls	r3, r3, #23
 8003be0:	4605      	mov	r5, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	4616      	mov	r6, r2
 8003be6:	d505      	bpl.n	8003bf4 <__swrite+0x1e>
 8003be8:	2302      	movs	r3, #2
 8003bea:	2200      	movs	r2, #0
 8003bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf0:	f000 f9b6 	bl	8003f60 <_lseek_r>
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bfe:	81a3      	strh	r3, [r4, #12]
 8003c00:	4632      	mov	r2, r6
 8003c02:	463b      	mov	r3, r7
 8003c04:	4628      	mov	r0, r5
 8003c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0a:	f000 b869 	b.w	8003ce0 <_write_r>

08003c0e <__sseek>:
 8003c0e:	b510      	push	{r4, lr}
 8003c10:	460c      	mov	r4, r1
 8003c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c16:	f000 f9a3 	bl	8003f60 <_lseek_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	bf15      	itete	ne
 8003c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c2a:	81a3      	strheq	r3, [r4, #12]
 8003c2c:	bf18      	it	ne
 8003c2e:	81a3      	strhne	r3, [r4, #12]
 8003c30:	bd10      	pop	{r4, pc}

08003c32 <__sclose>:
 8003c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c36:	f000 b8d3 	b.w	8003de0 <_close_r>
	...

08003c3c <__swbuf_r>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	460e      	mov	r6, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	4605      	mov	r5, r0
 8003c44:	b118      	cbz	r0, 8003c4e <__swbuf_r+0x12>
 8003c46:	6983      	ldr	r3, [r0, #24]
 8003c48:	b90b      	cbnz	r3, 8003c4e <__swbuf_r+0x12>
 8003c4a:	f7ff faa5 	bl	8003198 <__sinit>
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <__swbuf_r+0x98>)
 8003c50:	429c      	cmp	r4, r3
 8003c52:	d12a      	bne.n	8003caa <__swbuf_r+0x6e>
 8003c54:	686c      	ldr	r4, [r5, #4]
 8003c56:	69a3      	ldr	r3, [r4, #24]
 8003c58:	60a3      	str	r3, [r4, #8]
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	071a      	lsls	r2, r3, #28
 8003c5e:	d52e      	bpl.n	8003cbe <__swbuf_r+0x82>
 8003c60:	6923      	ldr	r3, [r4, #16]
 8003c62:	b363      	cbz	r3, 8003cbe <__swbuf_r+0x82>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	1ac0      	subs	r0, r0, r3
 8003c6a:	6963      	ldr	r3, [r4, #20]
 8003c6c:	b2f6      	uxtb	r6, r6
 8003c6e:	4283      	cmp	r3, r0
 8003c70:	4637      	mov	r7, r6
 8003c72:	dc04      	bgt.n	8003c7e <__swbuf_r+0x42>
 8003c74:	4621      	mov	r1, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 f948 	bl	8003f0c <_fflush_r>
 8003c7c:	bb28      	cbnz	r0, 8003cca <__swbuf_r+0x8e>
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	60a3      	str	r3, [r4, #8]
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	6022      	str	r2, [r4, #0]
 8003c8a:	701e      	strb	r6, [r3, #0]
 8003c8c:	6963      	ldr	r3, [r4, #20]
 8003c8e:	3001      	adds	r0, #1
 8003c90:	4283      	cmp	r3, r0
 8003c92:	d004      	beq.n	8003c9e <__swbuf_r+0x62>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	07db      	lsls	r3, r3, #31
 8003c98:	d519      	bpl.n	8003cce <__swbuf_r+0x92>
 8003c9a:	2e0a      	cmp	r6, #10
 8003c9c:	d117      	bne.n	8003cce <__swbuf_r+0x92>
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 f933 	bl	8003f0c <_fflush_r>
 8003ca6:	b190      	cbz	r0, 8003cce <__swbuf_r+0x92>
 8003ca8:	e00f      	b.n	8003cca <__swbuf_r+0x8e>
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <__swbuf_r+0x9c>)
 8003cac:	429c      	cmp	r4, r3
 8003cae:	d101      	bne.n	8003cb4 <__swbuf_r+0x78>
 8003cb0:	68ac      	ldr	r4, [r5, #8]
 8003cb2:	e7d0      	b.n	8003c56 <__swbuf_r+0x1a>
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <__swbuf_r+0xa0>)
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	bf08      	it	eq
 8003cba:	68ec      	ldreq	r4, [r5, #12]
 8003cbc:	e7cb      	b.n	8003c56 <__swbuf_r+0x1a>
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f000 f81f 	bl	8003d04 <__swsetup_r>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d0cc      	beq.n	8003c64 <__swbuf_r+0x28>
 8003cca:	f04f 37ff 	mov.w	r7, #4294967295
 8003cce:	4638      	mov	r0, r7
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	08004310 	.word	0x08004310
 8003cd8:	08004330 	.word	0x08004330
 8003cdc:	080042f0 	.word	0x080042f0

08003ce0 <_write_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4c07      	ldr	r4, [pc, #28]	; (8003d00 <_write_r+0x20>)
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	6022      	str	r2, [r4, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fc fce5 	bl	80006be <_write>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_write_r+0x1e>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_write_r+0x1e>
 8003cfc:	602b      	str	r3, [r5, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000338 	.word	0x20000338

08003d04 <__swsetup_r>:
 8003d04:	4b32      	ldr	r3, [pc, #200]	; (8003dd0 <__swsetup_r+0xcc>)
 8003d06:	b570      	push	{r4, r5, r6, lr}
 8003d08:	681d      	ldr	r5, [r3, #0]
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	460c      	mov	r4, r1
 8003d0e:	b125      	cbz	r5, 8003d1a <__swsetup_r+0x16>
 8003d10:	69ab      	ldr	r3, [r5, #24]
 8003d12:	b913      	cbnz	r3, 8003d1a <__swsetup_r+0x16>
 8003d14:	4628      	mov	r0, r5
 8003d16:	f7ff fa3f 	bl	8003198 <__sinit>
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <__swsetup_r+0xd0>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	d10f      	bne.n	8003d40 <__swsetup_r+0x3c>
 8003d20:	686c      	ldr	r4, [r5, #4]
 8003d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	0715      	lsls	r5, r2, #28
 8003d2a:	d42c      	bmi.n	8003d86 <__swsetup_r+0x82>
 8003d2c:	06d0      	lsls	r0, r2, #27
 8003d2e:	d411      	bmi.n	8003d54 <__swsetup_r+0x50>
 8003d30:	2209      	movs	r2, #9
 8003d32:	6032      	str	r2, [r6, #0]
 8003d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3e:	e03e      	b.n	8003dbe <__swsetup_r+0xba>
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <__swsetup_r+0xd4>)
 8003d42:	429c      	cmp	r4, r3
 8003d44:	d101      	bne.n	8003d4a <__swsetup_r+0x46>
 8003d46:	68ac      	ldr	r4, [r5, #8]
 8003d48:	e7eb      	b.n	8003d22 <__swsetup_r+0x1e>
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <__swsetup_r+0xd8>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	bf08      	it	eq
 8003d50:	68ec      	ldreq	r4, [r5, #12]
 8003d52:	e7e6      	b.n	8003d22 <__swsetup_r+0x1e>
 8003d54:	0751      	lsls	r1, r2, #29
 8003d56:	d512      	bpl.n	8003d7e <__swsetup_r+0x7a>
 8003d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5a:	b141      	cbz	r1, 8003d6e <__swsetup_r+0x6a>
 8003d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d60:	4299      	cmp	r1, r3
 8003d62:	d002      	beq.n	8003d6a <__swsetup_r+0x66>
 8003d64:	4630      	mov	r0, r6
 8003d66:	f000 f997 	bl	8004098 <_free_r>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d74:	81a3      	strh	r3, [r4, #12]
 8003d76:	2300      	movs	r3, #0
 8003d78:	6063      	str	r3, [r4, #4]
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	6923      	ldr	r3, [r4, #16]
 8003d88:	b94b      	cbnz	r3, 8003d9e <__swsetup_r+0x9a>
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d003      	beq.n	8003d9e <__swsetup_r+0x9a>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4630      	mov	r0, r6
 8003d9a:	f000 f917 	bl	8003fcc <__smakebuf_r>
 8003d9e:	89a2      	ldrh	r2, [r4, #12]
 8003da0:	f012 0301 	ands.w	r3, r2, #1
 8003da4:	d00c      	beq.n	8003dc0 <__swsetup_r+0xbc>
 8003da6:	2300      	movs	r3, #0
 8003da8:	60a3      	str	r3, [r4, #8]
 8003daa:	6963      	ldr	r3, [r4, #20]
 8003dac:	425b      	negs	r3, r3
 8003dae:	61a3      	str	r3, [r4, #24]
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	b953      	cbnz	r3, 8003dca <__swsetup_r+0xc6>
 8003db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003dbc:	d1ba      	bne.n	8003d34 <__swsetup_r+0x30>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	0792      	lsls	r2, r2, #30
 8003dc2:	bf58      	it	pl
 8003dc4:	6963      	ldrpl	r3, [r4, #20]
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	e7f2      	b.n	8003db0 <__swsetup_r+0xac>
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e7f7      	b.n	8003dbe <__swsetup_r+0xba>
 8003dce:	bf00      	nop
 8003dd0:	2000000c 	.word	0x2000000c
 8003dd4:	08004310 	.word	0x08004310
 8003dd8:	08004330 	.word	0x08004330
 8003ddc:	080042f0 	.word	0x080042f0

08003de0 <_close_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4c06      	ldr	r4, [pc, #24]	; (8003dfc <_close_r+0x1c>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4605      	mov	r5, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	f7fc fc83 	bl	80006f6 <_close>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_close_r+0x1a>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_close_r+0x1a>
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000338 	.word	0x20000338

08003e00 <__sflush_r>:
 8003e00:	898a      	ldrh	r2, [r1, #12]
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	0710      	lsls	r0, r2, #28
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	d458      	bmi.n	8003ec0 <__sflush_r+0xc0>
 8003e0e:	684b      	ldr	r3, [r1, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	dc05      	bgt.n	8003e20 <__sflush_r+0x20>
 8003e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dc02      	bgt.n	8003e20 <__sflush_r+0x20>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e22:	2e00      	cmp	r6, #0
 8003e24:	d0f9      	beq.n	8003e1a <__sflush_r+0x1a>
 8003e26:	2300      	movs	r3, #0
 8003e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e2c:	682f      	ldr	r7, [r5, #0]
 8003e2e:	6a21      	ldr	r1, [r4, #32]
 8003e30:	602b      	str	r3, [r5, #0]
 8003e32:	d032      	beq.n	8003e9a <__sflush_r+0x9a>
 8003e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	075a      	lsls	r2, r3, #29
 8003e3a:	d505      	bpl.n	8003e48 <__sflush_r+0x48>
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	1ac0      	subs	r0, r0, r3
 8003e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e42:	b10b      	cbz	r3, 8003e48 <__sflush_r+0x48>
 8003e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e46:	1ac0      	subs	r0, r0, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e4e:	6a21      	ldr	r1, [r4, #32]
 8003e50:	4628      	mov	r0, r5
 8003e52:	47b0      	blx	r6
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	d106      	bne.n	8003e68 <__sflush_r+0x68>
 8003e5a:	6829      	ldr	r1, [r5, #0]
 8003e5c:	291d      	cmp	r1, #29
 8003e5e:	d848      	bhi.n	8003ef2 <__sflush_r+0xf2>
 8003e60:	4a29      	ldr	r2, [pc, #164]	; (8003f08 <__sflush_r+0x108>)
 8003e62:	40ca      	lsrs	r2, r1
 8003e64:	07d6      	lsls	r6, r2, #31
 8003e66:	d544      	bpl.n	8003ef2 <__sflush_r+0xf2>
 8003e68:	2200      	movs	r2, #0
 8003e6a:	6062      	str	r2, [r4, #4]
 8003e6c:	04d9      	lsls	r1, r3, #19
 8003e6e:	6922      	ldr	r2, [r4, #16]
 8003e70:	6022      	str	r2, [r4, #0]
 8003e72:	d504      	bpl.n	8003e7e <__sflush_r+0x7e>
 8003e74:	1c42      	adds	r2, r0, #1
 8003e76:	d101      	bne.n	8003e7c <__sflush_r+0x7c>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	b903      	cbnz	r3, 8003e7e <__sflush_r+0x7e>
 8003e7c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e80:	602f      	str	r7, [r5, #0]
 8003e82:	2900      	cmp	r1, #0
 8003e84:	d0c9      	beq.n	8003e1a <__sflush_r+0x1a>
 8003e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e8a:	4299      	cmp	r1, r3
 8003e8c:	d002      	beq.n	8003e94 <__sflush_r+0x94>
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 f902 	bl	8004098 <_free_r>
 8003e94:	2000      	movs	r0, #0
 8003e96:	6360      	str	r0, [r4, #52]	; 0x34
 8003e98:	e7c0      	b.n	8003e1c <__sflush_r+0x1c>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b0      	blx	r6
 8003ea0:	1c41      	adds	r1, r0, #1
 8003ea2:	d1c8      	bne.n	8003e36 <__sflush_r+0x36>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0c5      	beq.n	8003e36 <__sflush_r+0x36>
 8003eaa:	2b1d      	cmp	r3, #29
 8003eac:	d001      	beq.n	8003eb2 <__sflush_r+0xb2>
 8003eae:	2b16      	cmp	r3, #22
 8003eb0:	d101      	bne.n	8003eb6 <__sflush_r+0xb6>
 8003eb2:	602f      	str	r7, [r5, #0]
 8003eb4:	e7b1      	b.n	8003e1a <__sflush_r+0x1a>
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	e7ad      	b.n	8003e1c <__sflush_r+0x1c>
 8003ec0:	690f      	ldr	r7, [r1, #16]
 8003ec2:	2f00      	cmp	r7, #0
 8003ec4:	d0a9      	beq.n	8003e1a <__sflush_r+0x1a>
 8003ec6:	0793      	lsls	r3, r2, #30
 8003ec8:	680e      	ldr	r6, [r1, #0]
 8003eca:	bf08      	it	eq
 8003ecc:	694b      	ldreq	r3, [r1, #20]
 8003ece:	600f      	str	r7, [r1, #0]
 8003ed0:	bf18      	it	ne
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	eba6 0807 	sub.w	r8, r6, r7
 8003ed8:	608b      	str	r3, [r1, #8]
 8003eda:	f1b8 0f00 	cmp.w	r8, #0
 8003ede:	dd9c      	ble.n	8003e1a <__sflush_r+0x1a>
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	463a      	mov	r2, r7
 8003ee4:	6a21      	ldr	r1, [r4, #32]
 8003ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ee8:	4628      	mov	r0, r5
 8003eea:	47b0      	blx	r6
 8003eec:	2800      	cmp	r0, #0
 8003eee:	dc06      	bgt.n	8003efe <__sflush_r+0xfe>
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef6:	81a3      	strh	r3, [r4, #12]
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	e78e      	b.n	8003e1c <__sflush_r+0x1c>
 8003efe:	4407      	add	r7, r0
 8003f00:	eba8 0800 	sub.w	r8, r8, r0
 8003f04:	e7e9      	b.n	8003eda <__sflush_r+0xda>
 8003f06:	bf00      	nop
 8003f08:	20400001 	.word	0x20400001

08003f0c <_fflush_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	690b      	ldr	r3, [r1, #16]
 8003f10:	4605      	mov	r5, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	b1db      	cbz	r3, 8003f4e <_fflush_r+0x42>
 8003f16:	b118      	cbz	r0, 8003f20 <_fflush_r+0x14>
 8003f18:	6983      	ldr	r3, [r0, #24]
 8003f1a:	b90b      	cbnz	r3, 8003f20 <_fflush_r+0x14>
 8003f1c:	f7ff f93c 	bl	8003198 <__sinit>
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <_fflush_r+0x48>)
 8003f22:	429c      	cmp	r4, r3
 8003f24:	d109      	bne.n	8003f3a <_fflush_r+0x2e>
 8003f26:	686c      	ldr	r4, [r5, #4]
 8003f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2c:	b17b      	cbz	r3, 8003f4e <_fflush_r+0x42>
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f36:	f7ff bf63 	b.w	8003e00 <__sflush_r>
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <_fflush_r+0x4c>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d101      	bne.n	8003f44 <_fflush_r+0x38>
 8003f40:	68ac      	ldr	r4, [r5, #8]
 8003f42:	e7f1      	b.n	8003f28 <_fflush_r+0x1c>
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <_fflush_r+0x50>)
 8003f46:	429c      	cmp	r4, r3
 8003f48:	bf08      	it	eq
 8003f4a:	68ec      	ldreq	r4, [r5, #12]
 8003f4c:	e7ec      	b.n	8003f28 <_fflush_r+0x1c>
 8003f4e:	2000      	movs	r0, #0
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	08004310 	.word	0x08004310
 8003f58:	08004330 	.word	0x08004330
 8003f5c:	080042f0 	.word	0x080042f0

08003f60 <_lseek_r>:
 8003f60:	b538      	push	{r3, r4, r5, lr}
 8003f62:	4c07      	ldr	r4, [pc, #28]	; (8003f80 <_lseek_r+0x20>)
 8003f64:	4605      	mov	r5, r0
 8003f66:	4608      	mov	r0, r1
 8003f68:	4611      	mov	r1, r2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	6022      	str	r2, [r4, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7fc fbe8 	bl	8000744 <_lseek>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_lseek_r+0x1e>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_lseek_r+0x1e>
 8003f7c:	602b      	str	r3, [r5, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20000338 	.word	0x20000338

08003f84 <__swhatbuf_r>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	460e      	mov	r6, r1
 8003f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	b096      	sub	sp, #88	; 0x58
 8003f90:	4614      	mov	r4, r2
 8003f92:	461d      	mov	r5, r3
 8003f94:	da07      	bge.n	8003fa6 <__swhatbuf_r+0x22>
 8003f96:	2300      	movs	r3, #0
 8003f98:	602b      	str	r3, [r5, #0]
 8003f9a:	89b3      	ldrh	r3, [r6, #12]
 8003f9c:	061a      	lsls	r2, r3, #24
 8003f9e:	d410      	bmi.n	8003fc2 <__swhatbuf_r+0x3e>
 8003fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fa4:	e00e      	b.n	8003fc4 <__swhatbuf_r+0x40>
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	f000 f8fc 	bl	80041a4 <_fstat_r>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	dbf2      	blt.n	8003f96 <__swhatbuf_r+0x12>
 8003fb0:	9a01      	ldr	r2, [sp, #4]
 8003fb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fba:	425a      	negs	r2, r3
 8003fbc:	415a      	adcs	r2, r3
 8003fbe:	602a      	str	r2, [r5, #0]
 8003fc0:	e7ee      	b.n	8003fa0 <__swhatbuf_r+0x1c>
 8003fc2:	2340      	movs	r3, #64	; 0x40
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	b016      	add	sp, #88	; 0x58
 8003fca:	bd70      	pop	{r4, r5, r6, pc}

08003fcc <__smakebuf_r>:
 8003fcc:	898b      	ldrh	r3, [r1, #12]
 8003fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fd0:	079d      	lsls	r5, r3, #30
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	d507      	bpl.n	8003fe8 <__smakebuf_r+0x1c>
 8003fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	6163      	str	r3, [r4, #20]
 8003fe4:	b002      	add	sp, #8
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	ab01      	add	r3, sp, #4
 8003fea:	466a      	mov	r2, sp
 8003fec:	f7ff ffca 	bl	8003f84 <__swhatbuf_r>
 8003ff0:	9900      	ldr	r1, [sp, #0]
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f7ff f959 	bl	80032ac <_malloc_r>
 8003ffa:	b948      	cbnz	r0, 8004010 <__smakebuf_r+0x44>
 8003ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004000:	059a      	lsls	r2, r3, #22
 8004002:	d4ef      	bmi.n	8003fe4 <__smakebuf_r+0x18>
 8004004:	f023 0303 	bic.w	r3, r3, #3
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	e7e3      	b.n	8003fd8 <__smakebuf_r+0xc>
 8004010:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <__smakebuf_r+0x7c>)
 8004012:	62b3      	str	r3, [r6, #40]	; 0x28
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	6020      	str	r0, [r4, #0]
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	9b00      	ldr	r3, [sp, #0]
 8004020:	6163      	str	r3, [r4, #20]
 8004022:	9b01      	ldr	r3, [sp, #4]
 8004024:	6120      	str	r0, [r4, #16]
 8004026:	b15b      	cbz	r3, 8004040 <__smakebuf_r+0x74>
 8004028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800402c:	4630      	mov	r0, r6
 800402e:	f000 f8cb 	bl	80041c8 <_isatty_r>
 8004032:	b128      	cbz	r0, 8004040 <__smakebuf_r+0x74>
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	f043 0301 	orr.w	r3, r3, #1
 800403e:	81a3      	strh	r3, [r4, #12]
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	431d      	orrs	r5, r3
 8004044:	81a5      	strh	r5, [r4, #12]
 8004046:	e7cd      	b.n	8003fe4 <__smakebuf_r+0x18>
 8004048:	08003161 	.word	0x08003161

0800404c <memcpy>:
 800404c:	b510      	push	{r4, lr}
 800404e:	1e43      	subs	r3, r0, #1
 8004050:	440a      	add	r2, r1
 8004052:	4291      	cmp	r1, r2
 8004054:	d100      	bne.n	8004058 <memcpy+0xc>
 8004056:	bd10      	pop	{r4, pc}
 8004058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800405c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004060:	e7f7      	b.n	8004052 <memcpy+0x6>

08004062 <memmove>:
 8004062:	4288      	cmp	r0, r1
 8004064:	b510      	push	{r4, lr}
 8004066:	eb01 0302 	add.w	r3, r1, r2
 800406a:	d807      	bhi.n	800407c <memmove+0x1a>
 800406c:	1e42      	subs	r2, r0, #1
 800406e:	4299      	cmp	r1, r3
 8004070:	d00a      	beq.n	8004088 <memmove+0x26>
 8004072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004076:	f802 4f01 	strb.w	r4, [r2, #1]!
 800407a:	e7f8      	b.n	800406e <memmove+0xc>
 800407c:	4283      	cmp	r3, r0
 800407e:	d9f5      	bls.n	800406c <memmove+0xa>
 8004080:	1881      	adds	r1, r0, r2
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	42d3      	cmn	r3, r2
 8004086:	d100      	bne.n	800408a <memmove+0x28>
 8004088:	bd10      	pop	{r4, pc}
 800408a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800408e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004092:	e7f7      	b.n	8004084 <memmove+0x22>

08004094 <__malloc_lock>:
 8004094:	4770      	bx	lr

08004096 <__malloc_unlock>:
 8004096:	4770      	bx	lr

08004098 <_free_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	4605      	mov	r5, r0
 800409c:	2900      	cmp	r1, #0
 800409e:	d045      	beq.n	800412c <_free_r+0x94>
 80040a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a4:	1f0c      	subs	r4, r1, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bfb8      	it	lt
 80040aa:	18e4      	addlt	r4, r4, r3
 80040ac:	f7ff fff2 	bl	8004094 <__malloc_lock>
 80040b0:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <_free_r+0x98>)
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	4610      	mov	r0, r2
 80040b6:	b933      	cbnz	r3, 80040c6 <_free_r+0x2e>
 80040b8:	6063      	str	r3, [r4, #4]
 80040ba:	6014      	str	r4, [r2, #0]
 80040bc:	4628      	mov	r0, r5
 80040be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c2:	f7ff bfe8 	b.w	8004096 <__malloc_unlock>
 80040c6:	42a3      	cmp	r3, r4
 80040c8:	d90c      	bls.n	80040e4 <_free_r+0x4c>
 80040ca:	6821      	ldr	r1, [r4, #0]
 80040cc:	1862      	adds	r2, r4, r1
 80040ce:	4293      	cmp	r3, r2
 80040d0:	bf04      	itt	eq
 80040d2:	681a      	ldreq	r2, [r3, #0]
 80040d4:	685b      	ldreq	r3, [r3, #4]
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	bf04      	itt	eq
 80040da:	1852      	addeq	r2, r2, r1
 80040dc:	6022      	streq	r2, [r4, #0]
 80040de:	6004      	str	r4, [r0, #0]
 80040e0:	e7ec      	b.n	80040bc <_free_r+0x24>
 80040e2:	4613      	mov	r3, r2
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	b10a      	cbz	r2, 80040ec <_free_r+0x54>
 80040e8:	42a2      	cmp	r2, r4
 80040ea:	d9fa      	bls.n	80040e2 <_free_r+0x4a>
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	1858      	adds	r0, r3, r1
 80040f0:	42a0      	cmp	r0, r4
 80040f2:	d10b      	bne.n	800410c <_free_r+0x74>
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	4401      	add	r1, r0
 80040f8:	1858      	adds	r0, r3, r1
 80040fa:	4282      	cmp	r2, r0
 80040fc:	6019      	str	r1, [r3, #0]
 80040fe:	d1dd      	bne.n	80040bc <_free_r+0x24>
 8004100:	6810      	ldr	r0, [r2, #0]
 8004102:	6852      	ldr	r2, [r2, #4]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	4401      	add	r1, r0
 8004108:	6019      	str	r1, [r3, #0]
 800410a:	e7d7      	b.n	80040bc <_free_r+0x24>
 800410c:	d902      	bls.n	8004114 <_free_r+0x7c>
 800410e:	230c      	movs	r3, #12
 8004110:	602b      	str	r3, [r5, #0]
 8004112:	e7d3      	b.n	80040bc <_free_r+0x24>
 8004114:	6820      	ldr	r0, [r4, #0]
 8004116:	1821      	adds	r1, r4, r0
 8004118:	428a      	cmp	r2, r1
 800411a:	bf04      	itt	eq
 800411c:	6811      	ldreq	r1, [r2, #0]
 800411e:	6852      	ldreq	r2, [r2, #4]
 8004120:	6062      	str	r2, [r4, #4]
 8004122:	bf04      	itt	eq
 8004124:	1809      	addeq	r1, r1, r0
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	605c      	str	r4, [r3, #4]
 800412a:	e7c7      	b.n	80040bc <_free_r+0x24>
 800412c:	bd38      	pop	{r3, r4, r5, pc}
 800412e:	bf00      	nop
 8004130:	20000094 	.word	0x20000094

08004134 <_realloc_r>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	4607      	mov	r7, r0
 8004138:	4614      	mov	r4, r2
 800413a:	460e      	mov	r6, r1
 800413c:	b921      	cbnz	r1, 8004148 <_realloc_r+0x14>
 800413e:	4611      	mov	r1, r2
 8004140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004144:	f7ff b8b2 	b.w	80032ac <_malloc_r>
 8004148:	b922      	cbnz	r2, 8004154 <_realloc_r+0x20>
 800414a:	f7ff ffa5 	bl	8004098 <_free_r>
 800414e:	4625      	mov	r5, r4
 8004150:	4628      	mov	r0, r5
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004154:	f000 f848 	bl	80041e8 <_malloc_usable_size_r>
 8004158:	42a0      	cmp	r0, r4
 800415a:	d20f      	bcs.n	800417c <_realloc_r+0x48>
 800415c:	4621      	mov	r1, r4
 800415e:	4638      	mov	r0, r7
 8004160:	f7ff f8a4 	bl	80032ac <_malloc_r>
 8004164:	4605      	mov	r5, r0
 8004166:	2800      	cmp	r0, #0
 8004168:	d0f2      	beq.n	8004150 <_realloc_r+0x1c>
 800416a:	4631      	mov	r1, r6
 800416c:	4622      	mov	r2, r4
 800416e:	f7ff ff6d 	bl	800404c <memcpy>
 8004172:	4631      	mov	r1, r6
 8004174:	4638      	mov	r0, r7
 8004176:	f7ff ff8f 	bl	8004098 <_free_r>
 800417a:	e7e9      	b.n	8004150 <_realloc_r+0x1c>
 800417c:	4635      	mov	r5, r6
 800417e:	e7e7      	b.n	8004150 <_realloc_r+0x1c>

08004180 <_read_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4c07      	ldr	r4, [pc, #28]	; (80041a0 <_read_r+0x20>)
 8004184:	4605      	mov	r5, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	6022      	str	r2, [r4, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fc fa78 	bl	8000684 <_read>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_read_r+0x1e>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	b103      	cbz	r3, 800419e <_read_r+0x1e>
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	20000338 	.word	0x20000338

080041a4 <_fstat_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4c07      	ldr	r4, [pc, #28]	; (80041c4 <_fstat_r+0x20>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	4605      	mov	r5, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	f7fc faac 	bl	800070e <_fstat>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	d102      	bne.n	80041c0 <_fstat_r+0x1c>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	b103      	cbz	r3, 80041c0 <_fstat_r+0x1c>
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	bd38      	pop	{r3, r4, r5, pc}
 80041c2:	bf00      	nop
 80041c4:	20000338 	.word	0x20000338

080041c8 <_isatty_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4c06      	ldr	r4, [pc, #24]	; (80041e4 <_isatty_r+0x1c>)
 80041cc:	2300      	movs	r3, #0
 80041ce:	4605      	mov	r5, r0
 80041d0:	4608      	mov	r0, r1
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	f7fc faab 	bl	800072e <_isatty>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_isatty_r+0x1a>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_isatty_r+0x1a>
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	20000338 	.word	0x20000338

080041e8 <_malloc_usable_size_r>:
 80041e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ec:	1f18      	subs	r0, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfbc      	itt	lt
 80041f2:	580b      	ldrlt	r3, [r1, r0]
 80041f4:	18c0      	addlt	r0, r0, r3
 80041f6:	4770      	bx	lr

080041f8 <_init>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	bf00      	nop
 80041fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041fe:	bc08      	pop	{r3}
 8004200:	469e      	mov	lr, r3
 8004202:	4770      	bx	lr

08004204 <_fini>:
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	bf00      	nop
 8004208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420a:	bc08      	pop	{r3}
 800420c:	469e      	mov	lr, r3
 800420e:	4770      	bx	lr

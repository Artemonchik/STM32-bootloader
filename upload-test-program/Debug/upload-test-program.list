
upload-test-program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004080  08004080  00004080  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc0  08004208  08004208  00004208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005dc8  08005dc8  00005dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  0001000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  0001000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00005e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00005e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e10  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08005e1c  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08005e1c  00010034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044b8  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dad  00000000  00000000  000144f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  000152a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000360  00000000  00000000  00015690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f53  00000000  00000000  000159f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041b8  00000000  00000000  0002d943  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a8a1  00000000  00000000  00031afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc39c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd0  00000000  00000000  000bc418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08004208 <__do_global_dtors_aux>:
 8004208:	b510      	push	{r4, lr}
 800420a:	4c05      	ldr	r4, [pc, #20]	; (8004220 <__do_global_dtors_aux+0x18>)
 800420c:	7823      	ldrb	r3, [r4, #0]
 800420e:	b933      	cbnz	r3, 800421e <__do_global_dtors_aux+0x16>
 8004210:	4b04      	ldr	r3, [pc, #16]	; (8004224 <__do_global_dtors_aux+0x1c>)
 8004212:	b113      	cbz	r3, 800421a <__do_global_dtors_aux+0x12>
 8004214:	4804      	ldr	r0, [pc, #16]	; (8004228 <__do_global_dtors_aux+0x20>)
 8004216:	f3af 8000 	nop.w
 800421a:	2301      	movs	r3, #1
 800421c:	7023      	strb	r3, [r4, #0]
 800421e:	bd10      	pop	{r4, pc}
 8004220:	2000000c 	.word	0x2000000c
 8004224:	00000000 	.word	0x00000000
 8004228:	08005db0 	.word	0x08005db0

0800422c <frame_dummy>:
 800422c:	b508      	push	{r3, lr}
 800422e:	4b03      	ldr	r3, [pc, #12]	; (800423c <frame_dummy+0x10>)
 8004230:	b11b      	cbz	r3, 800423a <frame_dummy+0xe>
 8004232:	4903      	ldr	r1, [pc, #12]	; (8004240 <frame_dummy+0x14>)
 8004234:	4803      	ldr	r0, [pc, #12]	; (8004244 <frame_dummy+0x18>)
 8004236:	f3af 8000 	nop.w
 800423a:	bd08      	pop	{r3, pc}
 800423c:	00000000 	.word	0x00000000
 8004240:	20000010 	.word	0x20000010
 8004244:	08005db0 	.word	0x08005db0

08004248 <togglePins>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void togglePins(){
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
	static int start = 0;
	static int state = 0;
	uint16_t pins[] = {
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <togglePins+0xb4>)
 8004250:	463c      	mov	r4, r7
 8004252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			GPIO_PIN_12,
			GPIO_PIN_13,
			GPIO_PIN_14,
			GPIO_PIN_15
	};
	if(!start){
 8004258:	4b29      	ldr	r3, [pc, #164]	; (8004300 <togglePins+0xb8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <togglePins+0x38>
			HAL_GPIO_TogglePin(GPIOE, pins[1]);
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	4619      	mov	r1, r3
 8004264:	4827      	ldr	r0, [pc, #156]	; (8004304 <togglePins+0xbc>)
 8004266:	f000 fc6f 	bl	8004b48 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOE, pins[2]);
 800426a:	88bb      	ldrh	r3, [r7, #4]
 800426c:	4619      	mov	r1, r3
 800426e:	4825      	ldr	r0, [pc, #148]	; (8004304 <togglePins+0xbc>)
 8004270:	f000 fc6a 	bl	8004b48 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOE, pins[3]);
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	4619      	mov	r1, r3
 8004278:	4822      	ldr	r0, [pc, #136]	; (8004304 <togglePins+0xbc>)
 800427a:	f000 fc65 	bl	8004b48 <HAL_GPIO_TogglePin>
 800427e:	e026      	b.n	80042ce <togglePins+0x86>
	}else{
		HAL_GPIO_TogglePin(GPIOE, pins[(state) % 8]);
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <togglePins+0xc0>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	425a      	negs	r2, r3
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	f002 0207 	and.w	r2, r2, #7
 800428e:	bf58      	it	pl
 8004290:	4253      	negpl	r3, r2
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	f107 0210 	add.w	r2, r7, #16
 8004298:	4413      	add	r3, r2
 800429a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800429e:	4619      	mov	r1, r3
 80042a0:	4818      	ldr	r0, [pc, #96]	; (8004304 <togglePins+0xbc>)
 80042a2:	f000 fc51 	bl	8004b48 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, pins[(state + 3) % 8]);
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <togglePins+0xc0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3303      	adds	r3, #3
 80042ac:	425a      	negs	r2, r3
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	f002 0207 	and.w	r2, r2, #7
 80042b6:	bf58      	it	pl
 80042b8:	4253      	negpl	r3, r2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f107 0210 	add.w	r2, r7, #16
 80042c0:	4413      	add	r3, r2
 80042c2:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80042c6:	4619      	mov	r1, r3
 80042c8:	480e      	ldr	r0, [pc, #56]	; (8004304 <togglePins+0xbc>)
 80042ca:	f000 fc3d 	bl	8004b48 <HAL_GPIO_TogglePin>
	}
	state++;
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <togglePins+0xc0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <togglePins+0xc0>)
 80042d6:	6013      	str	r3, [r2, #0]
	state %= 8;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <togglePins+0xc0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	425a      	negs	r2, r3
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	f002 0207 	and.w	r2, r2, #7
 80042e6:	bf58      	it	pl
 80042e8:	4253      	negpl	r3, r2
 80042ea:	4a07      	ldr	r2, [pc, #28]	; (8004308 <togglePins+0xc0>)
 80042ec:	6013      	str	r3, [r2, #0]
	start = 1;
 80042ee:	4b04      	ldr	r3, [pc, #16]	; (8004300 <togglePins+0xb8>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd90      	pop	{r4, r7, pc}
 80042fc:	08005dc8 	.word	0x08005dc8
 8004300:	20000028 	.word	0x20000028
 8004304:	48001000 	.word	0x48001000
 8004308:	2000002c 	.word	0x2000002c

0800430c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004080;
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <main+0x24>)
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <main+0x28>)
 8004314:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004316:	f000 f917 	bl	8004548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800431a:	f000 f80d 	bl	8004338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800431e:	f000 f847 	bl	80043b0 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  togglePins();
 8004322:	f7ff ff91 	bl	8004248 <togglePins>
	  HAL_Delay(150);
 8004326:	2096      	movs	r0, #150	; 0x96
 8004328:	f000 f974 	bl	8004614 <HAL_Delay>
	  togglePins();
 800432c:	e7f9      	b.n	8004322 <main+0x16>
 800432e:	bf00      	nop
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	08004080 	.word	0x08004080

08004338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800433e:	f107 0318 	add.w	r3, r7, #24
 8004342:	2228      	movs	r2, #40	; 0x28
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fd2a 	bl	8005da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800435a:	2302      	movs	r3, #2
 800435c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800435e:	2301      	movs	r3, #1
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004362:	2310      	movs	r3, #16
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004366:	2300      	movs	r3, #0
 8004368:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800436a:	f107 0318 	add.w	r3, r7, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fc04 	bl	8004b7c <HAL_RCC_OscConfig>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800437a:	f000 f84b 	bl	8004414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800437e:	230f      	movs	r3, #15
 8004380:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004392:	1d3b      	adds	r3, r7, #4
 8004394:	2100      	movs	r1, #0
 8004396:	4618      	mov	r0, r3
 8004398:	f001 faf8 	bl	800598c <HAL_RCC_ClockConfig>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80043a2:	f000 f837 	bl	8004414 <Error_Handler>
  }
}
 80043a6:	bf00      	nop
 80043a8:	3740      	adds	r7, #64	; 0x40
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	609a      	str	r2, [r3, #8]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <MX_GPIO_Init+0x5c>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4a10      	ldr	r2, [pc, #64]	; (800440c <MX_GPIO_Init+0x5c>)
 80043ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043ce:	6153      	str	r3, [r2, #20]
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <MX_GPIO_Init+0x5c>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80043dc:	2200      	movs	r2, #0
 80043de:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80043e2:	480b      	ldr	r0, [pc, #44]	; (8004410 <MX_GPIO_Init+0x60>)
 80043e4:	f000 fb98 	bl	8004b18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80043e8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80043ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ee:	2301      	movs	r3, #1
 80043f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4804      	ldr	r0, [pc, #16]	; (8004410 <MX_GPIO_Init+0x60>)
 8004400:	f000 fa10 	bl	8004824 <HAL_GPIO_Init>

}
 8004404:	bf00      	nop
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	48001000 	.word	0x48001000

08004414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <HAL_MspInit+0x44>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	4a0e      	ldr	r2, [pc, #56]	; (8004468 <HAL_MspInit+0x44>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6193      	str	r3, [r2, #24]
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <HAL_MspInit+0x44>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_MspInit+0x44>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_MspInit+0x44>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444c:	61d3      	str	r3, [r2, #28]
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_MspInit+0x44>)
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000

0800446c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800447e:	e7fe      	b.n	800447e <HardFault_Handler+0x4>

08004480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004484:	e7fe      	b.n	8004484 <MemManage_Handler+0x4>

08004486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800448a:	e7fe      	b.n	800448a <BusFault_Handler+0x4>

0800448c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004490:	e7fe      	b.n	8004490 <UsageFault_Handler+0x4>

08004492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c0:	f000 f888 	bl	80045d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <SystemInit+0x28>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <SystemInit+0x28>)
 80044d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <SystemInit+0x28>)
 80044de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044e2:	609a      	str	r2, [r3, #8]
#endif
}
 80044e4:	bf00      	nop
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800452c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80044f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80044fa:	e003      	b.n	8004504 <LoopCopyDataInit>

080044fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80044fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004500:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004502:	3104      	adds	r1, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004508:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800450a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800450c:	d3f6      	bcc.n	80044fc <CopyDataInit>
	ldr	r2, =_sbss
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004510:	e002      	b.n	8004518 <LoopFillZerobss>

08004512 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004512:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004514:	f842 3b04 	str.w	r3, [r2], #4

08004518 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <LoopForever+0x16>)
	cmp	r2, r3
 800451a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800451c:	d3f9      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800451e:	f7ff ffd3 	bl	80044c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004522:	f001 fc19 	bl	8005d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004526:	f7ff fef1 	bl	800430c <main>

0800452a <LoopForever>:

LoopForever:
    b LoopForever
 800452a:	e7fe      	b.n	800452a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800452c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004530:	08005e10 	.word	0x08005e10
	ldr	r0, =_sdata
 8004534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004538:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800453c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004540:	20000034 	.word	0x20000034

08004544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004544:	e7fe      	b.n	8004544 <ADC1_2_IRQHandler>
	...

08004548 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_Init+0x28>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_Init+0x28>)
 8004552:	f043 0310 	orr.w	r3, r3, #16
 8004556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004558:	2003      	movs	r0, #3
 800455a:	f000 f92f 	bl	80047bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 f808 	bl	8004574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004564:	f7ff ff5e 	bl	8004424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	40022000 	.word	0x40022000

08004574 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_InitTick+0x54>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_InitTick+0x58>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458a:	fbb3 f3f1 	udiv	r3, r3, r1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f939 	bl	800480a <HAL_SYSTICK_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00e      	b.n	80045c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b0f      	cmp	r3, #15
 80045a6:	d80a      	bhi.n	80045be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a8:	2200      	movs	r2, #0
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295
 80045b0:	f000 f90f 	bl	80047d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <HAL_InitTick+0x5c>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000000 	.word	0x20000000
 80045cc:	20000008 	.word	0x20000008
 80045d0:	20000004 	.word	0x20000004

080045d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_IncTick+0x20>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_IncTick+0x24>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_IncTick+0x24>)
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000008 	.word	0x20000008
 80045f8:	20000030 	.word	0x20000030

080045fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <HAL_GetTick+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000030 	.word	0x20000030

08004614 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff ffee 	bl	80045fc <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d005      	beq.n	800463a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_Delay+0x40>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800463a:	bf00      	nop
 800463c:	f7ff ffde 	bl	80045fc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	429a      	cmp	r2, r3
 800464a:	d8f7      	bhi.n	800463c <HAL_Delay+0x28>
  {
  }
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000008 	.word	0x20000008

08004658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800468a:	4a04      	ldr	r2, [pc, #16]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	60d3      	str	r3, [r2, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <__NVIC_GetPriorityGrouping+0x18>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0307 	and.w	r3, r3, #7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	db0a      	blt.n	80046e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	490c      	ldr	r1, [pc, #48]	; (8004708 <__NVIC_SetPriority+0x4c>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	440b      	add	r3, r1
 80046e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e4:	e00a      	b.n	80046fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4908      	ldr	r1, [pc, #32]	; (800470c <__NVIC_SetPriority+0x50>)
 80046ec:	79fb      	ldrb	r3, [r7, #7]
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3b04      	subs	r3, #4
 80046f4:	0112      	lsls	r2, r2, #4
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	440b      	add	r3, r1
 80046fa:	761a      	strb	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000e100 	.word	0xe000e100
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f1c3 0307 	rsb	r3, r3, #7
 800472a:	2b04      	cmp	r3, #4
 800472c:	bf28      	it	cs
 800472e:	2304      	movcs	r3, #4
 8004730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3304      	adds	r3, #4
 8004736:	2b06      	cmp	r3, #6
 8004738:	d902      	bls.n	8004740 <NVIC_EncodePriority+0x30>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	3b03      	subs	r3, #3
 800473e:	e000      	b.n	8004742 <NVIC_EncodePriority+0x32>
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	f04f 32ff 	mov.w	r2, #4294967295
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43da      	mvns	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	401a      	ands	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004758:	f04f 31ff 	mov.w	r1, #4294967295
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	43d9      	mvns	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	4313      	orrs	r3, r2
         );
}
 800476a:	4618      	mov	r0, r3
 800476c:	3724      	adds	r7, #36	; 0x24
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004788:	d301      	bcc.n	800478e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478a:	2301      	movs	r3, #1
 800478c:	e00f      	b.n	80047ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <SysTick_Config+0x40>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004796:	210f      	movs	r1, #15
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	f7ff ff8e 	bl	80046bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <SysTick_Config+0x40>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <SysTick_Config+0x40>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	e000e010 	.word	0xe000e010

080047bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff47 	bl	8004658 <__NVIC_SetPriorityGrouping>
}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047e4:	f7ff ff5c 	bl	80046a0 <__NVIC_GetPriorityGrouping>
 80047e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7ff ff8e 	bl	8004710 <NVIC_EncodePriority>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff5d 	bl	80046bc <__NVIC_SetPriority>
}
 8004802:	bf00      	nop
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffb0 	bl	8004778 <SysTick_Config>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004832:	e154      	b.n	8004ade <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2101      	movs	r1, #1
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8146 	beq.w	8004ad8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d00b      	beq.n	800486c <HAL_GPIO_Init+0x48>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d007      	beq.n	800486c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004860:	2b11      	cmp	r3, #17
 8004862:	d003      	beq.n	800486c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b12      	cmp	r3, #18
 800486a:	d130      	bne.n	80048ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	2203      	movs	r2, #3
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4013      	ands	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048a2:	2201      	movs	r2, #1
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4013      	ands	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	f003 0201 	and.w	r2, r3, #1
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	2203      	movs	r2, #3
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0xea>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b12      	cmp	r3, #18
 800490c:	d123      	bne.n	8004956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	08da      	lsrs	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3208      	adds	r2, #8
 8004916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	220f      	movs	r2, #15
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	08da      	lsrs	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3208      	adds	r2, #8
 8004950:	6939      	ldr	r1, [r7, #16]
 8004952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	2203      	movs	r2, #3
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f003 0203 	and.w	r2, r3, #3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80a0 	beq.w	8004ad8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <HAL_GPIO_Init+0x2d8>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4a57      	ldr	r2, [pc, #348]	; (8004afc <HAL_GPIO_Init+0x2d8>)
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	6193      	str	r3, [r2, #24]
 80049a4:	4b55      	ldr	r3, [pc, #340]	; (8004afc <HAL_GPIO_Init+0x2d8>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049b0:	4a53      	ldr	r2, [pc, #332]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049da:	d019      	beq.n	8004a10 <HAL_GPIO_Init+0x1ec>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a49      	ldr	r2, [pc, #292]	; (8004b04 <HAL_GPIO_Init+0x2e0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_GPIO_Init+0x1e8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a48      	ldr	r2, [pc, #288]	; (8004b08 <HAL_GPIO_Init+0x2e4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00d      	beq.n	8004a08 <HAL_GPIO_Init+0x1e4>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a47      	ldr	r2, [pc, #284]	; (8004b0c <HAL_GPIO_Init+0x2e8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d007      	beq.n	8004a04 <HAL_GPIO_Init+0x1e0>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a46      	ldr	r2, [pc, #280]	; (8004b10 <HAL_GPIO_Init+0x2ec>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_GPIO_Init+0x1dc>
 80049fc:	2304      	movs	r3, #4
 80049fe:	e008      	b.n	8004a12 <HAL_GPIO_Init+0x1ee>
 8004a00:	2305      	movs	r3, #5
 8004a02:	e006      	b.n	8004a12 <HAL_GPIO_Init+0x1ee>
 8004a04:	2303      	movs	r3, #3
 8004a06:	e004      	b.n	8004a12 <HAL_GPIO_Init+0x1ee>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e002      	b.n	8004a12 <HAL_GPIO_Init+0x1ee>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <HAL_GPIO_Init+0x1ee>
 8004a10:	2300      	movs	r3, #0
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	f002 0203 	and.w	r2, r2, #3
 8004a18:	0092      	lsls	r2, r2, #2
 8004a1a:	4093      	lsls	r3, r2
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a22:	4937      	ldr	r1, [pc, #220]	; (8004b00 <HAL_GPIO_Init+0x2dc>)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	3302      	adds	r3, #2
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a30:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a54:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4013      	ands	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a7e:	4a25      	ldr	r2, [pc, #148]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a84:	4b23      	ldr	r3, [pc, #140]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aae:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <HAL_GPIO_Init+0x2f0>)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3301      	adds	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f aea3 	bne.w	8004834 <HAL_GPIO_Init+0x10>
  }
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40010000 	.word	0x40010000
 8004b04:	48000400 	.word	0x48000400
 8004b08:	48000800 	.word	0x48000800
 8004b0c:	48000c00 	.word	0x48000c00
 8004b10:	48001000 	.word	0x48001000
 8004b14:	40010400 	.word	0x40010400

08004b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]
 8004b24:	4613      	mov	r3, r2
 8004b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b28:	787b      	ldrb	r3, [r7, #1]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b2e:	887a      	ldrh	r2, [r7, #2]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b34:	e002      	b.n	8004b3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b36:	887a      	ldrh	r2, [r7, #2]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b5a:	887a      	ldrh	r2, [r7, #2]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	041a      	lsls	r2, r3, #16
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	43d9      	mvns	r1, r3
 8004b66:	887b      	ldrh	r3, [r7, #2]
 8004b68:	400b      	ands	r3, r1
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	1d3b      	adds	r3, r7, #4
 8004b86:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b88:	1d3b      	adds	r3, r7, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f000 bef4 	b.w	800597e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 816a 	beq.w	8004e7a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004ba6:	4bb3      	ldr	r3, [pc, #716]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004bb2:	4bb0      	ldr	r3, [pc, #704]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d159      	bne.n	8004c72 <HAL_RCC_OscConfig+0xf6>
 8004bbe:	4bad      	ldr	r3, [pc, #692]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d152      	bne.n	8004c72 <HAL_RCC_OscConfig+0xf6>
 8004bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004be0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d102      	bne.n	8004bfe <HAL_RCC_OscConfig+0x82>
 8004bf8:	4b9e      	ldr	r3, [pc, #632]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	e015      	b.n	8004c2a <HAL_RCC_OscConfig+0xae>
 8004bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004c1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004c26:	4b93      	ldr	r3, [pc, #588]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004c32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004c36:	fa92 f2a2 	rbit	r2, r2
 8004c3a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004c3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004c42:	fab2 f282 	clz	r2, r2
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	f042 0220 	orr.w	r2, r2, #32
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	f002 021f 	and.w	r2, r2, #31
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f202 	lsl.w	r2, r1, r2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 810c 	beq.w	8004e78 <HAL_RCC_OscConfig+0x2fc>
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 8106 	bne.w	8004e78 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	f000 be86 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	1d3b      	adds	r3, r7, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCC_OscConfig+0x110>
 8004c7e:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e030      	b.n	8004cee <HAL_RCC_OscConfig+0x172>
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x134>
 8004c96:	4b77      	ldr	r3, [pc, #476]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a76      	ldr	r2, [pc, #472]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b74      	ldr	r3, [pc, #464]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01e      	b.n	8004cee <HAL_RCC_OscConfig+0x172>
 8004cb0:	1d3b      	adds	r3, r7, #4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x15a>
 8004cbc:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6c      	ldr	r2, [pc, #432]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a69      	ldr	r2, [pc, #420]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e00b      	b.n	8004cee <HAL_RCC_OscConfig+0x172>
 8004cd6:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a66      	ldr	r2, [pc, #408]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b64      	ldr	r3, [pc, #400]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a63      	ldr	r2, [pc, #396]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cee:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	f023 020f 	bic.w	r2, r3, #15
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	495d      	ldr	r1, [pc, #372]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d059      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7ff fc76 	bl	80045fc <HAL_GetTick>
 8004d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d16:	f7ff fc71 	bl	80045fc <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d902      	bls.n	8004d2c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	f000 be29 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
 8004d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d30:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004d40:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d102      	bne.n	8004d5e <HAL_RCC_OscConfig+0x1e2>
 8004d58:	4b46      	ldr	r3, [pc, #280]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x20e>
 8004d5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d62:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d76:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004d7a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004d7e:	fa93 f3a3 	rbit	r3, r3
 8004d82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004d86:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d8e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004d92:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004d96:	fa92 f2a2 	rbit	r2, r2
 8004d9a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004d9e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004da2:	fab2 f282 	clz	r2, r2
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	f042 0220 	orr.w	r2, r2, #32
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	f002 021f 	and.w	r2, r2, #31
 8004db2:	2101      	movs	r1, #1
 8004db4:	fa01 f202 	lsl.w	r2, r1, r2
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ab      	beq.n	8004d16 <HAL_RCC_OscConfig+0x19a>
 8004dbe:	e05c      	b.n	8004e7a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7ff fc1c 	bl	80045fc <HAL_GetTick>
 8004dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dca:	f7ff fc17 	bl	80045fc <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d902      	bls.n	8004de0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	f000 bdcf 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
 8004de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004dec:	fa93 f3a3 	rbit	r3, r3
 8004df0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004df4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df8:	fab3 f383 	clz	r3, r3
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d102      	bne.n	8004e12 <HAL_RCC_OscConfig+0x296>
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	e015      	b.n	8004e3e <HAL_RCC_OscConfig+0x2c2>
 8004e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004e1e:	fa93 f3a3 	rbit	r3, r3
 8004e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004e2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <HAL_RCC_OscConfig+0x2f8>)
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004e46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004e4a:	fa92 f2a2 	rbit	r2, r2
 8004e4e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004e52:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004e56:	fab2 f282 	clz	r2, r2
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	f042 0220 	orr.w	r2, r2, #32
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	f002 021f 	and.w	r2, r2, #31
 8004e66:	2101      	movs	r1, #1
 8004e68:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1ab      	bne.n	8004dca <HAL_RCC_OscConfig+0x24e>
 8004e72:	e002      	b.n	8004e7a <HAL_RCC_OscConfig+0x2fe>
 8004e74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 816f 	beq.w	8005168 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004e8a:	4bd0      	ldr	r3, [pc, #832]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004e96:	4bcd      	ldr	r3, [pc, #820]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d16c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x400>
 8004ea2:	4bca      	ldr	r3, [pc, #808]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d166      	bne.n	8004f7c <HAL_RCC_OscConfig+0x400>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ec0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec4:	fab3 f383 	clz	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_OscConfig+0x362>
 8004ed8:	4bbc      	ldr	r3, [pc, #752]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	e013      	b.n	8004f06 <HAL_RCC_OscConfig+0x38a>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004f02:	4bb2      	ldr	r3, [pc, #712]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2202      	movs	r2, #2
 8004f08:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004f0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004f10:	fa92 f2a2 	rbit	r2, r2
 8004f14:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004f18:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004f1c:	fab2 f282 	clz	r2, r2
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	f042 0220 	orr.w	r2, r2, #32
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	f002 021f 	and.w	r2, r2, #31
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3cc>
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d002      	beq.n	8004f48 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f000 bd1b 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4ba0      	ldr	r3, [pc, #640]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	21f8      	movs	r1, #248	; 0xf8
 8004f58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004f60:	fa91 f1a1 	rbit	r1, r1
 8004f64:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004f68:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004f6c:	fab1 f181 	clz	r1, r1
 8004f70:	b2c9      	uxtb	r1, r1
 8004f72:	408b      	lsls	r3, r1
 8004f74:	4995      	ldr	r1, [pc, #596]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	e0f5      	b.n	8005168 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f7c:	1d3b      	adds	r3, r7, #4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8085 	beq.w	8005092 <HAL_RCC_OscConfig+0x516>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004f9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7ff fb22 	bl	80045fc <HAL_GetTick>
 8004fb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7ff fb1d 	bl	80045fc <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d902      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	f000 bcd5 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004fde:	fa93 f3a3 	rbit	r3, r3
 8004fe2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004fe6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fea:	fab3 f383 	clz	r3, r3
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_RCC_OscConfig+0x488>
 8004ffe:	4b73      	ldr	r3, [pc, #460]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	e013      	b.n	800502c <HAL_RCC_OscConfig+0x4b0>
 8005004:	2302      	movs	r3, #2
 8005006:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005016:	2302      	movs	r3, #2
 8005018:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800501c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005028:	4b68      	ldr	r3, [pc, #416]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2202      	movs	r2, #2
 800502e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005032:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005036:	fa92 f2a2 	rbit	r2, r2
 800503a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800503e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005042:	fab2 f282 	clz	r2, r2
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	f042 0220 	orr.w	r2, r2, #32
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	f002 021f 	and.w	r2, r2, #31
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0af      	beq.n	8004fbe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505e:	4b5b      	ldr	r3, [pc, #364]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	21f8      	movs	r1, #248	; 0xf8
 800506e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005072:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005076:	fa91 f1a1 	rbit	r1, r1
 800507a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800507e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005082:	fab1 f181 	clz	r1, r1
 8005086:	b2c9      	uxtb	r1, r1
 8005088:	408b      	lsls	r3, r1
 800508a:	4950      	ldr	r1, [pc, #320]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
 8005090:	e06a      	b.n	8005168 <HAL_RCC_OscConfig+0x5ec>
 8005092:	2301      	movs	r3, #1
 8005094:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005098:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800509c:	fa93 f3a3 	rbit	r3, r3
 80050a0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80050a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	2300      	movs	r3, #0
 80050bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050be:	f7ff fa9d 	bl	80045fc <HAL_GetTick>
 80050c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c6:	e00a      	b.n	80050de <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c8:	f7ff fa98 	bl	80045fc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d902      	bls.n	80050de <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	f000 bc50 	b.w	800597e <HAL_RCC_OscConfig+0xe02>
 80050de:	2302      	movs	r3, #2
 80050e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80050f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f4:	fab3 f383 	clz	r3, r3
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <HAL_RCC_OscConfig+0x592>
 8005108:	4b30      	ldr	r3, [pc, #192]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	e013      	b.n	8005136 <HAL_RCC_OscConfig+0x5ba>
 800510e:	2302      	movs	r3, #2
 8005110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005118:	fa93 f3a3 	rbit	r3, r3
 800511c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005120:	2302      	movs	r3, #2
 8005122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005126:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800512a:	fa93 f3a3 	rbit	r3, r3
 800512e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_RCC_OscConfig+0x650>)
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2202      	movs	r2, #2
 8005138:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800513c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005140:	fa92 f2a2 	rbit	r2, r2
 8005144:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005148:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800514c:	fab2 f282 	clz	r2, r2
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	f042 0220 	orr.w	r2, r2, #32
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	f002 021f 	and.w	r2, r2, #31
 800515c:	2101      	movs	r1, #1
 800515e:	fa01 f202 	lsl.w	r2, r1, r2
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1af      	bne.n	80050c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80da 	beq.w	800532c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d069      	beq.n	8005256 <HAL_RCC_OscConfig+0x6da>
 8005182:	2301      	movs	r3, #1
 8005184:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005194:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005198:	fab3 f383 	clz	r3, r3
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCC_OscConfig+0x654>)
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	461a      	mov	r2, r3
 80051a8:	2301      	movs	r3, #1
 80051aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ac:	f7ff fa26 	bl	80045fc <HAL_GetTick>
 80051b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b4:	e00e      	b.n	80051d4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b6:	f7ff fa21 	bl	80045fc <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d906      	bls.n	80051d4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e3d9      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	10908120 	.word	0x10908120
 80051d4:	2302      	movs	r3, #2
 80051d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051de:	fa93 f3a3 	rbit	r3, r3
 80051e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80051e6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80051ea:	2202      	movs	r2, #2
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	fa93 f2a3 	rbit	r2, r3
 80051f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005202:	2202      	movs	r2, #2
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	fa93 f2a3 	rbit	r2, r3
 8005210:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005214:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005216:	4ba5      	ldr	r3, [pc, #660]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800521e:	2102      	movs	r1, #2
 8005220:	6019      	str	r1, [r3, #0]
 8005222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	fa93 f1a3 	rbit	r1, r3
 800522c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005230:	6019      	str	r1, [r3, #0]
  return result;
 8005232:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fab3 f383 	clz	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0b0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x63a>
 8005254:	e06a      	b.n	800532c <HAL_RCC_OscConfig+0x7b0>
 8005256:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fa93 f2a3 	rbit	r2, r3
 8005268:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800526c:	601a      	str	r2, [r3, #0]
  return result;
 800526e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005272:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005274:	fab3 f383 	clz	r3, r3
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	4b8c      	ldr	r3, [pc, #560]	; (80054b0 <HAL_RCC_OscConfig+0x934>)
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	461a      	mov	r2, r3
 8005284:	2300      	movs	r3, #0
 8005286:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005288:	f7ff f9b8 	bl	80045fc <HAL_GetTick>
 800528c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005290:	e009      	b.n	80052a6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005292:	f7ff f9b3 	bl	80045fc <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e36b      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 80052a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80052aa:	2202      	movs	r2, #2
 80052ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	fa93 f2a3 	rbit	r2, r3
 80052b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80052c2:	2202      	movs	r2, #2
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	fa93 f2a3 	rbit	r2, r3
 80052d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052da:	2202      	movs	r2, #2
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	fa93 f2a3 	rbit	r2, r3
 80052e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80052ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ee:	4b6f      	ldr	r3, [pc, #444]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80052f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80052f6:	2102      	movs	r1, #2
 80052f8:	6019      	str	r1, [r3, #0]
 80052fa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	fa93 f1a3 	rbit	r1, r3
 8005304:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005308:	6019      	str	r1, [r3, #0]
  return result;
 800530a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	fab3 f383 	clz	r3, r3
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2101      	movs	r1, #1
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1b2      	bne.n	8005292 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8158 	beq.w	80055ec <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005342:	4b5a      	ldr	r3, [pc, #360]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d112      	bne.n	8005374 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534e:	4b57      	ldr	r3, [pc, #348]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	4a56      	ldr	r2, [pc, #344]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	61d3      	str	r3, [r2, #28]
 800535a:	4b54      	ldr	r3, [pc, #336]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005374:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <HAL_RCC_OscConfig+0x938>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11a      	bne.n	80053b6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005380:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <HAL_RCC_OscConfig+0x938>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a4b      	ldr	r2, [pc, #300]	; (80054b4 <HAL_RCC_OscConfig+0x938>)
 8005386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800538a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538c:	f7ff f936 	bl	80045fc <HAL_GetTick>
 8005390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005394:	e009      	b.n	80053aa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005396:	f7ff f931 	bl	80045fc <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	; 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e2e9      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b42      	ldr	r3, [pc, #264]	; (80054b4 <HAL_RCC_OscConfig+0x938>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ef      	beq.n	8005396 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b6:	1d3b      	adds	r3, r7, #4
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x852>
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4a39      	ldr	r2, [pc, #228]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6213      	str	r3, [r2, #32]
 80053cc:	e02f      	b.n	800542e <HAL_RCC_OscConfig+0x8b2>
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x876>
 80053d8:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4a33      	ldr	r2, [pc, #204]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053de:	f023 0301 	bic.w	r3, r3, #1
 80053e2:	6213      	str	r3, [r2, #32]
 80053e4:	4b31      	ldr	r3, [pc, #196]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	4a30      	ldr	r2, [pc, #192]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053ea:	f023 0304 	bic.w	r3, r3, #4
 80053ee:	6213      	str	r3, [r2, #32]
 80053f0:	e01d      	b.n	800542e <HAL_RCC_OscConfig+0x8b2>
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b05      	cmp	r3, #5
 80053fa:	d10c      	bne.n	8005416 <HAL_RCC_OscConfig+0x89a>
 80053fc:	4b2b      	ldr	r3, [pc, #172]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005402:	f043 0304 	orr.w	r3, r3, #4
 8005406:	6213      	str	r3, [r2, #32]
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4a27      	ldr	r2, [pc, #156]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6213      	str	r3, [r2, #32]
 8005414:	e00b      	b.n	800542e <HAL_RCC_OscConfig+0x8b2>
 8005416:	4b25      	ldr	r3, [pc, #148]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	4a24      	ldr	r2, [pc, #144]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6213      	str	r3, [r2, #32]
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 8005428:	f023 0304 	bic.w	r3, r3, #4
 800542c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800542e:	1d3b      	adds	r3, r7, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d06b      	beq.n	8005510 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005438:	f7ff f8e0 	bl	80045fc <HAL_GetTick>
 800543c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005440:	e00b      	b.n	800545a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7ff f8db 	bl	80045fc <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e291      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 800545a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800545e:	2202      	movs	r2, #2
 8005460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005462:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	fa93 f2a3 	rbit	r2, r3
 800546c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005476:	2202      	movs	r2, #2
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	fa93 f2a3 	rbit	r2, r3
 8005484:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005488:	601a      	str	r2, [r3, #0]
  return result;
 800548a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800548e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005490:	fab3 f383 	clz	r3, r3
 8005494:	b2db      	uxtb	r3, r3
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d109      	bne.n	80054b8 <HAL_RCC_OscConfig+0x93c>
 80054a4:	4b01      	ldr	r3, [pc, #4]	; (80054ac <HAL_RCC_OscConfig+0x930>)
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	e014      	b.n	80054d4 <HAL_RCC_OscConfig+0x958>
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000
 80054b0:	10908120 	.word	0x10908120
 80054b4:	40007000 	.word	0x40007000
 80054b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80054bc:	2202      	movs	r2, #2
 80054be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	fa93 f2a3 	rbit	r2, r3
 80054ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	4bbb      	ldr	r3, [pc, #748]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80054d8:	2102      	movs	r1, #2
 80054da:	6011      	str	r1, [r2, #0]
 80054dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	fa92 f1a2 	rbit	r1, r2
 80054e6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80054ea:	6011      	str	r1, [r2, #0]
  return result;
 80054ec:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	fab2 f282 	clz	r2, r2
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	f002 021f 	and.w	r2, r2, #31
 8005502:	2101      	movs	r1, #1
 8005504:	fa01 f202 	lsl.w	r2, r1, r2
 8005508:	4013      	ands	r3, r2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d099      	beq.n	8005442 <HAL_RCC_OscConfig+0x8c6>
 800550e:	e063      	b.n	80055d8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005510:	f7ff f874 	bl	80045fc <HAL_GetTick>
 8005514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005518:	e00b      	b.n	8005532 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7ff f86f 	bl	80045fc <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e225      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 8005532:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005536:	2202      	movs	r2, #2
 8005538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	fa93 f2a3 	rbit	r2, r3
 8005544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800554e:	2202      	movs	r2, #2
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	fa93 f2a3 	rbit	r2, r3
 800555c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005560:	601a      	str	r2, [r3, #0]
  return result;
 8005562:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005566:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005568:	fab3 f383 	clz	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f043 0302 	orr.w	r3, r3, #2
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d102      	bne.n	8005582 <HAL_RCC_OscConfig+0xa06>
 800557c:	4b90      	ldr	r3, [pc, #576]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	e00d      	b.n	800559e <HAL_RCC_OscConfig+0xa22>
 8005582:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005586:	2202      	movs	r2, #2
 8005588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fa93 f2a3 	rbit	r2, r3
 8005594:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	4b89      	ldr	r3, [pc, #548]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055a2:	2102      	movs	r1, #2
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	fa92 f1a2 	rbit	r1, r2
 80055b0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80055b4:	6011      	str	r1, [r2, #0]
  return result;
 80055b6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	fab2 f282 	clz	r2, r2
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	f002 021f 	and.w	r2, r2, #31
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f202 	lsl.w	r2, r1, r2
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1a0      	bne.n	800551a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e0:	4b77      	ldr	r3, [pc, #476]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4a76      	ldr	r2, [pc, #472]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80055e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 81c2 	beq.w	800597c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055f8:	4b71      	ldr	r3, [pc, #452]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	f000 819c 	beq.w	800593e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b02      	cmp	r3, #2
 800560e:	f040 8114 	bne.w	800583a <HAL_RCC_OscConfig+0xcbe>
 8005612:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	fa93 f2a3 	rbit	r2, r3
 8005626:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800562a:	601a      	str	r2, [r3, #0]
  return result;
 800562c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005630:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005632:	fab3 f383 	clz	r3, r3
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800563c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	461a      	mov	r2, r3
 8005644:	2300      	movs	r3, #0
 8005646:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005648:	f7fe ffd8 	bl	80045fc <HAL_GetTick>
 800564c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005650:	e009      	b.n	8005666 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005652:	f7fe ffd3 	bl	80045fc <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e18b      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 8005666:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800566a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	fa93 f2a3 	rbit	r2, r3
 800567a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800567e:	601a      	str	r2, [r3, #0]
  return result;
 8005680:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005686:	fab3 f383 	clz	r3, r3
 800568a:	b2db      	uxtb	r3, r3
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b01      	cmp	r3, #1
 8005698:	d102      	bne.n	80056a0 <HAL_RCC_OscConfig+0xb24>
 800569a:	4b49      	ldr	r3, [pc, #292]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	e01b      	b.n	80056d8 <HAL_RCC_OscConfig+0xb5c>
 80056a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	fa93 f2a3 	rbit	r2, r3
 80056b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	fa93 f2a3 	rbit	r2, r3
 80056ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	fa92 f1a2 	rbit	r1, r2
 80056ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80056f0:	6011      	str	r1, [r2, #0]
  return result;
 80056f2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	fab2 f282 	clz	r2, r2
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	f042 0220 	orr.w	r2, r2, #32
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	f002 021f 	and.w	r2, r2, #31
 8005708:	2101      	movs	r1, #1
 800570a:	fa01 f202 	lsl.w	r2, r1, r2
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d19e      	bne.n	8005652 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	430b      	orrs	r3, r1
 800572a:	4925      	ldr	r1, [pc, #148]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
 8005730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005734:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	fa93 f2a3 	rbit	r2, r3
 8005744:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005748:	601a      	str	r2, [r3, #0]
  return result;
 800574a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800574e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005750:	fab3 f383 	clz	r3, r3
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800575a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	461a      	mov	r2, r3
 8005762:	2301      	movs	r3, #1
 8005764:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005766:	f7fe ff49 	bl	80045fc <HAL_GetTick>
 800576a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800576e:	e009      	b.n	8005784 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005770:	f7fe ff44 	bl	80045fc <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e0fc      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 8005784:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	fa93 f2a3 	rbit	r2, r3
 8005798:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800579c:	601a      	str	r2, [r3, #0]
  return result;
 800579e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a4:	fab3 f383 	clz	r3, r3
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d105      	bne.n	80057c4 <HAL_RCC_OscConfig+0xc48>
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <HAL_RCC_OscConfig+0xc44>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	e01e      	b.n	80057fc <HAL_RCC_OscConfig+0xc80>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	fa93 f2a3 	rbit	r2, r3
 80057d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80057dc:	601a      	str	r2, [r3, #0]
 80057de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	fa93 f2a3 	rbit	r2, r3
 80057f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_RCC_OscConfig+0xe0c>)
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005800:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005804:	6011      	str	r1, [r2, #0]
 8005806:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	fa92 f1a2 	rbit	r1, r2
 8005810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005814:	6011      	str	r1, [r2, #0]
  return result;
 8005816:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	fab2 f282 	clz	r2, r2
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	f042 0220 	orr.w	r2, r2, #32
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	f002 021f 	and.w	r2, r2, #31
 800582c:	2101      	movs	r1, #1
 800582e:	fa01 f202 	lsl.w	r2, r1, r2
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d09b      	beq.n	8005770 <HAL_RCC_OscConfig+0xbf4>
 8005838:	e0a0      	b.n	800597c <HAL_RCC_OscConfig+0xe00>
 800583a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800583e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	fa93 f2a3 	rbit	r2, r3
 800584e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005852:	601a      	str	r2, [r3, #0]
  return result;
 8005854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005858:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585a:	fab3 f383 	clz	r3, r3
 800585e:	b2db      	uxtb	r3, r3
 8005860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	461a      	mov	r2, r3
 800586c:	2300      	movs	r3, #0
 800586e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005870:	f7fe fec4 	bl	80045fc <HAL_GetTick>
 8005874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005878:	e009      	b.n	800588e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587a:	f7fe febf 	bl	80045fc <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e077      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
 800588e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	fa93 f2a3 	rbit	r2, r3
 80058a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058a6:	601a      	str	r2, [r3, #0]
  return result;
 80058a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058ae:	fab3 f383 	clz	r3, r3
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d102      	bne.n	80058c8 <HAL_RCC_OscConfig+0xd4c>
 80058c2:	4b31      	ldr	r3, [pc, #196]	; (8005988 <HAL_RCC_OscConfig+0xe0c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	e01b      	b.n	8005900 <HAL_RCC_OscConfig+0xd84>
 80058c8:	f107 0320 	add.w	r3, r7, #32
 80058cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d2:	f107 0320 	add.w	r3, r7, #32
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	fa93 f2a3 	rbit	r2, r3
 80058dc:	f107 031c 	add.w	r3, r7, #28
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	f107 0318 	add.w	r3, r7, #24
 80058e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f107 0318 	add.w	r3, r7, #24
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	fa93 f2a3 	rbit	r2, r3
 80058f6:	f107 0314 	add.w	r3, r7, #20
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCC_OscConfig+0xe0c>)
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f107 0210 	add.w	r2, r7, #16
 8005904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005908:	6011      	str	r1, [r2, #0]
 800590a:	f107 0210 	add.w	r2, r7, #16
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	fa92 f1a2 	rbit	r1, r2
 8005914:	f107 020c 	add.w	r2, r7, #12
 8005918:	6011      	str	r1, [r2, #0]
  return result;
 800591a:	f107 020c 	add.w	r2, r7, #12
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	fab2 f282 	clz	r2, r2
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	f042 0220 	orr.w	r2, r2, #32
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	f002 021f 	and.w	r2, r2, #31
 8005930:	2101      	movs	r1, #1
 8005932:	fa01 f202 	lsl.w	r2, r1, r2
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d19e      	bne.n	800587a <HAL_RCC_OscConfig+0xcfe>
 800593c:	e01e      	b.n	800597c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593e:	1d3b      	adds	r3, r7, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e018      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_RCC_OscConfig+0xe0c>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005954:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800595c:	1d3b      	adds	r3, r7, #4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	429a      	cmp	r2, r3
 8005964:	d108      	bne.n	8005978 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005966:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800596a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40021000 	.word	0x40021000

0800598c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b09e      	sub	sp, #120	; 0x78
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e162      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a4:	4b90      	ldr	r3, [pc, #576]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d910      	bls.n	80059d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b8d      	ldr	r3, [pc, #564]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0207 	bic.w	r2, r3, #7
 80059ba:	498b      	ldr	r1, [pc, #556]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c2:	4b89      	ldr	r3, [pc, #548]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d001      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e14a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e0:	4b82      	ldr	r3, [pc, #520]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	497f      	ldr	r1, [pc, #508]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80dc 	beq.w	8005bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d13c      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xf6>
 8005a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a18:	fab3 f383 	clz	r3, r3
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xa6>
 8005a2c:	4b6f      	ldr	r3, [pc, #444]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	e00f      	b.n	8005a52 <HAL_RCC_ClockConfig+0xc6>
 8005a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a3a:	fa93 f3a3 	rbit	r3, r3
 8005a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a44:	663b      	str	r3, [r7, #96]	; 0x60
 8005a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a48:	fa93 f3a3 	rbit	r3, r3
 8005a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a4e:	4b67      	ldr	r3, [pc, #412]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5a:	fa92 f2a2 	rbit	r2, r2
 8005a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a62:	fab2 f282 	clz	r2, r2
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	f042 0220 	orr.w	r2, r2, #32
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	f002 021f 	and.w	r2, r2, #31
 8005a72:	2101      	movs	r1, #1
 8005a74:	fa01 f202 	lsl.w	r2, r1, r2
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d17b      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0f3      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d13c      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x178>
 8005a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	fab3 f383 	clz	r3, r3
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	095b      	lsrs	r3, r3, #5
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d102      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x128>
 8005aae:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	e00f      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
 8005ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abc:	fa93 f3a3 	rbit	r3, r3
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aca:	fa93 f3a3 	rbit	r3, r3
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad0:	4b46      	ldr	r3, [pc, #280]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005adc:	fa92 f2a2 	rbit	r2, r2
 8005ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae4:	fab2 f282 	clz	r2, r2
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	f042 0220 	orr.w	r2, r2, #32
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	f002 021f 	and.w	r2, r2, #31
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f202 	lsl.w	r2, r1, r2
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13a      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0b2      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
 8005b04:	2302      	movs	r3, #2
 8005b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b12:	fab3 f383 	clz	r3, r3
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
 8005b26:	4b31      	ldr	r3, [pc, #196]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	e00d      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1bc>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	2302      	movs	r3, #2
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	fa93 f3a3 	rbit	r3, r3
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	4b29      	ldr	r3, [pc, #164]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	2202      	movs	r2, #2
 8005b4a:	61ba      	str	r2, [r7, #24]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	fa92 f2a2 	rbit	r2, r2
 8005b52:	617a      	str	r2, [r7, #20]
  return result;
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	fab2 f282 	clz	r2, r2
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	f042 0220 	orr.w	r2, r2, #32
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	f002 021f 	and.w	r2, r2, #31
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e079      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	491a      	ldr	r1, [pc, #104]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fe fd38 	bl	80045fc <HAL_GetTick>
 8005b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fe fd34 	bl	80045fc <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e061      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b11      	ldr	r3, [pc, #68]	; (8005bec <HAL_RCC_ClockConfig+0x260>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d214      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	4906      	ldr	r1, [pc, #24]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <HAL_RCC_ClockConfig+0x25c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e040      	b.n	8005c6a <HAL_RCC_ClockConfig+0x2de>
 8005be8:	40022000 	.word	0x40022000
 8005bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	491a      	ldr	r1, [pc, #104]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1a:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4912      	ldr	r1, [pc, #72]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c2e:	f000 f829 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8005c32:	4601      	mov	r1, r0
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RCC_ClockConfig+0x2e8>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3c:	22f0      	movs	r2, #240	; 0xf0
 8005c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	fa92 f2a2 	rbit	r2, r2
 8005c46:	60fa      	str	r2, [r7, #12]
  return result;
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	fab2 f282 	clz	r2, r2
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	40d3      	lsrs	r3, r2
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <HAL_RCC_ClockConfig+0x2ec>)
 8005c54:	5cd3      	ldrb	r3, [r2, r3]
 8005c56:	fa21 f303 	lsr.w	r3, r1, r3
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <HAL_RCC_ClockConfig+0x2f0>)
 8005c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c5e:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_RCC_ClockConfig+0x2f4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fc86 	bl	8004574 <HAL_InitTick>
  
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3778      	adds	r7, #120	; 0x78
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000
 8005c78:	08005dd8 	.word	0x08005dd8
 8005c7c:	20000000 	.word	0x20000000
 8005c80:	20000004 	.word	0x20000004

08005c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61fb      	str	r3, [r7, #28]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61bb      	str	r3, [r7, #24]
 8005c92:	2300      	movs	r3, #0
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005c9e:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x36>
 8005cb2:	e03c      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cb4:	4b24      	ldr	r3, [pc, #144]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cb6:	623b      	str	r3, [r7, #32]
      break;
 8005cb8:	e03c      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	fa92 f2a2 	rbit	r2, r2
 8005ccc:	607a      	str	r2, [r7, #4]
  return result;
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	fab2 f282 	clz	r2, r2
 8005cd4:	b2d2      	uxtb	r2, r2
 8005cd6:	40d3      	lsrs	r3, r2
 8005cd8:	4a1c      	ldr	r2, [pc, #112]	; (8005d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cda:	5cd3      	ldrb	r3, [r2, r3]
 8005cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005cde:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	220f      	movs	r2, #15
 8005ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	fa92 f2a2 	rbit	r2, r2
 8005cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	fab2 f282 	clz	r2, r2
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	40d3      	lsrs	r3, r2
 8005cfc:	4a14      	ldr	r2, [pc, #80]	; (8005d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1c:	e004      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	4a0c      	ldr	r2, [pc, #48]	; (8005d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	623b      	str	r3, [r7, #32]
      break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d30:	623b      	str	r3, [r7, #32]
      break;
 8005d32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	372c      	adds	r7, #44	; 0x2c
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40021000 	.word	0x40021000
 8005d48:	007a1200 	.word	0x007a1200
 8005d4c:	08005de8 	.word	0x08005de8
 8005d50:	08005df8 	.word	0x08005df8
 8005d54:	003d0900 	.word	0x003d0900

08005d58 <__libc_init_array>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4e0d      	ldr	r6, [pc, #52]	; (8005d90 <__libc_init_array+0x38>)
 8005d5c:	4c0d      	ldr	r4, [pc, #52]	; (8005d94 <__libc_init_array+0x3c>)
 8005d5e:	1ba4      	subs	r4, r4, r6
 8005d60:	10a4      	asrs	r4, r4, #2
 8005d62:	2500      	movs	r5, #0
 8005d64:	42a5      	cmp	r5, r4
 8005d66:	d109      	bne.n	8005d7c <__libc_init_array+0x24>
 8005d68:	4e0b      	ldr	r6, [pc, #44]	; (8005d98 <__libc_init_array+0x40>)
 8005d6a:	4c0c      	ldr	r4, [pc, #48]	; (8005d9c <__libc_init_array+0x44>)
 8005d6c:	f000 f820 	bl	8005db0 <_init>
 8005d70:	1ba4      	subs	r4, r4, r6
 8005d72:	10a4      	asrs	r4, r4, #2
 8005d74:	2500      	movs	r5, #0
 8005d76:	42a5      	cmp	r5, r4
 8005d78:	d105      	bne.n	8005d86 <__libc_init_array+0x2e>
 8005d7a:	bd70      	pop	{r4, r5, r6, pc}
 8005d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d80:	4798      	blx	r3
 8005d82:	3501      	adds	r5, #1
 8005d84:	e7ee      	b.n	8005d64 <__libc_init_array+0xc>
 8005d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d8a:	4798      	blx	r3
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7f2      	b.n	8005d76 <__libc_init_array+0x1e>
 8005d90:	08005e08 	.word	0x08005e08
 8005d94:	08005e08 	.word	0x08005e08
 8005d98:	08005e08 	.word	0x08005e08
 8005d9c:	08005e0c 	.word	0x08005e0c

08005da0 <memset>:
 8005da0:	4402      	add	r2, r0
 8005da2:	4603      	mov	r3, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d100      	bne.n	8005daa <memset+0xa>
 8005da8:	4770      	bx	lr
 8005daa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dae:	e7f9      	b.n	8005da4 <memset+0x4>

08005db0 <_init>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr

08005dbc <_fini>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr

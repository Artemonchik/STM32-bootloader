
upload-test-program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08022980  08022980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080229c8  080229c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080229c8  080229c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080229c8  080229c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080229c8  080229c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080229cc  080229cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080229d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080229dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080229dc  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c25  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c0  00000000  00000000  00026c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  00027f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a0  00000000  00000000  00028570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018951  00000000  00000000  00028b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e77  00000000  00000000  00041461  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f805  00000000  00000000  000472d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6add  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001860  00000000  00000000  000d6b58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	2000000c 	.word	0x2000000c
 80201a4:	00000000 	.word	0x00000000
 80201a8:	08022968 	.word	0x08022968

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	20000010 	.word	0x20000010
 80201c4:	08022968 	.word	0x08022968

080201c8 <togglePins>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void togglePins(){
 80201c8:	b590      	push	{r4, r7, lr}
 80201ca:	b085      	sub	sp, #20
 80201cc:	af00      	add	r7, sp, #0
	static int start = 0;
	static int state = 0;
	uint16_t pins[] = {
 80201ce:	4b18      	ldr	r3, [pc, #96]	; (8020230 <togglePins+0x68>)
 80201d0:	463c      	mov	r4, r7
 80201d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80201d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			GPIO_PIN_13,
			GPIO_PIN_14,
			GPIO_PIN_15
	};

	HAL_GPIO_TogglePin(GPIOE, pins[(state + 1) % 8]);
 80201d8:	4b16      	ldr	r3, [pc, #88]	; (8020234 <togglePins+0x6c>)
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	3301      	adds	r3, #1
 80201de:	425a      	negs	r2, r3
 80201e0:	f003 0307 	and.w	r3, r3, #7
 80201e4:	f002 0207 	and.w	r2, r2, #7
 80201e8:	bf58      	it	pl
 80201ea:	4253      	negpl	r3, r2
 80201ec:	005b      	lsls	r3, r3, #1
 80201ee:	f107 0210 	add.w	r2, r7, #16
 80201f2:	4413      	add	r3, r2
 80201f4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80201f8:	4619      	mov	r1, r3
 80201fa:	480f      	ldr	r0, [pc, #60]	; (8020238 <togglePins+0x70>)
 80201fc:	f000 fcb6 	bl	8020b6c <HAL_GPIO_TogglePin>
	state++;
 8020200:	4b0c      	ldr	r3, [pc, #48]	; (8020234 <togglePins+0x6c>)
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	3301      	adds	r3, #1
 8020206:	4a0b      	ldr	r2, [pc, #44]	; (8020234 <togglePins+0x6c>)
 8020208:	6013      	str	r3, [r2, #0]
	state %= 8;
 802020a:	4b0a      	ldr	r3, [pc, #40]	; (8020234 <togglePins+0x6c>)
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	425a      	negs	r2, r3
 8020210:	f003 0307 	and.w	r3, r3, #7
 8020214:	f002 0207 	and.w	r2, r2, #7
 8020218:	bf58      	it	pl
 802021a:	4253      	negpl	r3, r2
 802021c:	4a05      	ldr	r2, [pc, #20]	; (8020234 <togglePins+0x6c>)
 802021e:	6013      	str	r3, [r2, #0]
	start = 1;
 8020220:	4b06      	ldr	r3, [pc, #24]	; (802023c <togglePins+0x74>)
 8020222:	2201      	movs	r2, #1
 8020224:	601a      	str	r2, [r3, #0]
}
 8020226:	bf00      	nop
 8020228:	3714      	adds	r7, #20
 802022a:	46bd      	mov	sp, r7
 802022c:	bd90      	pop	{r4, r7, pc}
 802022e:	bf00      	nop
 8020230:	08022980 	.word	0x08022980
 8020234:	20000028 	.word	0x20000028
 8020238:	48001000 	.word	0x48001000
 802023c:	2000002c 	.word	0x2000002c

08020240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020240:	b580      	push	{r7, lr}
 8020242:	b082      	sub	sp, #8
 8020244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020246:	f000 f9b3 	bl	80205b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802024a:	f000 f813 	bl	8020274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802024e:	f000 f891 	bl	8020374 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8020252:	f000 f85f 	bl	8020314 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  togglePins();
 8020256:	f7ff ffb7 	bl	80201c8 <togglePins>
	  for(int i = 0; i < 340000; i++){
 802025a:	2300      	movs	r3, #0
 802025c:	607b      	str	r3, [r7, #4]
 802025e:	e002      	b.n	8020266 <main+0x26>
 8020260:	687b      	ldr	r3, [r7, #4]
 8020262:	3301      	adds	r3, #1
 8020264:	607b      	str	r3, [r7, #4]
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	4a01      	ldr	r2, [pc, #4]	; (8020270 <main+0x30>)
 802026a:	4293      	cmp	r3, r2
 802026c:	ddf8      	ble.n	8020260 <main+0x20>
	  togglePins();
 802026e:	e7f2      	b.n	8020256 <main+0x16>
 8020270:	0005301f 	.word	0x0005301f

08020274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020274:	b580      	push	{r7, lr}
 8020276:	b09e      	sub	sp, #120	; 0x78
 8020278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802027a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 802027e:	2228      	movs	r2, #40	; 0x28
 8020280:	2100      	movs	r1, #0
 8020282:	4618      	mov	r0, r3
 8020284:	f002 fb68 	bl	8022958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802028c:	2200      	movs	r2, #0
 802028e:	601a      	str	r2, [r3, #0]
 8020290:	605a      	str	r2, [r3, #4]
 8020292:	609a      	str	r2, [r3, #8]
 8020294:	60da      	str	r2, [r3, #12]
 8020296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8020298:	463b      	mov	r3, r7
 802029a:	223c      	movs	r2, #60	; 0x3c
 802029c:	2100      	movs	r1, #0
 802029e:	4618      	mov	r0, r3
 80202a0:	f002 fb5a 	bl	8022958 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80202a4:	2302      	movs	r3, #2
 80202a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80202a8:	2301      	movs	r3, #1
 80202aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80202ac:	2310      	movs	r3, #16
 80202ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80202b0:	2300      	movs	r3, #0
 80202b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80202b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80202b8:	4618      	mov	r0, r3
 80202ba:	f000 fc71 	bl	8020ba0 <HAL_RCC_OscConfig>
 80202be:	4603      	mov	r3, r0
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d001      	beq.n	80202c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80202c4:	f000 f896 	bl	80203f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80202c8:	230f      	movs	r3, #15
 80202ca:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80202cc:	2300      	movs	r3, #0
 80202ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80202d0:	2300      	movs	r3, #0
 80202d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80202d4:	2300      	movs	r3, #0
 80202d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80202d8:	2300      	movs	r3, #0
 80202da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80202dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80202e0:	2100      	movs	r1, #0
 80202e2:	4618      	mov	r0, r3
 80202e4:	f001 fb64 	bl	80219b0 <HAL_RCC_ClockConfig>
 80202e8:	4603      	mov	r3, r0
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	d001      	beq.n	80202f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80202ee:	f000 f881 	bl	80203f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80202f2:	2301      	movs	r3, #1
 80202f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80202f6:	2300      	movs	r3, #0
 80202f8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80202fa:	463b      	mov	r3, r7
 80202fc:	4618      	mov	r0, r3
 80202fe:	f001 fd8d 	bl	8021e1c <HAL_RCCEx_PeriphCLKConfig>
 8020302:	4603      	mov	r3, r0
 8020304:	2b00      	cmp	r3, #0
 8020306:	d001      	beq.n	802030c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8020308:	f000 f874 	bl	80203f4 <Error_Handler>
  }
}
 802030c:	bf00      	nop
 802030e:	3778      	adds	r7, #120	; 0x78
 8020310:	46bd      	mov	sp, r7
 8020312:	bd80      	pop	{r7, pc}

08020314 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020314:	b580      	push	{r7, lr}
 8020316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020318:	4b14      	ldr	r3, [pc, #80]	; (802036c <MX_USART1_UART_Init+0x58>)
 802031a:	4a15      	ldr	r2, [pc, #84]	; (8020370 <MX_USART1_UART_Init+0x5c>)
 802031c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 802031e:	4b13      	ldr	r3, [pc, #76]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8020324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020326:	4b11      	ldr	r3, [pc, #68]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020328:	2200      	movs	r2, #0
 802032a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 802032c:	4b0f      	ldr	r3, [pc, #60]	; (802036c <MX_USART1_UART_Init+0x58>)
 802032e:	2200      	movs	r2, #0
 8020330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020332:	4b0e      	ldr	r3, [pc, #56]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020334:	2200      	movs	r2, #0
 8020336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020338:	4b0c      	ldr	r3, [pc, #48]	; (802036c <MX_USART1_UART_Init+0x58>)
 802033a:	220c      	movs	r2, #12
 802033c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802033e:	4b0b      	ldr	r3, [pc, #44]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020340:	2200      	movs	r2, #0
 8020342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020344:	4b09      	ldr	r3, [pc, #36]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020346:	2200      	movs	r2, #0
 8020348:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802034a:	4b08      	ldr	r3, [pc, #32]	; (802036c <MX_USART1_UART_Init+0x58>)
 802034c:	2200      	movs	r2, #0
 802034e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020350:	4b06      	ldr	r3, [pc, #24]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020352:	2200      	movs	r2, #0
 8020354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020356:	4805      	ldr	r0, [pc, #20]	; (802036c <MX_USART1_UART_Init+0x58>)
 8020358:	f001 ff10 	bl	802217c <HAL_UART_Init>
 802035c:	4603      	mov	r3, r0
 802035e:	2b00      	cmp	r3, #0
 8020360:	d001      	beq.n	8020366 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8020362:	f000 f847 	bl	80203f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020366:	bf00      	nop
 8020368:	bd80      	pop	{r7, pc}
 802036a:	bf00      	nop
 802036c:	20000030 	.word	0x20000030
 8020370:	40013800 	.word	0x40013800

08020374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020374:	b580      	push	{r7, lr}
 8020376:	b088      	sub	sp, #32
 8020378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802037a:	f107 030c 	add.w	r3, r7, #12
 802037e:	2200      	movs	r2, #0
 8020380:	601a      	str	r2, [r3, #0]
 8020382:	605a      	str	r2, [r3, #4]
 8020384:	609a      	str	r2, [r3, #8]
 8020386:	60da      	str	r2, [r3, #12]
 8020388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802038a:	4b18      	ldr	r3, [pc, #96]	; (80203ec <MX_GPIO_Init+0x78>)
 802038c:	695b      	ldr	r3, [r3, #20]
 802038e:	4a17      	ldr	r2, [pc, #92]	; (80203ec <MX_GPIO_Init+0x78>)
 8020390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8020394:	6153      	str	r3, [r2, #20]
 8020396:	4b15      	ldr	r3, [pc, #84]	; (80203ec <MX_GPIO_Init+0x78>)
 8020398:	695b      	ldr	r3, [r3, #20]
 802039a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802039e:	60bb      	str	r3, [r7, #8]
 80203a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80203a2:	4b12      	ldr	r3, [pc, #72]	; (80203ec <MX_GPIO_Init+0x78>)
 80203a4:	695b      	ldr	r3, [r3, #20]
 80203a6:	4a11      	ldr	r2, [pc, #68]	; (80203ec <MX_GPIO_Init+0x78>)
 80203a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80203ac:	6153      	str	r3, [r2, #20]
 80203ae:	4b0f      	ldr	r3, [pc, #60]	; (80203ec <MX_GPIO_Init+0x78>)
 80203b0:	695b      	ldr	r3, [r3, #20]
 80203b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80203b6:	607b      	str	r3, [r7, #4]
 80203b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80203ba:	2200      	movs	r2, #0
 80203bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80203c0:	480b      	ldr	r0, [pc, #44]	; (80203f0 <MX_GPIO_Init+0x7c>)
 80203c2:	f000 fbbb 	bl	8020b3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80203c6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80203ca:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80203cc:	2301      	movs	r3, #1
 80203ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80203d0:	2300      	movs	r3, #0
 80203d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80203d4:	2300      	movs	r3, #0
 80203d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80203d8:	f107 030c 	add.w	r3, r7, #12
 80203dc:	4619      	mov	r1, r3
 80203de:	4804      	ldr	r0, [pc, #16]	; (80203f0 <MX_GPIO_Init+0x7c>)
 80203e0:	f000 fa32 	bl	8020848 <HAL_GPIO_Init>

}
 80203e4:	bf00      	nop
 80203e6:	3720      	adds	r7, #32
 80203e8:	46bd      	mov	sp, r7
 80203ea:	bd80      	pop	{r7, pc}
 80203ec:	40021000 	.word	0x40021000
 80203f0:	48001000 	.word	0x48001000

080203f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80203f4:	b480      	push	{r7}
 80203f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80203f8:	bf00      	nop
 80203fa:	46bd      	mov	sp, r7
 80203fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020400:	4770      	bx	lr
	...

08020404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020404:	b480      	push	{r7}
 8020406:	b083      	sub	sp, #12
 8020408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802040a:	4b0f      	ldr	r3, [pc, #60]	; (8020448 <HAL_MspInit+0x44>)
 802040c:	699b      	ldr	r3, [r3, #24]
 802040e:	4a0e      	ldr	r2, [pc, #56]	; (8020448 <HAL_MspInit+0x44>)
 8020410:	f043 0301 	orr.w	r3, r3, #1
 8020414:	6193      	str	r3, [r2, #24]
 8020416:	4b0c      	ldr	r3, [pc, #48]	; (8020448 <HAL_MspInit+0x44>)
 8020418:	699b      	ldr	r3, [r3, #24]
 802041a:	f003 0301 	and.w	r3, r3, #1
 802041e:	607b      	str	r3, [r7, #4]
 8020420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8020422:	4b09      	ldr	r3, [pc, #36]	; (8020448 <HAL_MspInit+0x44>)
 8020424:	69db      	ldr	r3, [r3, #28]
 8020426:	4a08      	ldr	r2, [pc, #32]	; (8020448 <HAL_MspInit+0x44>)
 8020428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802042c:	61d3      	str	r3, [r2, #28]
 802042e:	4b06      	ldr	r3, [pc, #24]	; (8020448 <HAL_MspInit+0x44>)
 8020430:	69db      	ldr	r3, [r3, #28]
 8020432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020436:	603b      	str	r3, [r7, #0]
 8020438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802043a:	bf00      	nop
 802043c:	370c      	adds	r7, #12
 802043e:	46bd      	mov	sp, r7
 8020440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020444:	4770      	bx	lr
 8020446:	bf00      	nop
 8020448:	40021000 	.word	0x40021000

0802044c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	b08a      	sub	sp, #40	; 0x28
 8020450:	af00      	add	r7, sp, #0
 8020452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020454:	f107 0314 	add.w	r3, r7, #20
 8020458:	2200      	movs	r2, #0
 802045a:	601a      	str	r2, [r3, #0]
 802045c:	605a      	str	r2, [r3, #4]
 802045e:	609a      	str	r2, [r3, #8]
 8020460:	60da      	str	r2, [r3, #12]
 8020462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	4a18      	ldr	r2, [pc, #96]	; (80204cc <HAL_UART_MspInit+0x80>)
 802046a:	4293      	cmp	r3, r2
 802046c:	d129      	bne.n	80204c2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 802046e:	4b18      	ldr	r3, [pc, #96]	; (80204d0 <HAL_UART_MspInit+0x84>)
 8020470:	699b      	ldr	r3, [r3, #24]
 8020472:	4a17      	ldr	r2, [pc, #92]	; (80204d0 <HAL_UART_MspInit+0x84>)
 8020474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020478:	6193      	str	r3, [r2, #24]
 802047a:	4b15      	ldr	r3, [pc, #84]	; (80204d0 <HAL_UART_MspInit+0x84>)
 802047c:	699b      	ldr	r3, [r3, #24]
 802047e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020482:	613b      	str	r3, [r7, #16]
 8020484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020486:	4b12      	ldr	r3, [pc, #72]	; (80204d0 <HAL_UART_MspInit+0x84>)
 8020488:	695b      	ldr	r3, [r3, #20]
 802048a:	4a11      	ldr	r2, [pc, #68]	; (80204d0 <HAL_UART_MspInit+0x84>)
 802048c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020490:	6153      	str	r3, [r2, #20]
 8020492:	4b0f      	ldr	r3, [pc, #60]	; (80204d0 <HAL_UART_MspInit+0x84>)
 8020494:	695b      	ldr	r3, [r3, #20]
 8020496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802049a:	60fb      	str	r3, [r7, #12]
 802049c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 802049e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80204a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80204a4:	2302      	movs	r3, #2
 80204a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80204a8:	2300      	movs	r3, #0
 80204aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80204ac:	2303      	movs	r3, #3
 80204ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80204b0:	2307      	movs	r3, #7
 80204b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80204b4:	f107 0314 	add.w	r3, r7, #20
 80204b8:	4619      	mov	r1, r3
 80204ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80204be:	f000 f9c3 	bl	8020848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80204c2:	bf00      	nop
 80204c4:	3728      	adds	r7, #40	; 0x28
 80204c6:	46bd      	mov	sp, r7
 80204c8:	bd80      	pop	{r7, pc}
 80204ca:	bf00      	nop
 80204cc:	40013800 	.word	0x40013800
 80204d0:	40021000 	.word	0x40021000

080204d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80204d4:	b480      	push	{r7}
 80204d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80204d8:	bf00      	nop
 80204da:	46bd      	mov	sp, r7
 80204dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e0:	4770      	bx	lr

080204e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80204e2:	b480      	push	{r7}
 80204e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80204e6:	e7fe      	b.n	80204e6 <HardFault_Handler+0x4>

080204e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80204e8:	b480      	push	{r7}
 80204ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80204ec:	e7fe      	b.n	80204ec <MemManage_Handler+0x4>

080204ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80204ee:	b480      	push	{r7}
 80204f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80204f2:	e7fe      	b.n	80204f2 <BusFault_Handler+0x4>

080204f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80204f4:	b480      	push	{r7}
 80204f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80204f8:	e7fe      	b.n	80204f8 <UsageFault_Handler+0x4>

080204fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80204fa:	b480      	push	{r7}
 80204fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80204fe:	bf00      	nop
 8020500:	46bd      	mov	sp, r7
 8020502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020506:	4770      	bx	lr

08020508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020508:	b480      	push	{r7}
 802050a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 802050c:	bf00      	nop
 802050e:	46bd      	mov	sp, r7
 8020510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020514:	4770      	bx	lr

08020516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020516:	b480      	push	{r7}
 8020518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802051a:	bf00      	nop
 802051c:	46bd      	mov	sp, r7
 802051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020522:	4770      	bx	lr

08020524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020524:	b580      	push	{r7, lr}
 8020526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020528:	f000 f888 	bl	802063c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802052c:	bf00      	nop
 802052e:	bd80      	pop	{r7, pc}

08020530 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020530:	b480      	push	{r7}
 8020532:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020534:	4b08      	ldr	r3, [pc, #32]	; (8020558 <SystemInit+0x28>)
 8020536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802053a:	4a07      	ldr	r2, [pc, #28]	; (8020558 <SystemInit+0x28>)
 802053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8020544:	4b04      	ldr	r3, [pc, #16]	; (8020558 <SystemInit+0x28>)
 8020546:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802054a:	609a      	str	r2, [r3, #8]
#endif
}
 802054c:	bf00      	nop
 802054e:	46bd      	mov	sp, r7
 8020550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020554:	4770      	bx	lr
 8020556:	bf00      	nop
 8020558:	e000ed00 	.word	0xe000ed00

0802055c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 802055c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020594 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8020562:	e003      	b.n	802056c <LoopCopyDataInit>

08020564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8020564:	4b0c      	ldr	r3, [pc, #48]	; (8020598 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8020566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 802056a:	3104      	adds	r1, #4

0802056c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 802056c:	480b      	ldr	r0, [pc, #44]	; (802059c <LoopForever+0xa>)
	ldr	r3, =_edata
 802056e:	4b0c      	ldr	r3, [pc, #48]	; (80205a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8020572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8020574:	d3f6      	bcc.n	8020564 <CopyDataInit>
	ldr	r2, =_sbss
 8020576:	4a0b      	ldr	r2, [pc, #44]	; (80205a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8020578:	e002      	b.n	8020580 <LoopFillZerobss>

0802057a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 802057a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 802057c:	f842 3b04 	str.w	r3, [r2], #4

08020580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020580:	4b09      	ldr	r3, [pc, #36]	; (80205a8 <LoopForever+0x16>)
	cmp	r2, r3
 8020582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8020584:	d3f9      	bcc.n	802057a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8020586:	f7ff ffd3 	bl	8020530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802058a:	f002 f9c1 	bl	8022910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 802058e:	f7ff fe57 	bl	8020240 <main>

08020592 <LoopForever>:

LoopForever:
    b LoopForever
 8020592:	e7fe      	b.n	8020592 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020594:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8020598:	080229d0 	.word	0x080229d0
	ldr	r0, =_sdata
 802059c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80205a0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80205a4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80205a8:	200000b4 	.word	0x200000b4

080205ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80205ac:	e7fe      	b.n	80205ac <ADC1_2_IRQHandler>
	...

080205b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80205b0:	b580      	push	{r7, lr}
 80205b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80205b4:	4b08      	ldr	r3, [pc, #32]	; (80205d8 <HAL_Init+0x28>)
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	4a07      	ldr	r2, [pc, #28]	; (80205d8 <HAL_Init+0x28>)
 80205ba:	f043 0310 	orr.w	r3, r3, #16
 80205be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80205c0:	2003      	movs	r0, #3
 80205c2:	f000 f90d 	bl	80207e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80205c6:	2000      	movs	r0, #0
 80205c8:	f000 f808 	bl	80205dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80205cc:	f7ff ff1a 	bl	8020404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80205d0:	2300      	movs	r3, #0
}
 80205d2:	4618      	mov	r0, r3
 80205d4:	bd80      	pop	{r7, pc}
 80205d6:	bf00      	nop
 80205d8:	40022000 	.word	0x40022000

080205dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80205dc:	b580      	push	{r7, lr}
 80205de:	b082      	sub	sp, #8
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80205e4:	4b12      	ldr	r3, [pc, #72]	; (8020630 <HAL_InitTick+0x54>)
 80205e6:	681a      	ldr	r2, [r3, #0]
 80205e8:	4b12      	ldr	r3, [pc, #72]	; (8020634 <HAL_InitTick+0x58>)
 80205ea:	781b      	ldrb	r3, [r3, #0]
 80205ec:	4619      	mov	r1, r3
 80205ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80205f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80205f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80205fa:	4618      	mov	r0, r3
 80205fc:	f000 f917 	bl	802082e <HAL_SYSTICK_Config>
 8020600:	4603      	mov	r3, r0
 8020602:	2b00      	cmp	r3, #0
 8020604:	d001      	beq.n	802060a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020606:	2301      	movs	r3, #1
 8020608:	e00e      	b.n	8020628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	2b0f      	cmp	r3, #15
 802060e:	d80a      	bhi.n	8020626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020610:	2200      	movs	r2, #0
 8020612:	6879      	ldr	r1, [r7, #4]
 8020614:	f04f 30ff 	mov.w	r0, #4294967295
 8020618:	f000 f8ed 	bl	80207f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802061c:	4a06      	ldr	r2, [pc, #24]	; (8020638 <HAL_InitTick+0x5c>)
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8020622:	2300      	movs	r3, #0
 8020624:	e000      	b.n	8020628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020626:	2301      	movs	r3, #1
}
 8020628:	4618      	mov	r0, r3
 802062a:	3708      	adds	r7, #8
 802062c:	46bd      	mov	sp, r7
 802062e:	bd80      	pop	{r7, pc}
 8020630:	20000000 	.word	0x20000000
 8020634:	20000008 	.word	0x20000008
 8020638:	20000004 	.word	0x20000004

0802063c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802063c:	b480      	push	{r7}
 802063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020640:	4b06      	ldr	r3, [pc, #24]	; (802065c <HAL_IncTick+0x20>)
 8020642:	781b      	ldrb	r3, [r3, #0]
 8020644:	461a      	mov	r2, r3
 8020646:	4b06      	ldr	r3, [pc, #24]	; (8020660 <HAL_IncTick+0x24>)
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	4413      	add	r3, r2
 802064c:	4a04      	ldr	r2, [pc, #16]	; (8020660 <HAL_IncTick+0x24>)
 802064e:	6013      	str	r3, [r2, #0]
}
 8020650:	bf00      	nop
 8020652:	46bd      	mov	sp, r7
 8020654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020658:	4770      	bx	lr
 802065a:	bf00      	nop
 802065c:	20000008 	.word	0x20000008
 8020660:	200000b0 	.word	0x200000b0

08020664 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020664:	b480      	push	{r7}
 8020666:	af00      	add	r7, sp, #0
  return uwTick;  
 8020668:	4b03      	ldr	r3, [pc, #12]	; (8020678 <HAL_GetTick+0x14>)
 802066a:	681b      	ldr	r3, [r3, #0]
}
 802066c:	4618      	mov	r0, r3
 802066e:	46bd      	mov	sp, r7
 8020670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020674:	4770      	bx	lr
 8020676:	bf00      	nop
 8020678:	200000b0 	.word	0x200000b0

0802067c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802067c:	b480      	push	{r7}
 802067e:	b085      	sub	sp, #20
 8020680:	af00      	add	r7, sp, #0
 8020682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	f003 0307 	and.w	r3, r3, #7
 802068a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802068c:	4b0c      	ldr	r3, [pc, #48]	; (80206c0 <__NVIC_SetPriorityGrouping+0x44>)
 802068e:	68db      	ldr	r3, [r3, #12]
 8020690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020692:	68ba      	ldr	r2, [r7, #8]
 8020694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020698:	4013      	ands	r3, r2
 802069a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802069c:	68fb      	ldr	r3, [r7, #12]
 802069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80206a0:	68bb      	ldr	r3, [r7, #8]
 80206a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80206a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80206a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80206ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80206ae:	4a04      	ldr	r2, [pc, #16]	; (80206c0 <__NVIC_SetPriorityGrouping+0x44>)
 80206b0:	68bb      	ldr	r3, [r7, #8]
 80206b2:	60d3      	str	r3, [r2, #12]
}
 80206b4:	bf00      	nop
 80206b6:	3714      	adds	r7, #20
 80206b8:	46bd      	mov	sp, r7
 80206ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206be:	4770      	bx	lr
 80206c0:	e000ed00 	.word	0xe000ed00

080206c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80206c4:	b480      	push	{r7}
 80206c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80206c8:	4b04      	ldr	r3, [pc, #16]	; (80206dc <__NVIC_GetPriorityGrouping+0x18>)
 80206ca:	68db      	ldr	r3, [r3, #12]
 80206cc:	0a1b      	lsrs	r3, r3, #8
 80206ce:	f003 0307 	and.w	r3, r3, #7
}
 80206d2:	4618      	mov	r0, r3
 80206d4:	46bd      	mov	sp, r7
 80206d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206da:	4770      	bx	lr
 80206dc:	e000ed00 	.word	0xe000ed00

080206e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80206e0:	b480      	push	{r7}
 80206e2:	b083      	sub	sp, #12
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	4603      	mov	r3, r0
 80206e8:	6039      	str	r1, [r7, #0]
 80206ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80206ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80206f0:	2b00      	cmp	r3, #0
 80206f2:	db0a      	blt.n	802070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80206f4:	683b      	ldr	r3, [r7, #0]
 80206f6:	b2da      	uxtb	r2, r3
 80206f8:	490c      	ldr	r1, [pc, #48]	; (802072c <__NVIC_SetPriority+0x4c>)
 80206fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80206fe:	0112      	lsls	r2, r2, #4
 8020700:	b2d2      	uxtb	r2, r2
 8020702:	440b      	add	r3, r1
 8020704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020708:	e00a      	b.n	8020720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802070a:	683b      	ldr	r3, [r7, #0]
 802070c:	b2da      	uxtb	r2, r3
 802070e:	4908      	ldr	r1, [pc, #32]	; (8020730 <__NVIC_SetPriority+0x50>)
 8020710:	79fb      	ldrb	r3, [r7, #7]
 8020712:	f003 030f 	and.w	r3, r3, #15
 8020716:	3b04      	subs	r3, #4
 8020718:	0112      	lsls	r2, r2, #4
 802071a:	b2d2      	uxtb	r2, r2
 802071c:	440b      	add	r3, r1
 802071e:	761a      	strb	r2, [r3, #24]
}
 8020720:	bf00      	nop
 8020722:	370c      	adds	r7, #12
 8020724:	46bd      	mov	sp, r7
 8020726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802072a:	4770      	bx	lr
 802072c:	e000e100 	.word	0xe000e100
 8020730:	e000ed00 	.word	0xe000ed00

08020734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020734:	b480      	push	{r7}
 8020736:	b089      	sub	sp, #36	; 0x24
 8020738:	af00      	add	r7, sp, #0
 802073a:	60f8      	str	r0, [r7, #12]
 802073c:	60b9      	str	r1, [r7, #8]
 802073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020740:	68fb      	ldr	r3, [r7, #12]
 8020742:	f003 0307 	and.w	r3, r3, #7
 8020746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020748:	69fb      	ldr	r3, [r7, #28]
 802074a:	f1c3 0307 	rsb	r3, r3, #7
 802074e:	2b04      	cmp	r3, #4
 8020750:	bf28      	it	cs
 8020752:	2304      	movcs	r3, #4
 8020754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020756:	69fb      	ldr	r3, [r7, #28]
 8020758:	3304      	adds	r3, #4
 802075a:	2b06      	cmp	r3, #6
 802075c:	d902      	bls.n	8020764 <NVIC_EncodePriority+0x30>
 802075e:	69fb      	ldr	r3, [r7, #28]
 8020760:	3b03      	subs	r3, #3
 8020762:	e000      	b.n	8020766 <NVIC_EncodePriority+0x32>
 8020764:	2300      	movs	r3, #0
 8020766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020768:	f04f 32ff 	mov.w	r2, #4294967295
 802076c:	69bb      	ldr	r3, [r7, #24]
 802076e:	fa02 f303 	lsl.w	r3, r2, r3
 8020772:	43da      	mvns	r2, r3
 8020774:	68bb      	ldr	r3, [r7, #8]
 8020776:	401a      	ands	r2, r3
 8020778:	697b      	ldr	r3, [r7, #20]
 802077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802077c:	f04f 31ff 	mov.w	r1, #4294967295
 8020780:	697b      	ldr	r3, [r7, #20]
 8020782:	fa01 f303 	lsl.w	r3, r1, r3
 8020786:	43d9      	mvns	r1, r3
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802078c:	4313      	orrs	r3, r2
         );
}
 802078e:	4618      	mov	r0, r3
 8020790:	3724      	adds	r7, #36	; 0x24
 8020792:	46bd      	mov	sp, r7
 8020794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020798:	4770      	bx	lr
	...

0802079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 802079c:	b580      	push	{r7, lr}
 802079e:	b082      	sub	sp, #8
 80207a0:	af00      	add	r7, sp, #0
 80207a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80207a4:	687b      	ldr	r3, [r7, #4]
 80207a6:	3b01      	subs	r3, #1
 80207a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80207ac:	d301      	bcc.n	80207b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80207ae:	2301      	movs	r3, #1
 80207b0:	e00f      	b.n	80207d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80207b2:	4a0a      	ldr	r2, [pc, #40]	; (80207dc <SysTick_Config+0x40>)
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	3b01      	subs	r3, #1
 80207b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80207ba:	210f      	movs	r1, #15
 80207bc:	f04f 30ff 	mov.w	r0, #4294967295
 80207c0:	f7ff ff8e 	bl	80206e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80207c4:	4b05      	ldr	r3, [pc, #20]	; (80207dc <SysTick_Config+0x40>)
 80207c6:	2200      	movs	r2, #0
 80207c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80207ca:	4b04      	ldr	r3, [pc, #16]	; (80207dc <SysTick_Config+0x40>)
 80207cc:	2207      	movs	r2, #7
 80207ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80207d0:	2300      	movs	r3, #0
}
 80207d2:	4618      	mov	r0, r3
 80207d4:	3708      	adds	r7, #8
 80207d6:	46bd      	mov	sp, r7
 80207d8:	bd80      	pop	{r7, pc}
 80207da:	bf00      	nop
 80207dc:	e000e010 	.word	0xe000e010

080207e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	b082      	sub	sp, #8
 80207e4:	af00      	add	r7, sp, #0
 80207e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80207e8:	6878      	ldr	r0, [r7, #4]
 80207ea:	f7ff ff47 	bl	802067c <__NVIC_SetPriorityGrouping>
}
 80207ee:	bf00      	nop
 80207f0:	3708      	adds	r7, #8
 80207f2:	46bd      	mov	sp, r7
 80207f4:	bd80      	pop	{r7, pc}

080207f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80207f6:	b580      	push	{r7, lr}
 80207f8:	b086      	sub	sp, #24
 80207fa:	af00      	add	r7, sp, #0
 80207fc:	4603      	mov	r3, r0
 80207fe:	60b9      	str	r1, [r7, #8]
 8020800:	607a      	str	r2, [r7, #4]
 8020802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020804:	2300      	movs	r3, #0
 8020806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020808:	f7ff ff5c 	bl	80206c4 <__NVIC_GetPriorityGrouping>
 802080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802080e:	687a      	ldr	r2, [r7, #4]
 8020810:	68b9      	ldr	r1, [r7, #8]
 8020812:	6978      	ldr	r0, [r7, #20]
 8020814:	f7ff ff8e 	bl	8020734 <NVIC_EncodePriority>
 8020818:	4602      	mov	r2, r0
 802081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802081e:	4611      	mov	r1, r2
 8020820:	4618      	mov	r0, r3
 8020822:	f7ff ff5d 	bl	80206e0 <__NVIC_SetPriority>
}
 8020826:	bf00      	nop
 8020828:	3718      	adds	r7, #24
 802082a:	46bd      	mov	sp, r7
 802082c:	bd80      	pop	{r7, pc}

0802082e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802082e:	b580      	push	{r7, lr}
 8020830:	b082      	sub	sp, #8
 8020832:	af00      	add	r7, sp, #0
 8020834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020836:	6878      	ldr	r0, [r7, #4]
 8020838:	f7ff ffb0 	bl	802079c <SysTick_Config>
 802083c:	4603      	mov	r3, r0
}
 802083e:	4618      	mov	r0, r3
 8020840:	3708      	adds	r7, #8
 8020842:	46bd      	mov	sp, r7
 8020844:	bd80      	pop	{r7, pc}
	...

08020848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020848:	b480      	push	{r7}
 802084a:	b087      	sub	sp, #28
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
 8020850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8020852:	2300      	movs	r3, #0
 8020854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020856:	e154      	b.n	8020b02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8020858:	683b      	ldr	r3, [r7, #0]
 802085a:	681a      	ldr	r2, [r3, #0]
 802085c:	2101      	movs	r1, #1
 802085e:	697b      	ldr	r3, [r7, #20]
 8020860:	fa01 f303 	lsl.w	r3, r1, r3
 8020864:	4013      	ands	r3, r2
 8020866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	2b00      	cmp	r3, #0
 802086c:	f000 8146 	beq.w	8020afc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8020870:	683b      	ldr	r3, [r7, #0]
 8020872:	685b      	ldr	r3, [r3, #4]
 8020874:	2b01      	cmp	r3, #1
 8020876:	d00b      	beq.n	8020890 <HAL_GPIO_Init+0x48>
 8020878:	683b      	ldr	r3, [r7, #0]
 802087a:	685b      	ldr	r3, [r3, #4]
 802087c:	2b02      	cmp	r3, #2
 802087e:	d007      	beq.n	8020890 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020880:	683b      	ldr	r3, [r7, #0]
 8020882:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8020884:	2b11      	cmp	r3, #17
 8020886:	d003      	beq.n	8020890 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020888:	683b      	ldr	r3, [r7, #0]
 802088a:	685b      	ldr	r3, [r3, #4]
 802088c:	2b12      	cmp	r3, #18
 802088e:	d130      	bne.n	80208f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	689b      	ldr	r3, [r3, #8]
 8020894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8020896:	697b      	ldr	r3, [r7, #20]
 8020898:	005b      	lsls	r3, r3, #1
 802089a:	2203      	movs	r2, #3
 802089c:	fa02 f303 	lsl.w	r3, r2, r3
 80208a0:	43db      	mvns	r3, r3
 80208a2:	693a      	ldr	r2, [r7, #16]
 80208a4:	4013      	ands	r3, r2
 80208a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80208a8:	683b      	ldr	r3, [r7, #0]
 80208aa:	68da      	ldr	r2, [r3, #12]
 80208ac:	697b      	ldr	r3, [r7, #20]
 80208ae:	005b      	lsls	r3, r3, #1
 80208b0:	fa02 f303 	lsl.w	r3, r2, r3
 80208b4:	693a      	ldr	r2, [r7, #16]
 80208b6:	4313      	orrs	r3, r2
 80208b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	693a      	ldr	r2, [r7, #16]
 80208be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	685b      	ldr	r3, [r3, #4]
 80208c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80208c6:	2201      	movs	r2, #1
 80208c8:	697b      	ldr	r3, [r7, #20]
 80208ca:	fa02 f303 	lsl.w	r3, r2, r3
 80208ce:	43db      	mvns	r3, r3
 80208d0:	693a      	ldr	r2, [r7, #16]
 80208d2:	4013      	ands	r3, r2
 80208d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80208d6:	683b      	ldr	r3, [r7, #0]
 80208d8:	685b      	ldr	r3, [r3, #4]
 80208da:	091b      	lsrs	r3, r3, #4
 80208dc:	f003 0201 	and.w	r2, r3, #1
 80208e0:	697b      	ldr	r3, [r7, #20]
 80208e2:	fa02 f303 	lsl.w	r3, r2, r3
 80208e6:	693a      	ldr	r2, [r7, #16]
 80208e8:	4313      	orrs	r3, r2
 80208ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	693a      	ldr	r2, [r7, #16]
 80208f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	68db      	ldr	r3, [r3, #12]
 80208f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80208f8:	697b      	ldr	r3, [r7, #20]
 80208fa:	005b      	lsls	r3, r3, #1
 80208fc:	2203      	movs	r2, #3
 80208fe:	fa02 f303 	lsl.w	r3, r2, r3
 8020902:	43db      	mvns	r3, r3
 8020904:	693a      	ldr	r2, [r7, #16]
 8020906:	4013      	ands	r3, r2
 8020908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 802090a:	683b      	ldr	r3, [r7, #0]
 802090c:	689a      	ldr	r2, [r3, #8]
 802090e:	697b      	ldr	r3, [r7, #20]
 8020910:	005b      	lsls	r3, r3, #1
 8020912:	fa02 f303 	lsl.w	r3, r2, r3
 8020916:	693a      	ldr	r2, [r7, #16]
 8020918:	4313      	orrs	r3, r2
 802091a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 802091c:	687b      	ldr	r3, [r7, #4]
 802091e:	693a      	ldr	r2, [r7, #16]
 8020920:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8020922:	683b      	ldr	r3, [r7, #0]
 8020924:	685b      	ldr	r3, [r3, #4]
 8020926:	2b02      	cmp	r3, #2
 8020928:	d003      	beq.n	8020932 <HAL_GPIO_Init+0xea>
 802092a:	683b      	ldr	r3, [r7, #0]
 802092c:	685b      	ldr	r3, [r3, #4]
 802092e:	2b12      	cmp	r3, #18
 8020930:	d123      	bne.n	802097a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8020932:	697b      	ldr	r3, [r7, #20]
 8020934:	08da      	lsrs	r2, r3, #3
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	3208      	adds	r2, #8
 802093a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802093e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8020940:	697b      	ldr	r3, [r7, #20]
 8020942:	f003 0307 	and.w	r3, r3, #7
 8020946:	009b      	lsls	r3, r3, #2
 8020948:	220f      	movs	r2, #15
 802094a:	fa02 f303 	lsl.w	r3, r2, r3
 802094e:	43db      	mvns	r3, r3
 8020950:	693a      	ldr	r2, [r7, #16]
 8020952:	4013      	ands	r3, r2
 8020954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	691a      	ldr	r2, [r3, #16]
 802095a:	697b      	ldr	r3, [r7, #20]
 802095c:	f003 0307 	and.w	r3, r3, #7
 8020960:	009b      	lsls	r3, r3, #2
 8020962:	fa02 f303 	lsl.w	r3, r2, r3
 8020966:	693a      	ldr	r2, [r7, #16]
 8020968:	4313      	orrs	r3, r2
 802096a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 802096c:	697b      	ldr	r3, [r7, #20]
 802096e:	08da      	lsrs	r2, r3, #3
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	3208      	adds	r2, #8
 8020974:	6939      	ldr	r1, [r7, #16]
 8020976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	681b      	ldr	r3, [r3, #0]
 802097e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8020980:	697b      	ldr	r3, [r7, #20]
 8020982:	005b      	lsls	r3, r3, #1
 8020984:	2203      	movs	r2, #3
 8020986:	fa02 f303 	lsl.w	r3, r2, r3
 802098a:	43db      	mvns	r3, r3
 802098c:	693a      	ldr	r2, [r7, #16]
 802098e:	4013      	ands	r3, r2
 8020990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8020992:	683b      	ldr	r3, [r7, #0]
 8020994:	685b      	ldr	r3, [r3, #4]
 8020996:	f003 0203 	and.w	r2, r3, #3
 802099a:	697b      	ldr	r3, [r7, #20]
 802099c:	005b      	lsls	r3, r3, #1
 802099e:	fa02 f303 	lsl.w	r3, r2, r3
 80209a2:	693a      	ldr	r2, [r7, #16]
 80209a4:	4313      	orrs	r3, r2
 80209a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	693a      	ldr	r2, [r7, #16]
 80209ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80209ae:	683b      	ldr	r3, [r7, #0]
 80209b0:	685b      	ldr	r3, [r3, #4]
 80209b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80209b6:	2b00      	cmp	r3, #0
 80209b8:	f000 80a0 	beq.w	8020afc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80209bc:	4b58      	ldr	r3, [pc, #352]	; (8020b20 <HAL_GPIO_Init+0x2d8>)
 80209be:	699b      	ldr	r3, [r3, #24]
 80209c0:	4a57      	ldr	r2, [pc, #348]	; (8020b20 <HAL_GPIO_Init+0x2d8>)
 80209c2:	f043 0301 	orr.w	r3, r3, #1
 80209c6:	6193      	str	r3, [r2, #24]
 80209c8:	4b55      	ldr	r3, [pc, #340]	; (8020b20 <HAL_GPIO_Init+0x2d8>)
 80209ca:	699b      	ldr	r3, [r3, #24]
 80209cc:	f003 0301 	and.w	r3, r3, #1
 80209d0:	60bb      	str	r3, [r7, #8]
 80209d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80209d4:	4a53      	ldr	r2, [pc, #332]	; (8020b24 <HAL_GPIO_Init+0x2dc>)
 80209d6:	697b      	ldr	r3, [r7, #20]
 80209d8:	089b      	lsrs	r3, r3, #2
 80209da:	3302      	adds	r3, #2
 80209dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80209e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	f003 0303 	and.w	r3, r3, #3
 80209e8:	009b      	lsls	r3, r3, #2
 80209ea:	220f      	movs	r2, #15
 80209ec:	fa02 f303 	lsl.w	r3, r2, r3
 80209f0:	43db      	mvns	r3, r3
 80209f2:	693a      	ldr	r2, [r7, #16]
 80209f4:	4013      	ands	r3, r2
 80209f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80209fe:	d019      	beq.n	8020a34 <HAL_GPIO_Init+0x1ec>
 8020a00:	687b      	ldr	r3, [r7, #4]
 8020a02:	4a49      	ldr	r2, [pc, #292]	; (8020b28 <HAL_GPIO_Init+0x2e0>)
 8020a04:	4293      	cmp	r3, r2
 8020a06:	d013      	beq.n	8020a30 <HAL_GPIO_Init+0x1e8>
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	4a48      	ldr	r2, [pc, #288]	; (8020b2c <HAL_GPIO_Init+0x2e4>)
 8020a0c:	4293      	cmp	r3, r2
 8020a0e:	d00d      	beq.n	8020a2c <HAL_GPIO_Init+0x1e4>
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	4a47      	ldr	r2, [pc, #284]	; (8020b30 <HAL_GPIO_Init+0x2e8>)
 8020a14:	4293      	cmp	r3, r2
 8020a16:	d007      	beq.n	8020a28 <HAL_GPIO_Init+0x1e0>
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	4a46      	ldr	r2, [pc, #280]	; (8020b34 <HAL_GPIO_Init+0x2ec>)
 8020a1c:	4293      	cmp	r3, r2
 8020a1e:	d101      	bne.n	8020a24 <HAL_GPIO_Init+0x1dc>
 8020a20:	2304      	movs	r3, #4
 8020a22:	e008      	b.n	8020a36 <HAL_GPIO_Init+0x1ee>
 8020a24:	2305      	movs	r3, #5
 8020a26:	e006      	b.n	8020a36 <HAL_GPIO_Init+0x1ee>
 8020a28:	2303      	movs	r3, #3
 8020a2a:	e004      	b.n	8020a36 <HAL_GPIO_Init+0x1ee>
 8020a2c:	2302      	movs	r3, #2
 8020a2e:	e002      	b.n	8020a36 <HAL_GPIO_Init+0x1ee>
 8020a30:	2301      	movs	r3, #1
 8020a32:	e000      	b.n	8020a36 <HAL_GPIO_Init+0x1ee>
 8020a34:	2300      	movs	r3, #0
 8020a36:	697a      	ldr	r2, [r7, #20]
 8020a38:	f002 0203 	and.w	r2, r2, #3
 8020a3c:	0092      	lsls	r2, r2, #2
 8020a3e:	4093      	lsls	r3, r2
 8020a40:	693a      	ldr	r2, [r7, #16]
 8020a42:	4313      	orrs	r3, r2
 8020a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8020a46:	4937      	ldr	r1, [pc, #220]	; (8020b24 <HAL_GPIO_Init+0x2dc>)
 8020a48:	697b      	ldr	r3, [r7, #20]
 8020a4a:	089b      	lsrs	r3, r3, #2
 8020a4c:	3302      	adds	r3, #2
 8020a4e:	693a      	ldr	r2, [r7, #16]
 8020a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020a54:	4b38      	ldr	r3, [pc, #224]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020a56:	681b      	ldr	r3, [r3, #0]
 8020a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020a5a:	68fb      	ldr	r3, [r7, #12]
 8020a5c:	43db      	mvns	r3, r3
 8020a5e:	693a      	ldr	r2, [r7, #16]
 8020a60:	4013      	ands	r3, r2
 8020a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8020a64:	683b      	ldr	r3, [r7, #0]
 8020a66:	685b      	ldr	r3, [r3, #4]
 8020a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d003      	beq.n	8020a78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8020a70:	693a      	ldr	r2, [r7, #16]
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	4313      	orrs	r3, r2
 8020a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8020a78:	4a2f      	ldr	r2, [pc, #188]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020a7a:	693b      	ldr	r3, [r7, #16]
 8020a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8020a7e:	4b2e      	ldr	r3, [pc, #184]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020a80:	685b      	ldr	r3, [r3, #4]
 8020a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	43db      	mvns	r3, r3
 8020a88:	693a      	ldr	r2, [r7, #16]
 8020a8a:	4013      	ands	r3, r2
 8020a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8020a8e:	683b      	ldr	r3, [r7, #0]
 8020a90:	685b      	ldr	r3, [r3, #4]
 8020a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d003      	beq.n	8020aa2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8020a9a:	693a      	ldr	r2, [r7, #16]
 8020a9c:	68fb      	ldr	r3, [r7, #12]
 8020a9e:	4313      	orrs	r3, r2
 8020aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8020aa2:	4a25      	ldr	r2, [pc, #148]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020aa4:	693b      	ldr	r3, [r7, #16]
 8020aa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020aa8:	4b23      	ldr	r3, [pc, #140]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020aaa:	689b      	ldr	r3, [r3, #8]
 8020aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020aae:	68fb      	ldr	r3, [r7, #12]
 8020ab0:	43db      	mvns	r3, r3
 8020ab2:	693a      	ldr	r2, [r7, #16]
 8020ab4:	4013      	ands	r3, r2
 8020ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8020ab8:	683b      	ldr	r3, [r7, #0]
 8020aba:	685b      	ldr	r3, [r3, #4]
 8020abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d003      	beq.n	8020acc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8020ac4:	693a      	ldr	r2, [r7, #16]
 8020ac6:	68fb      	ldr	r3, [r7, #12]
 8020ac8:	4313      	orrs	r3, r2
 8020aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8020acc:	4a1a      	ldr	r2, [pc, #104]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020ace:	693b      	ldr	r3, [r7, #16]
 8020ad0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020ad2:	4b19      	ldr	r3, [pc, #100]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020ad4:	68db      	ldr	r3, [r3, #12]
 8020ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020ad8:	68fb      	ldr	r3, [r7, #12]
 8020ada:	43db      	mvns	r3, r3
 8020adc:	693a      	ldr	r2, [r7, #16]
 8020ade:	4013      	ands	r3, r2
 8020ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8020ae2:	683b      	ldr	r3, [r7, #0]
 8020ae4:	685b      	ldr	r3, [r3, #4]
 8020ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	d003      	beq.n	8020af6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8020aee:	693a      	ldr	r2, [r7, #16]
 8020af0:	68fb      	ldr	r3, [r7, #12]
 8020af2:	4313      	orrs	r3, r2
 8020af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8020af6:	4a10      	ldr	r2, [pc, #64]	; (8020b38 <HAL_GPIO_Init+0x2f0>)
 8020af8:	693b      	ldr	r3, [r7, #16]
 8020afa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8020afc:	697b      	ldr	r3, [r7, #20]
 8020afe:	3301      	adds	r3, #1
 8020b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020b02:	683b      	ldr	r3, [r7, #0]
 8020b04:	681a      	ldr	r2, [r3, #0]
 8020b06:	697b      	ldr	r3, [r7, #20]
 8020b08:	fa22 f303 	lsr.w	r3, r2, r3
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	f47f aea3 	bne.w	8020858 <HAL_GPIO_Init+0x10>
  }
}
 8020b12:	bf00      	nop
 8020b14:	371c      	adds	r7, #28
 8020b16:	46bd      	mov	sp, r7
 8020b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b1c:	4770      	bx	lr
 8020b1e:	bf00      	nop
 8020b20:	40021000 	.word	0x40021000
 8020b24:	40010000 	.word	0x40010000
 8020b28:	48000400 	.word	0x48000400
 8020b2c:	48000800 	.word	0x48000800
 8020b30:	48000c00 	.word	0x48000c00
 8020b34:	48001000 	.word	0x48001000
 8020b38:	40010400 	.word	0x40010400

08020b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020b3c:	b480      	push	{r7}
 8020b3e:	b083      	sub	sp, #12
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	6078      	str	r0, [r7, #4]
 8020b44:	460b      	mov	r3, r1
 8020b46:	807b      	strh	r3, [r7, #2]
 8020b48:	4613      	mov	r3, r2
 8020b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020b4c:	787b      	ldrb	r3, [r7, #1]
 8020b4e:	2b00      	cmp	r3, #0
 8020b50:	d003      	beq.n	8020b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8020b52:	887a      	ldrh	r2, [r7, #2]
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8020b58:	e002      	b.n	8020b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8020b5a:	887a      	ldrh	r2, [r7, #2]
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8020b60:	bf00      	nop
 8020b62:	370c      	adds	r7, #12
 8020b64:	46bd      	mov	sp, r7
 8020b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b6a:	4770      	bx	lr

08020b6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8020b6c:	b480      	push	{r7}
 8020b6e:	b085      	sub	sp, #20
 8020b70:	af00      	add	r7, sp, #0
 8020b72:	6078      	str	r0, [r7, #4]
 8020b74:	460b      	mov	r3, r1
 8020b76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	695b      	ldr	r3, [r3, #20]
 8020b7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8020b7e:	887a      	ldrh	r2, [r7, #2]
 8020b80:	68fb      	ldr	r3, [r7, #12]
 8020b82:	4013      	ands	r3, r2
 8020b84:	041a      	lsls	r2, r3, #16
 8020b86:	68fb      	ldr	r3, [r7, #12]
 8020b88:	43d9      	mvns	r1, r3
 8020b8a:	887b      	ldrh	r3, [r7, #2]
 8020b8c:	400b      	ands	r3, r1
 8020b8e:	431a      	orrs	r2, r3
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	619a      	str	r2, [r3, #24]
}
 8020b94:	bf00      	nop
 8020b96:	3714      	adds	r7, #20
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9e:	4770      	bx	lr

08020ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020ba0:	b580      	push	{r7, lr}
 8020ba2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8020ba6:	af00      	add	r7, sp, #0
 8020ba8:	1d3b      	adds	r3, r7, #4
 8020baa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020bac:	1d3b      	adds	r3, r7, #4
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d102      	bne.n	8020bba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8020bb4:	2301      	movs	r3, #1
 8020bb6:	f000 bef4 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020bba:	1d3b      	adds	r3, r7, #4
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	f003 0301 	and.w	r3, r3, #1
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	f000 816a 	beq.w	8020e9e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8020bca:	4bb3      	ldr	r3, [pc, #716]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020bcc:	685b      	ldr	r3, [r3, #4]
 8020bce:	f003 030c 	and.w	r3, r3, #12
 8020bd2:	2b04      	cmp	r3, #4
 8020bd4:	d00c      	beq.n	8020bf0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8020bd6:	4bb0      	ldr	r3, [pc, #704]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020bd8:	685b      	ldr	r3, [r3, #4]
 8020bda:	f003 030c 	and.w	r3, r3, #12
 8020bde:	2b08      	cmp	r3, #8
 8020be0:	d159      	bne.n	8020c96 <HAL_RCC_OscConfig+0xf6>
 8020be2:	4bad      	ldr	r3, [pc, #692]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020be4:	685b      	ldr	r3, [r3, #4]
 8020be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020bee:	d152      	bne.n	8020c96 <HAL_RCC_OscConfig+0xf6>
 8020bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020bf4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020bf8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020bfc:	fa93 f3a3 	rbit	r3, r3
 8020c00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8020c04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020c08:	fab3 f383 	clz	r3, r3
 8020c0c:	b2db      	uxtb	r3, r3
 8020c0e:	095b      	lsrs	r3, r3, #5
 8020c10:	b2db      	uxtb	r3, r3
 8020c12:	f043 0301 	orr.w	r3, r3, #1
 8020c16:	b2db      	uxtb	r3, r3
 8020c18:	2b01      	cmp	r3, #1
 8020c1a:	d102      	bne.n	8020c22 <HAL_RCC_OscConfig+0x82>
 8020c1c:	4b9e      	ldr	r3, [pc, #632]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020c1e:	681b      	ldr	r3, [r3, #0]
 8020c20:	e015      	b.n	8020c4e <HAL_RCC_OscConfig+0xae>
 8020c22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020c26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020c2a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8020c2e:	fa93 f3a3 	rbit	r3, r3
 8020c32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020c3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8020c3e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8020c42:	fa93 f3a3 	rbit	r3, r3
 8020c46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8020c4a:	4b93      	ldr	r3, [pc, #588]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020c52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8020c56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8020c5a:	fa92 f2a2 	rbit	r2, r2
 8020c5e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8020c62:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8020c66:	fab2 f282 	clz	r2, r2
 8020c6a:	b2d2      	uxtb	r2, r2
 8020c6c:	f042 0220 	orr.w	r2, r2, #32
 8020c70:	b2d2      	uxtb	r2, r2
 8020c72:	f002 021f 	and.w	r2, r2, #31
 8020c76:	2101      	movs	r1, #1
 8020c78:	fa01 f202 	lsl.w	r2, r1, r2
 8020c7c:	4013      	ands	r3, r2
 8020c7e:	2b00      	cmp	r3, #0
 8020c80:	f000 810c 	beq.w	8020e9c <HAL_RCC_OscConfig+0x2fc>
 8020c84:	1d3b      	adds	r3, r7, #4
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	685b      	ldr	r3, [r3, #4]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	f040 8106 	bne.w	8020e9c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8020c90:	2301      	movs	r3, #1
 8020c92:	f000 be86 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020c96:	1d3b      	adds	r3, r7, #4
 8020c98:	681b      	ldr	r3, [r3, #0]
 8020c9a:	685b      	ldr	r3, [r3, #4]
 8020c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020ca0:	d106      	bne.n	8020cb0 <HAL_RCC_OscConfig+0x110>
 8020ca2:	4b7d      	ldr	r3, [pc, #500]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	4a7c      	ldr	r2, [pc, #496]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020cac:	6013      	str	r3, [r2, #0]
 8020cae:	e030      	b.n	8020d12 <HAL_RCC_OscConfig+0x172>
 8020cb0:	1d3b      	adds	r3, r7, #4
 8020cb2:	681b      	ldr	r3, [r3, #0]
 8020cb4:	685b      	ldr	r3, [r3, #4]
 8020cb6:	2b00      	cmp	r3, #0
 8020cb8:	d10c      	bne.n	8020cd4 <HAL_RCC_OscConfig+0x134>
 8020cba:	4b77      	ldr	r3, [pc, #476]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cbc:	681b      	ldr	r3, [r3, #0]
 8020cbe:	4a76      	ldr	r2, [pc, #472]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020cc4:	6013      	str	r3, [r2, #0]
 8020cc6:	4b74      	ldr	r3, [pc, #464]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cc8:	681b      	ldr	r3, [r3, #0]
 8020cca:	4a73      	ldr	r2, [pc, #460]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020cd0:	6013      	str	r3, [r2, #0]
 8020cd2:	e01e      	b.n	8020d12 <HAL_RCC_OscConfig+0x172>
 8020cd4:	1d3b      	adds	r3, r7, #4
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	685b      	ldr	r3, [r3, #4]
 8020cda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8020cde:	d10c      	bne.n	8020cfa <HAL_RCC_OscConfig+0x15a>
 8020ce0:	4b6d      	ldr	r3, [pc, #436]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020ce2:	681b      	ldr	r3, [r3, #0]
 8020ce4:	4a6c      	ldr	r2, [pc, #432]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020ce6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020cea:	6013      	str	r3, [r2, #0]
 8020cec:	4b6a      	ldr	r3, [pc, #424]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cee:	681b      	ldr	r3, [r3, #0]
 8020cf0:	4a69      	ldr	r2, [pc, #420]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020cf6:	6013      	str	r3, [r2, #0]
 8020cf8:	e00b      	b.n	8020d12 <HAL_RCC_OscConfig+0x172>
 8020cfa:	4b67      	ldr	r3, [pc, #412]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020cfc:	681b      	ldr	r3, [r3, #0]
 8020cfe:	4a66      	ldr	r2, [pc, #408]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020d04:	6013      	str	r3, [r2, #0]
 8020d06:	4b64      	ldr	r3, [pc, #400]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d08:	681b      	ldr	r3, [r3, #0]
 8020d0a:	4a63      	ldr	r2, [pc, #396]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020d10:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8020d12:	4b61      	ldr	r3, [pc, #388]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d16:	f023 020f 	bic.w	r2, r3, #15
 8020d1a:	1d3b      	adds	r3, r7, #4
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	689b      	ldr	r3, [r3, #8]
 8020d20:	495d      	ldr	r1, [pc, #372]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d22:	4313      	orrs	r3, r2
 8020d24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8020d26:	1d3b      	adds	r3, r7, #4
 8020d28:	681b      	ldr	r3, [r3, #0]
 8020d2a:	685b      	ldr	r3, [r3, #4]
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d059      	beq.n	8020de4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020d30:	f7ff fc98 	bl	8020664 <HAL_GetTick>
 8020d34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020d38:	e00a      	b.n	8020d50 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020d3a:	f7ff fc93 	bl	8020664 <HAL_GetTick>
 8020d3e:	4602      	mov	r2, r0
 8020d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020d44:	1ad3      	subs	r3, r2, r3
 8020d46:	2b64      	cmp	r3, #100	; 0x64
 8020d48:	d902      	bls.n	8020d50 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8020d4a:	2303      	movs	r3, #3
 8020d4c:	f000 be29 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
 8020d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020d54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020d58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8020d5c:	fa93 f3a3 	rbit	r3, r3
 8020d60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8020d64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020d68:	fab3 f383 	clz	r3, r3
 8020d6c:	b2db      	uxtb	r3, r3
 8020d6e:	095b      	lsrs	r3, r3, #5
 8020d70:	b2db      	uxtb	r3, r3
 8020d72:	f043 0301 	orr.w	r3, r3, #1
 8020d76:	b2db      	uxtb	r3, r3
 8020d78:	2b01      	cmp	r3, #1
 8020d7a:	d102      	bne.n	8020d82 <HAL_RCC_OscConfig+0x1e2>
 8020d7c:	4b46      	ldr	r3, [pc, #280]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020d7e:	681b      	ldr	r3, [r3, #0]
 8020d80:	e015      	b.n	8020dae <HAL_RCC_OscConfig+0x20e>
 8020d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020d86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020d8a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020d8e:	fa93 f3a3 	rbit	r3, r3
 8020d92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8020d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020d9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8020d9e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8020da2:	fa93 f3a3 	rbit	r3, r3
 8020da6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8020daa:	4b3b      	ldr	r3, [pc, #236]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020db2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8020db6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8020dba:	fa92 f2a2 	rbit	r2, r2
 8020dbe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8020dc2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8020dc6:	fab2 f282 	clz	r2, r2
 8020dca:	b2d2      	uxtb	r2, r2
 8020dcc:	f042 0220 	orr.w	r2, r2, #32
 8020dd0:	b2d2      	uxtb	r2, r2
 8020dd2:	f002 021f 	and.w	r2, r2, #31
 8020dd6:	2101      	movs	r1, #1
 8020dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8020ddc:	4013      	ands	r3, r2
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	d0ab      	beq.n	8020d3a <HAL_RCC_OscConfig+0x19a>
 8020de2:	e05c      	b.n	8020e9e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020de4:	f7ff fc3e 	bl	8020664 <HAL_GetTick>
 8020de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020dec:	e00a      	b.n	8020e04 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020dee:	f7ff fc39 	bl	8020664 <HAL_GetTick>
 8020df2:	4602      	mov	r2, r0
 8020df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020df8:	1ad3      	subs	r3, r2, r3
 8020dfa:	2b64      	cmp	r3, #100	; 0x64
 8020dfc:	d902      	bls.n	8020e04 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8020dfe:	2303      	movs	r3, #3
 8020e00:	f000 bdcf 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
 8020e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020e08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020e0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8020e10:	fa93 f3a3 	rbit	r3, r3
 8020e14:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8020e18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020e1c:	fab3 f383 	clz	r3, r3
 8020e20:	b2db      	uxtb	r3, r3
 8020e22:	095b      	lsrs	r3, r3, #5
 8020e24:	b2db      	uxtb	r3, r3
 8020e26:	f043 0301 	orr.w	r3, r3, #1
 8020e2a:	b2db      	uxtb	r3, r3
 8020e2c:	2b01      	cmp	r3, #1
 8020e2e:	d102      	bne.n	8020e36 <HAL_RCC_OscConfig+0x296>
 8020e30:	4b19      	ldr	r3, [pc, #100]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	e015      	b.n	8020e62 <HAL_RCC_OscConfig+0x2c2>
 8020e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020e3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020e3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8020e42:	fa93 f3a3 	rbit	r3, r3
 8020e46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8020e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020e4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8020e52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8020e56:	fa93 f3a3 	rbit	r3, r3
 8020e5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8020e5e:	4b0e      	ldr	r3, [pc, #56]	; (8020e98 <HAL_RCC_OscConfig+0x2f8>)
 8020e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020e66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8020e6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8020e6e:	fa92 f2a2 	rbit	r2, r2
 8020e72:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8020e76:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8020e7a:	fab2 f282 	clz	r2, r2
 8020e7e:	b2d2      	uxtb	r2, r2
 8020e80:	f042 0220 	orr.w	r2, r2, #32
 8020e84:	b2d2      	uxtb	r2, r2
 8020e86:	f002 021f 	and.w	r2, r2, #31
 8020e8a:	2101      	movs	r1, #1
 8020e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8020e90:	4013      	ands	r3, r2
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d1ab      	bne.n	8020dee <HAL_RCC_OscConfig+0x24e>
 8020e96:	e002      	b.n	8020e9e <HAL_RCC_OscConfig+0x2fe>
 8020e98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020e9e:	1d3b      	adds	r3, r7, #4
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	681b      	ldr	r3, [r3, #0]
 8020ea4:	f003 0302 	and.w	r3, r3, #2
 8020ea8:	2b00      	cmp	r3, #0
 8020eaa:	f000 816f 	beq.w	802118c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8020eae:	4bd0      	ldr	r3, [pc, #832]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020eb0:	685b      	ldr	r3, [r3, #4]
 8020eb2:	f003 030c 	and.w	r3, r3, #12
 8020eb6:	2b00      	cmp	r3, #0
 8020eb8:	d00b      	beq.n	8020ed2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8020eba:	4bcd      	ldr	r3, [pc, #820]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020ebc:	685b      	ldr	r3, [r3, #4]
 8020ebe:	f003 030c 	and.w	r3, r3, #12
 8020ec2:	2b08      	cmp	r3, #8
 8020ec4:	d16c      	bne.n	8020fa0 <HAL_RCC_OscConfig+0x400>
 8020ec6:	4bca      	ldr	r3, [pc, #808]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020ec8:	685b      	ldr	r3, [r3, #4]
 8020eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d166      	bne.n	8020fa0 <HAL_RCC_OscConfig+0x400>
 8020ed2:	2302      	movs	r3, #2
 8020ed4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020ed8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8020edc:	fa93 f3a3 	rbit	r3, r3
 8020ee0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8020ee4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020ee8:	fab3 f383 	clz	r3, r3
 8020eec:	b2db      	uxtb	r3, r3
 8020eee:	095b      	lsrs	r3, r3, #5
 8020ef0:	b2db      	uxtb	r3, r3
 8020ef2:	f043 0301 	orr.w	r3, r3, #1
 8020ef6:	b2db      	uxtb	r3, r3
 8020ef8:	2b01      	cmp	r3, #1
 8020efa:	d102      	bne.n	8020f02 <HAL_RCC_OscConfig+0x362>
 8020efc:	4bbc      	ldr	r3, [pc, #752]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	e013      	b.n	8020f2a <HAL_RCC_OscConfig+0x38a>
 8020f02:	2302      	movs	r3, #2
 8020f04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020f08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8020f0c:	fa93 f3a3 	rbit	r3, r3
 8020f10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8020f14:	2302      	movs	r3, #2
 8020f16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8020f1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020f1e:	fa93 f3a3 	rbit	r3, r3
 8020f22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8020f26:	4bb2      	ldr	r3, [pc, #712]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f2a:	2202      	movs	r2, #2
 8020f2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8020f30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8020f34:	fa92 f2a2 	rbit	r2, r2
 8020f38:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8020f3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020f40:	fab2 f282 	clz	r2, r2
 8020f44:	b2d2      	uxtb	r2, r2
 8020f46:	f042 0220 	orr.w	r2, r2, #32
 8020f4a:	b2d2      	uxtb	r2, r2
 8020f4c:	f002 021f 	and.w	r2, r2, #31
 8020f50:	2101      	movs	r1, #1
 8020f52:	fa01 f202 	lsl.w	r2, r1, r2
 8020f56:	4013      	ands	r3, r2
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d007      	beq.n	8020f6c <HAL_RCC_OscConfig+0x3cc>
 8020f5c:	1d3b      	adds	r3, r7, #4
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	691b      	ldr	r3, [r3, #16]
 8020f62:	2b01      	cmp	r3, #1
 8020f64:	d002      	beq.n	8020f6c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8020f66:	2301      	movs	r3, #1
 8020f68:	f000 bd1b 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020f6c:	4ba0      	ldr	r3, [pc, #640]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020f74:	1d3b      	adds	r3, r7, #4
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	695b      	ldr	r3, [r3, #20]
 8020f7a:	21f8      	movs	r1, #248	; 0xf8
 8020f7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020f80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8020f84:	fa91 f1a1 	rbit	r1, r1
 8020f88:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8020f8c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8020f90:	fab1 f181 	clz	r1, r1
 8020f94:	b2c9      	uxtb	r1, r1
 8020f96:	408b      	lsls	r3, r1
 8020f98:	4995      	ldr	r1, [pc, #596]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8020f9a:	4313      	orrs	r3, r2
 8020f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020f9e:	e0f5      	b.n	802118c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8020fa0:	1d3b      	adds	r3, r7, #4
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	691b      	ldr	r3, [r3, #16]
 8020fa6:	2b00      	cmp	r3, #0
 8020fa8:	f000 8085 	beq.w	80210b6 <HAL_RCC_OscConfig+0x516>
 8020fac:	2301      	movs	r3, #1
 8020fae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020fb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020fb6:	fa93 f3a3 	rbit	r3, r3
 8020fba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8020fbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8020fc2:	fab3 f383 	clz	r3, r3
 8020fc6:	b2db      	uxtb	r3, r3
 8020fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8020fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8020fd0:	009b      	lsls	r3, r3, #2
 8020fd2:	461a      	mov	r2, r3
 8020fd4:	2301      	movs	r3, #1
 8020fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020fd8:	f7ff fb44 	bl	8020664 <HAL_GetTick>
 8020fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020fe0:	e00a      	b.n	8020ff8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020fe2:	f7ff fb3f 	bl	8020664 <HAL_GetTick>
 8020fe6:	4602      	mov	r2, r0
 8020fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020fec:	1ad3      	subs	r3, r2, r3
 8020fee:	2b02      	cmp	r3, #2
 8020ff0:	d902      	bls.n	8020ff8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8020ff2:	2303      	movs	r3, #3
 8020ff4:	f000 bcd5 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
 8020ff8:	2302      	movs	r3, #2
 8020ffa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020ffe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8021002:	fa93 f3a3 	rbit	r3, r3
 8021006:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 802100a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802100e:	fab3 f383 	clz	r3, r3
 8021012:	b2db      	uxtb	r3, r3
 8021014:	095b      	lsrs	r3, r3, #5
 8021016:	b2db      	uxtb	r3, r3
 8021018:	f043 0301 	orr.w	r3, r3, #1
 802101c:	b2db      	uxtb	r3, r3
 802101e:	2b01      	cmp	r3, #1
 8021020:	d102      	bne.n	8021028 <HAL_RCC_OscConfig+0x488>
 8021022:	4b73      	ldr	r3, [pc, #460]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	e013      	b.n	8021050 <HAL_RCC_OscConfig+0x4b0>
 8021028:	2302      	movs	r3, #2
 802102a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802102e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8021032:	fa93 f3a3 	rbit	r3, r3
 8021036:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 802103a:	2302      	movs	r3, #2
 802103c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8021040:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8021044:	fa93 f3a3 	rbit	r3, r3
 8021048:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 802104c:	4b68      	ldr	r3, [pc, #416]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 802104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021050:	2202      	movs	r2, #2
 8021052:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8021056:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 802105a:	fa92 f2a2 	rbit	r2, r2
 802105e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8021062:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8021066:	fab2 f282 	clz	r2, r2
 802106a:	b2d2      	uxtb	r2, r2
 802106c:	f042 0220 	orr.w	r2, r2, #32
 8021070:	b2d2      	uxtb	r2, r2
 8021072:	f002 021f 	and.w	r2, r2, #31
 8021076:	2101      	movs	r1, #1
 8021078:	fa01 f202 	lsl.w	r2, r1, r2
 802107c:	4013      	ands	r3, r2
 802107e:	2b00      	cmp	r3, #0
 8021080:	d0af      	beq.n	8020fe2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021082:	4b5b      	ldr	r3, [pc, #364]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802108a:	1d3b      	adds	r3, r7, #4
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	695b      	ldr	r3, [r3, #20]
 8021090:	21f8      	movs	r1, #248	; 0xf8
 8021092:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021096:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 802109a:	fa91 f1a1 	rbit	r1, r1
 802109e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80210a2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80210a6:	fab1 f181 	clz	r1, r1
 80210aa:	b2c9      	uxtb	r1, r1
 80210ac:	408b      	lsls	r3, r1
 80210ae:	4950      	ldr	r1, [pc, #320]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 80210b0:	4313      	orrs	r3, r2
 80210b2:	600b      	str	r3, [r1, #0]
 80210b4:	e06a      	b.n	802118c <HAL_RCC_OscConfig+0x5ec>
 80210b6:	2301      	movs	r3, #1
 80210b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80210bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80210c0:	fa93 f3a3 	rbit	r3, r3
 80210c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80210c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80210cc:	fab3 f383 	clz	r3, r3
 80210d0:	b2db      	uxtb	r3, r3
 80210d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80210d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80210da:	009b      	lsls	r3, r3, #2
 80210dc:	461a      	mov	r2, r3
 80210de:	2300      	movs	r3, #0
 80210e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80210e2:	f7ff fabf 	bl	8020664 <HAL_GetTick>
 80210e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80210ea:	e00a      	b.n	8021102 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80210ec:	f7ff faba 	bl	8020664 <HAL_GetTick>
 80210f0:	4602      	mov	r2, r0
 80210f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80210f6:	1ad3      	subs	r3, r2, r3
 80210f8:	2b02      	cmp	r3, #2
 80210fa:	d902      	bls.n	8021102 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80210fc:	2303      	movs	r3, #3
 80210fe:	f000 bc50 	b.w	80219a2 <HAL_RCC_OscConfig+0xe02>
 8021102:	2302      	movs	r3, #2
 8021104:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021108:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 802110c:	fa93 f3a3 	rbit	r3, r3
 8021110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8021114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021118:	fab3 f383 	clz	r3, r3
 802111c:	b2db      	uxtb	r3, r3
 802111e:	095b      	lsrs	r3, r3, #5
 8021120:	b2db      	uxtb	r3, r3
 8021122:	f043 0301 	orr.w	r3, r3, #1
 8021126:	b2db      	uxtb	r3, r3
 8021128:	2b01      	cmp	r3, #1
 802112a:	d102      	bne.n	8021132 <HAL_RCC_OscConfig+0x592>
 802112c:	4b30      	ldr	r3, [pc, #192]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	e013      	b.n	802115a <HAL_RCC_OscConfig+0x5ba>
 8021132:	2302      	movs	r3, #2
 8021134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 802113c:	fa93 f3a3 	rbit	r3, r3
 8021140:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8021144:	2302      	movs	r3, #2
 8021146:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 802114a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 802114e:	fa93 f3a3 	rbit	r3, r3
 8021152:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8021156:	4b26      	ldr	r3, [pc, #152]	; (80211f0 <HAL_RCC_OscConfig+0x650>)
 8021158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802115a:	2202      	movs	r2, #2
 802115c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8021160:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8021164:	fa92 f2a2 	rbit	r2, r2
 8021168:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 802116c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8021170:	fab2 f282 	clz	r2, r2
 8021174:	b2d2      	uxtb	r2, r2
 8021176:	f042 0220 	orr.w	r2, r2, #32
 802117a:	b2d2      	uxtb	r2, r2
 802117c:	f002 021f 	and.w	r2, r2, #31
 8021180:	2101      	movs	r1, #1
 8021182:	fa01 f202 	lsl.w	r2, r1, r2
 8021186:	4013      	ands	r3, r2
 8021188:	2b00      	cmp	r3, #0
 802118a:	d1af      	bne.n	80210ec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802118c:	1d3b      	adds	r3, r7, #4
 802118e:	681b      	ldr	r3, [r3, #0]
 8021190:	681b      	ldr	r3, [r3, #0]
 8021192:	f003 0308 	and.w	r3, r3, #8
 8021196:	2b00      	cmp	r3, #0
 8021198:	f000 80da 	beq.w	8021350 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 802119c:	1d3b      	adds	r3, r7, #4
 802119e:	681b      	ldr	r3, [r3, #0]
 80211a0:	699b      	ldr	r3, [r3, #24]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d069      	beq.n	802127a <HAL_RCC_OscConfig+0x6da>
 80211a6:	2301      	movs	r3, #1
 80211a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80211ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80211b0:	fa93 f3a3 	rbit	r3, r3
 80211b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80211b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80211bc:	fab3 f383 	clz	r3, r3
 80211c0:	b2db      	uxtb	r3, r3
 80211c2:	461a      	mov	r2, r3
 80211c4:	4b0b      	ldr	r3, [pc, #44]	; (80211f4 <HAL_RCC_OscConfig+0x654>)
 80211c6:	4413      	add	r3, r2
 80211c8:	009b      	lsls	r3, r3, #2
 80211ca:	461a      	mov	r2, r3
 80211cc:	2301      	movs	r3, #1
 80211ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80211d0:	f7ff fa48 	bl	8020664 <HAL_GetTick>
 80211d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211d8:	e00e      	b.n	80211f8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80211da:	f7ff fa43 	bl	8020664 <HAL_GetTick>
 80211de:	4602      	mov	r2, r0
 80211e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80211e4:	1ad3      	subs	r3, r2, r3
 80211e6:	2b02      	cmp	r3, #2
 80211e8:	d906      	bls.n	80211f8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80211ea:	2303      	movs	r3, #3
 80211ec:	e3d9      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 80211ee:	bf00      	nop
 80211f0:	40021000 	.word	0x40021000
 80211f4:	10908120 	.word	0x10908120
 80211f8:	2302      	movs	r3, #2
 80211fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80211fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8021202:	fa93 f3a3 	rbit	r3, r3
 8021206:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802120a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802120e:	2202      	movs	r2, #2
 8021210:	601a      	str	r2, [r3, #0]
 8021212:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021216:	681b      	ldr	r3, [r3, #0]
 8021218:	fa93 f2a3 	rbit	r2, r3
 802121c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8021220:	601a      	str	r2, [r3, #0]
 8021222:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021226:	2202      	movs	r2, #2
 8021228:	601a      	str	r2, [r3, #0]
 802122a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	fa93 f2a3 	rbit	r2, r3
 8021234:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8021238:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802123a:	4ba5      	ldr	r3, [pc, #660]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802123c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802123e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8021242:	2102      	movs	r1, #2
 8021244:	6019      	str	r1, [r3, #0]
 8021246:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	fa93 f1a3 	rbit	r1, r3
 8021250:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8021254:	6019      	str	r1, [r3, #0]
  return result;
 8021256:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	fab3 f383 	clz	r3, r3
 8021260:	b2db      	uxtb	r3, r3
 8021262:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8021266:	b2db      	uxtb	r3, r3
 8021268:	f003 031f 	and.w	r3, r3, #31
 802126c:	2101      	movs	r1, #1
 802126e:	fa01 f303 	lsl.w	r3, r1, r3
 8021272:	4013      	ands	r3, r2
 8021274:	2b00      	cmp	r3, #0
 8021276:	d0b0      	beq.n	80211da <HAL_RCC_OscConfig+0x63a>
 8021278:	e06a      	b.n	8021350 <HAL_RCC_OscConfig+0x7b0>
 802127a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 802127e:	2201      	movs	r2, #1
 8021280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021282:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8021286:	681b      	ldr	r3, [r3, #0]
 8021288:	fa93 f2a3 	rbit	r2, r3
 802128c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8021290:	601a      	str	r2, [r3, #0]
  return result;
 8021292:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8021296:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021298:	fab3 f383 	clz	r3, r3
 802129c:	b2db      	uxtb	r3, r3
 802129e:	461a      	mov	r2, r3
 80212a0:	4b8c      	ldr	r3, [pc, #560]	; (80214d4 <HAL_RCC_OscConfig+0x934>)
 80212a2:	4413      	add	r3, r2
 80212a4:	009b      	lsls	r3, r3, #2
 80212a6:	461a      	mov	r2, r3
 80212a8:	2300      	movs	r3, #0
 80212aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80212ac:	f7ff f9da 	bl	8020664 <HAL_GetTick>
 80212b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80212b4:	e009      	b.n	80212ca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80212b6:	f7ff f9d5 	bl	8020664 <HAL_GetTick>
 80212ba:	4602      	mov	r2, r0
 80212bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80212c0:	1ad3      	subs	r3, r2, r3
 80212c2:	2b02      	cmp	r3, #2
 80212c4:	d901      	bls.n	80212ca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80212c6:	2303      	movs	r3, #3
 80212c8:	e36b      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 80212ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80212ce:	2202      	movs	r2, #2
 80212d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80212d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	fa93 f2a3 	rbit	r2, r3
 80212dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80212e0:	601a      	str	r2, [r3, #0]
 80212e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80212e6:	2202      	movs	r2, #2
 80212e8:	601a      	str	r2, [r3, #0]
 80212ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	fa93 f2a3 	rbit	r2, r3
 80212f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80212f8:	601a      	str	r2, [r3, #0]
 80212fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80212fe:	2202      	movs	r2, #2
 8021300:	601a      	str	r2, [r3, #0]
 8021302:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	fa93 f2a3 	rbit	r2, r3
 802130c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8021310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021312:	4b6f      	ldr	r3, [pc, #444]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021316:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 802131a:	2102      	movs	r1, #2
 802131c:	6019      	str	r1, [r3, #0]
 802131e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	fa93 f1a3 	rbit	r1, r3
 8021328:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 802132c:	6019      	str	r1, [r3, #0]
  return result;
 802132e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021332:	681b      	ldr	r3, [r3, #0]
 8021334:	fab3 f383 	clz	r3, r3
 8021338:	b2db      	uxtb	r3, r3
 802133a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802133e:	b2db      	uxtb	r3, r3
 8021340:	f003 031f 	and.w	r3, r3, #31
 8021344:	2101      	movs	r1, #1
 8021346:	fa01 f303 	lsl.w	r3, r1, r3
 802134a:	4013      	ands	r3, r2
 802134c:	2b00      	cmp	r3, #0
 802134e:	d1b2      	bne.n	80212b6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021350:	1d3b      	adds	r3, r7, #4
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	681b      	ldr	r3, [r3, #0]
 8021356:	f003 0304 	and.w	r3, r3, #4
 802135a:	2b00      	cmp	r3, #0
 802135c:	f000 8158 	beq.w	8021610 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8021360:	2300      	movs	r3, #0
 8021362:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021366:	4b5a      	ldr	r3, [pc, #360]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021368:	69db      	ldr	r3, [r3, #28]
 802136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802136e:	2b00      	cmp	r3, #0
 8021370:	d112      	bne.n	8021398 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021372:	4b57      	ldr	r3, [pc, #348]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021374:	69db      	ldr	r3, [r3, #28]
 8021376:	4a56      	ldr	r2, [pc, #344]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802137c:	61d3      	str	r3, [r2, #28]
 802137e:	4b54      	ldr	r3, [pc, #336]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021380:	69db      	ldr	r3, [r3, #28]
 8021382:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8021386:	f107 0308 	add.w	r3, r7, #8
 802138a:	601a      	str	r2, [r3, #0]
 802138c:	f107 0308 	add.w	r3, r7, #8
 8021390:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8021392:	2301      	movs	r3, #1
 8021394:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021398:	4b4f      	ldr	r3, [pc, #316]	; (80214d8 <HAL_RCC_OscConfig+0x938>)
 802139a:	681b      	ldr	r3, [r3, #0]
 802139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d11a      	bne.n	80213da <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80213a4:	4b4c      	ldr	r3, [pc, #304]	; (80214d8 <HAL_RCC_OscConfig+0x938>)
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	4a4b      	ldr	r2, [pc, #300]	; (80214d8 <HAL_RCC_OscConfig+0x938>)
 80213aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80213ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80213b0:	f7ff f958 	bl	8020664 <HAL_GetTick>
 80213b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213b8:	e009      	b.n	80213ce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80213ba:	f7ff f953 	bl	8020664 <HAL_GetTick>
 80213be:	4602      	mov	r2, r0
 80213c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80213c4:	1ad3      	subs	r3, r2, r3
 80213c6:	2b64      	cmp	r3, #100	; 0x64
 80213c8:	d901      	bls.n	80213ce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80213ca:	2303      	movs	r3, #3
 80213cc:	e2e9      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80213ce:	4b42      	ldr	r3, [pc, #264]	; (80214d8 <HAL_RCC_OscConfig+0x938>)
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d0ef      	beq.n	80213ba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80213da:	1d3b      	adds	r3, r7, #4
 80213dc:	681b      	ldr	r3, [r3, #0]
 80213de:	68db      	ldr	r3, [r3, #12]
 80213e0:	2b01      	cmp	r3, #1
 80213e2:	d106      	bne.n	80213f2 <HAL_RCC_OscConfig+0x852>
 80213e4:	4b3a      	ldr	r3, [pc, #232]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 80213e6:	6a1b      	ldr	r3, [r3, #32]
 80213e8:	4a39      	ldr	r2, [pc, #228]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 80213ea:	f043 0301 	orr.w	r3, r3, #1
 80213ee:	6213      	str	r3, [r2, #32]
 80213f0:	e02f      	b.n	8021452 <HAL_RCC_OscConfig+0x8b2>
 80213f2:	1d3b      	adds	r3, r7, #4
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	68db      	ldr	r3, [r3, #12]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d10c      	bne.n	8021416 <HAL_RCC_OscConfig+0x876>
 80213fc:	4b34      	ldr	r3, [pc, #208]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 80213fe:	6a1b      	ldr	r3, [r3, #32]
 8021400:	4a33      	ldr	r2, [pc, #204]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021402:	f023 0301 	bic.w	r3, r3, #1
 8021406:	6213      	str	r3, [r2, #32]
 8021408:	4b31      	ldr	r3, [pc, #196]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802140a:	6a1b      	ldr	r3, [r3, #32]
 802140c:	4a30      	ldr	r2, [pc, #192]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802140e:	f023 0304 	bic.w	r3, r3, #4
 8021412:	6213      	str	r3, [r2, #32]
 8021414:	e01d      	b.n	8021452 <HAL_RCC_OscConfig+0x8b2>
 8021416:	1d3b      	adds	r3, r7, #4
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	68db      	ldr	r3, [r3, #12]
 802141c:	2b05      	cmp	r3, #5
 802141e:	d10c      	bne.n	802143a <HAL_RCC_OscConfig+0x89a>
 8021420:	4b2b      	ldr	r3, [pc, #172]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021422:	6a1b      	ldr	r3, [r3, #32]
 8021424:	4a2a      	ldr	r2, [pc, #168]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021426:	f043 0304 	orr.w	r3, r3, #4
 802142a:	6213      	str	r3, [r2, #32]
 802142c:	4b28      	ldr	r3, [pc, #160]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802142e:	6a1b      	ldr	r3, [r3, #32]
 8021430:	4a27      	ldr	r2, [pc, #156]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021432:	f043 0301 	orr.w	r3, r3, #1
 8021436:	6213      	str	r3, [r2, #32]
 8021438:	e00b      	b.n	8021452 <HAL_RCC_OscConfig+0x8b2>
 802143a:	4b25      	ldr	r3, [pc, #148]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802143c:	6a1b      	ldr	r3, [r3, #32]
 802143e:	4a24      	ldr	r2, [pc, #144]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021440:	f023 0301 	bic.w	r3, r3, #1
 8021444:	6213      	str	r3, [r2, #32]
 8021446:	4b22      	ldr	r3, [pc, #136]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 8021448:	6a1b      	ldr	r3, [r3, #32]
 802144a:	4a21      	ldr	r2, [pc, #132]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 802144c:	f023 0304 	bic.w	r3, r3, #4
 8021450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021452:	1d3b      	adds	r3, r7, #4
 8021454:	681b      	ldr	r3, [r3, #0]
 8021456:	68db      	ldr	r3, [r3, #12]
 8021458:	2b00      	cmp	r3, #0
 802145a:	d06b      	beq.n	8021534 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802145c:	f7ff f902 	bl	8020664 <HAL_GetTick>
 8021460:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021464:	e00b      	b.n	802147e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021466:	f7ff f8fd 	bl	8020664 <HAL_GetTick>
 802146a:	4602      	mov	r2, r0
 802146c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021470:	1ad3      	subs	r3, r2, r3
 8021472:	f241 3288 	movw	r2, #5000	; 0x1388
 8021476:	4293      	cmp	r3, r2
 8021478:	d901      	bls.n	802147e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 802147a:	2303      	movs	r3, #3
 802147c:	e291      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 802147e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8021482:	2202      	movs	r2, #2
 8021484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021486:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	fa93 f2a3 	rbit	r2, r3
 8021490:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8021494:	601a      	str	r2, [r3, #0]
 8021496:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 802149a:	2202      	movs	r2, #2
 802149c:	601a      	str	r2, [r3, #0]
 802149e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80214a2:	681b      	ldr	r3, [r3, #0]
 80214a4:	fa93 f2a3 	rbit	r2, r3
 80214a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80214ac:	601a      	str	r2, [r3, #0]
  return result;
 80214ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80214b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80214b4:	fab3 f383 	clz	r3, r3
 80214b8:	b2db      	uxtb	r3, r3
 80214ba:	095b      	lsrs	r3, r3, #5
 80214bc:	b2db      	uxtb	r3, r3
 80214be:	f043 0302 	orr.w	r3, r3, #2
 80214c2:	b2db      	uxtb	r3, r3
 80214c4:	2b02      	cmp	r3, #2
 80214c6:	d109      	bne.n	80214dc <HAL_RCC_OscConfig+0x93c>
 80214c8:	4b01      	ldr	r3, [pc, #4]	; (80214d0 <HAL_RCC_OscConfig+0x930>)
 80214ca:	6a1b      	ldr	r3, [r3, #32]
 80214cc:	e014      	b.n	80214f8 <HAL_RCC_OscConfig+0x958>
 80214ce:	bf00      	nop
 80214d0:	40021000 	.word	0x40021000
 80214d4:	10908120 	.word	0x10908120
 80214d8:	40007000 	.word	0x40007000
 80214dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80214e0:	2202      	movs	r2, #2
 80214e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80214e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80214e8:	681b      	ldr	r3, [r3, #0]
 80214ea:	fa93 f2a3 	rbit	r2, r3
 80214ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80214f2:	601a      	str	r2, [r3, #0]
 80214f4:	4bbb      	ldr	r3, [pc, #748]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80214f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80214fc:	2102      	movs	r1, #2
 80214fe:	6011      	str	r1, [r2, #0]
 8021500:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8021504:	6812      	ldr	r2, [r2, #0]
 8021506:	fa92 f1a2 	rbit	r1, r2
 802150a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802150e:	6011      	str	r1, [r2, #0]
  return result;
 8021510:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8021514:	6812      	ldr	r2, [r2, #0]
 8021516:	fab2 f282 	clz	r2, r2
 802151a:	b2d2      	uxtb	r2, r2
 802151c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021520:	b2d2      	uxtb	r2, r2
 8021522:	f002 021f 	and.w	r2, r2, #31
 8021526:	2101      	movs	r1, #1
 8021528:	fa01 f202 	lsl.w	r2, r1, r2
 802152c:	4013      	ands	r3, r2
 802152e:	2b00      	cmp	r3, #0
 8021530:	d099      	beq.n	8021466 <HAL_RCC_OscConfig+0x8c6>
 8021532:	e063      	b.n	80215fc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021534:	f7ff f896 	bl	8020664 <HAL_GetTick>
 8021538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802153c:	e00b      	b.n	8021556 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802153e:	f7ff f891 	bl	8020664 <HAL_GetTick>
 8021542:	4602      	mov	r2, r0
 8021544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021548:	1ad3      	subs	r3, r2, r3
 802154a:	f241 3288 	movw	r2, #5000	; 0x1388
 802154e:	4293      	cmp	r3, r2
 8021550:	d901      	bls.n	8021556 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8021552:	2303      	movs	r3, #3
 8021554:	e225      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 8021556:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 802155a:	2202      	movs	r2, #2
 802155c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802155e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	fa93 f2a3 	rbit	r2, r3
 8021568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 802156c:	601a      	str	r2, [r3, #0]
 802156e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8021572:	2202      	movs	r2, #2
 8021574:	601a      	str	r2, [r3, #0]
 8021576:	f107 0398 	add.w	r3, r7, #152	; 0x98
 802157a:	681b      	ldr	r3, [r3, #0]
 802157c:	fa93 f2a3 	rbit	r2, r3
 8021580:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8021584:	601a      	str	r2, [r3, #0]
  return result;
 8021586:	f107 0394 	add.w	r3, r7, #148	; 0x94
 802158a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802158c:	fab3 f383 	clz	r3, r3
 8021590:	b2db      	uxtb	r3, r3
 8021592:	095b      	lsrs	r3, r3, #5
 8021594:	b2db      	uxtb	r3, r3
 8021596:	f043 0302 	orr.w	r3, r3, #2
 802159a:	b2db      	uxtb	r3, r3
 802159c:	2b02      	cmp	r3, #2
 802159e:	d102      	bne.n	80215a6 <HAL_RCC_OscConfig+0xa06>
 80215a0:	4b90      	ldr	r3, [pc, #576]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80215a2:	6a1b      	ldr	r3, [r3, #32]
 80215a4:	e00d      	b.n	80215c2 <HAL_RCC_OscConfig+0xa22>
 80215a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80215aa:	2202      	movs	r2, #2
 80215ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80215ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	fa93 f2a3 	rbit	r2, r3
 80215b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80215bc:	601a      	str	r2, [r3, #0]
 80215be:	4b89      	ldr	r3, [pc, #548]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80215c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80215c6:	2102      	movs	r1, #2
 80215c8:	6011      	str	r1, [r2, #0]
 80215ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80215ce:	6812      	ldr	r2, [r2, #0]
 80215d0:	fa92 f1a2 	rbit	r1, r2
 80215d4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80215d8:	6011      	str	r1, [r2, #0]
  return result;
 80215da:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80215de:	6812      	ldr	r2, [r2, #0]
 80215e0:	fab2 f282 	clz	r2, r2
 80215e4:	b2d2      	uxtb	r2, r2
 80215e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80215ea:	b2d2      	uxtb	r2, r2
 80215ec:	f002 021f 	and.w	r2, r2, #31
 80215f0:	2101      	movs	r1, #1
 80215f2:	fa01 f202 	lsl.w	r2, r1, r2
 80215f6:	4013      	ands	r3, r2
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d1a0      	bne.n	802153e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80215fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8021600:	2b01      	cmp	r3, #1
 8021602:	d105      	bne.n	8021610 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021604:	4b77      	ldr	r3, [pc, #476]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 8021606:	69db      	ldr	r3, [r3, #28]
 8021608:	4a76      	ldr	r2, [pc, #472]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 802160a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802160e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021610:	1d3b      	adds	r3, r7, #4
 8021612:	681b      	ldr	r3, [r3, #0]
 8021614:	69db      	ldr	r3, [r3, #28]
 8021616:	2b00      	cmp	r3, #0
 8021618:	f000 81c2 	beq.w	80219a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802161c:	4b71      	ldr	r3, [pc, #452]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 802161e:	685b      	ldr	r3, [r3, #4]
 8021620:	f003 030c 	and.w	r3, r3, #12
 8021624:	2b08      	cmp	r3, #8
 8021626:	f000 819c 	beq.w	8021962 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802162a:	1d3b      	adds	r3, r7, #4
 802162c:	681b      	ldr	r3, [r3, #0]
 802162e:	69db      	ldr	r3, [r3, #28]
 8021630:	2b02      	cmp	r3, #2
 8021632:	f040 8114 	bne.w	802185e <HAL_RCC_OscConfig+0xcbe>
 8021636:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802163a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802163e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021640:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021644:	681b      	ldr	r3, [r3, #0]
 8021646:	fa93 f2a3 	rbit	r2, r3
 802164a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 802164e:	601a      	str	r2, [r3, #0]
  return result;
 8021650:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8021654:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8021656:	fab3 f383 	clz	r3, r3
 802165a:	b2db      	uxtb	r3, r3
 802165c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8021660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8021664:	009b      	lsls	r3, r3, #2
 8021666:	461a      	mov	r2, r3
 8021668:	2300      	movs	r3, #0
 802166a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802166c:	f7fe fffa 	bl	8020664 <HAL_GetTick>
 8021670:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8021674:	e009      	b.n	802168a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021676:	f7fe fff5 	bl	8020664 <HAL_GetTick>
 802167a:	4602      	mov	r2, r0
 802167c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021680:	1ad3      	subs	r3, r2, r3
 8021682:	2b02      	cmp	r3, #2
 8021684:	d901      	bls.n	802168a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8021686:	2303      	movs	r3, #3
 8021688:	e18b      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 802168a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802168e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021694:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8021698:	681b      	ldr	r3, [r3, #0]
 802169a:	fa93 f2a3 	rbit	r2, r3
 802169e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80216a2:	601a      	str	r2, [r3, #0]
  return result;
 80216a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80216a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80216aa:	fab3 f383 	clz	r3, r3
 80216ae:	b2db      	uxtb	r3, r3
 80216b0:	095b      	lsrs	r3, r3, #5
 80216b2:	b2db      	uxtb	r3, r3
 80216b4:	f043 0301 	orr.w	r3, r3, #1
 80216b8:	b2db      	uxtb	r3, r3
 80216ba:	2b01      	cmp	r3, #1
 80216bc:	d102      	bne.n	80216c4 <HAL_RCC_OscConfig+0xb24>
 80216be:	4b49      	ldr	r3, [pc, #292]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80216c0:	681b      	ldr	r3, [r3, #0]
 80216c2:	e01b      	b.n	80216fc <HAL_RCC_OscConfig+0xb5c>
 80216c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80216c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80216cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80216ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	fa93 f2a3 	rbit	r2, r3
 80216d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80216dc:	601a      	str	r2, [r3, #0]
 80216de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80216e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80216e6:	601a      	str	r2, [r3, #0]
 80216e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	fa93 f2a3 	rbit	r2, r3
 80216f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80216f6:	601a      	str	r2, [r3, #0]
 80216f8:	4b3a      	ldr	r3, [pc, #232]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80216fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80216fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8021700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8021704:	6011      	str	r1, [r2, #0]
 8021706:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802170a:	6812      	ldr	r2, [r2, #0]
 802170c:	fa92 f1a2 	rbit	r1, r2
 8021710:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8021714:	6011      	str	r1, [r2, #0]
  return result;
 8021716:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802171a:	6812      	ldr	r2, [r2, #0]
 802171c:	fab2 f282 	clz	r2, r2
 8021720:	b2d2      	uxtb	r2, r2
 8021722:	f042 0220 	orr.w	r2, r2, #32
 8021726:	b2d2      	uxtb	r2, r2
 8021728:	f002 021f 	and.w	r2, r2, #31
 802172c:	2101      	movs	r1, #1
 802172e:	fa01 f202 	lsl.w	r2, r1, r2
 8021732:	4013      	ands	r3, r2
 8021734:	2b00      	cmp	r3, #0
 8021736:	d19e      	bne.n	8021676 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021738:	4b2a      	ldr	r3, [pc, #168]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 802173a:	685b      	ldr	r3, [r3, #4]
 802173c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8021740:	1d3b      	adds	r3, r7, #4
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8021746:	1d3b      	adds	r3, r7, #4
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	6a1b      	ldr	r3, [r3, #32]
 802174c:	430b      	orrs	r3, r1
 802174e:	4925      	ldr	r1, [pc, #148]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 8021750:	4313      	orrs	r3, r2
 8021752:	604b      	str	r3, [r1, #4]
 8021754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802175e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	fa93 f2a3 	rbit	r2, r3
 8021768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802176c:	601a      	str	r2, [r3, #0]
  return result;
 802176e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021772:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8021774:	fab3 f383 	clz	r3, r3
 8021778:	b2db      	uxtb	r3, r3
 802177a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 802177e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8021782:	009b      	lsls	r3, r3, #2
 8021784:	461a      	mov	r2, r3
 8021786:	2301      	movs	r3, #1
 8021788:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802178a:	f7fe ff6b 	bl	8020664 <HAL_GetTick>
 802178e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8021792:	e009      	b.n	80217a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021794:	f7fe ff66 	bl	8020664 <HAL_GetTick>
 8021798:	4602      	mov	r2, r0
 802179a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802179e:	1ad3      	subs	r3, r2, r3
 80217a0:	2b02      	cmp	r3, #2
 80217a2:	d901      	bls.n	80217a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80217a4:	2303      	movs	r3, #3
 80217a6:	e0fc      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 80217a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80217ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80217b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80217b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80217b6:	681b      	ldr	r3, [r3, #0]
 80217b8:	fa93 f2a3 	rbit	r2, r3
 80217bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80217c0:	601a      	str	r2, [r3, #0]
  return result;
 80217c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80217c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80217c8:	fab3 f383 	clz	r3, r3
 80217cc:	b2db      	uxtb	r3, r3
 80217ce:	095b      	lsrs	r3, r3, #5
 80217d0:	b2db      	uxtb	r3, r3
 80217d2:	f043 0301 	orr.w	r3, r3, #1
 80217d6:	b2db      	uxtb	r3, r3
 80217d8:	2b01      	cmp	r3, #1
 80217da:	d105      	bne.n	80217e8 <HAL_RCC_OscConfig+0xc48>
 80217dc:	4b01      	ldr	r3, [pc, #4]	; (80217e4 <HAL_RCC_OscConfig+0xc44>)
 80217de:	681b      	ldr	r3, [r3, #0]
 80217e0:	e01e      	b.n	8021820 <HAL_RCC_OscConfig+0xc80>
 80217e2:	bf00      	nop
 80217e4:	40021000 	.word	0x40021000
 80217e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80217ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80217f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80217f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	fa93 f2a3 	rbit	r2, r3
 80217fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8021800:	601a      	str	r2, [r3, #0]
 8021802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802180a:	601a      	str	r2, [r3, #0]
 802180c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021810:	681b      	ldr	r3, [r3, #0]
 8021812:	fa93 f2a3 	rbit	r2, r3
 8021816:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 802181a:	601a      	str	r2, [r3, #0]
 802181c:	4b63      	ldr	r3, [pc, #396]	; (80219ac <HAL_RCC_OscConfig+0xe0c>)
 802181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021820:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8021824:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8021828:	6011      	str	r1, [r2, #0]
 802182a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 802182e:	6812      	ldr	r2, [r2, #0]
 8021830:	fa92 f1a2 	rbit	r1, r2
 8021834:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8021838:	6011      	str	r1, [r2, #0]
  return result;
 802183a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802183e:	6812      	ldr	r2, [r2, #0]
 8021840:	fab2 f282 	clz	r2, r2
 8021844:	b2d2      	uxtb	r2, r2
 8021846:	f042 0220 	orr.w	r2, r2, #32
 802184a:	b2d2      	uxtb	r2, r2
 802184c:	f002 021f 	and.w	r2, r2, #31
 8021850:	2101      	movs	r1, #1
 8021852:	fa01 f202 	lsl.w	r2, r1, r2
 8021856:	4013      	ands	r3, r2
 8021858:	2b00      	cmp	r3, #0
 802185a:	d09b      	beq.n	8021794 <HAL_RCC_OscConfig+0xbf4>
 802185c:	e0a0      	b.n	80219a0 <HAL_RCC_OscConfig+0xe00>
 802185e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8021862:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8021866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802186c:	681b      	ldr	r3, [r3, #0]
 802186e:	fa93 f2a3 	rbit	r2, r3
 8021872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8021876:	601a      	str	r2, [r3, #0]
  return result;
 8021878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802187c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802187e:	fab3 f383 	clz	r3, r3
 8021882:	b2db      	uxtb	r3, r3
 8021884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8021888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 802188c:	009b      	lsls	r3, r3, #2
 802188e:	461a      	mov	r2, r3
 8021890:	2300      	movs	r3, #0
 8021892:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021894:	f7fe fee6 	bl	8020664 <HAL_GetTick>
 8021898:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 802189c:	e009      	b.n	80218b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802189e:	f7fe fee1 	bl	8020664 <HAL_GetTick>
 80218a2:	4602      	mov	r2, r0
 80218a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80218a8:	1ad3      	subs	r3, r2, r3
 80218aa:	2b02      	cmp	r3, #2
 80218ac:	d901      	bls.n	80218b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80218ae:	2303      	movs	r3, #3
 80218b0:	e077      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
 80218b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80218b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80218ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80218bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	fa93 f2a3 	rbit	r2, r3
 80218c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218ca:	601a      	str	r2, [r3, #0]
  return result;
 80218cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80218d2:	fab3 f383 	clz	r3, r3
 80218d6:	b2db      	uxtb	r3, r3
 80218d8:	095b      	lsrs	r3, r3, #5
 80218da:	b2db      	uxtb	r3, r3
 80218dc:	f043 0301 	orr.w	r3, r3, #1
 80218e0:	b2db      	uxtb	r3, r3
 80218e2:	2b01      	cmp	r3, #1
 80218e4:	d102      	bne.n	80218ec <HAL_RCC_OscConfig+0xd4c>
 80218e6:	4b31      	ldr	r3, [pc, #196]	; (80219ac <HAL_RCC_OscConfig+0xe0c>)
 80218e8:	681b      	ldr	r3, [r3, #0]
 80218ea:	e01b      	b.n	8021924 <HAL_RCC_OscConfig+0xd84>
 80218ec:	f107 0320 	add.w	r3, r7, #32
 80218f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80218f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80218f6:	f107 0320 	add.w	r3, r7, #32
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	fa93 f2a3 	rbit	r2, r3
 8021900:	f107 031c 	add.w	r3, r7, #28
 8021904:	601a      	str	r2, [r3, #0]
 8021906:	f107 0318 	add.w	r3, r7, #24
 802190a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802190e:	601a      	str	r2, [r3, #0]
 8021910:	f107 0318 	add.w	r3, r7, #24
 8021914:	681b      	ldr	r3, [r3, #0]
 8021916:	fa93 f2a3 	rbit	r2, r3
 802191a:	f107 0314 	add.w	r3, r7, #20
 802191e:	601a      	str	r2, [r3, #0]
 8021920:	4b22      	ldr	r3, [pc, #136]	; (80219ac <HAL_RCC_OscConfig+0xe0c>)
 8021922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021924:	f107 0210 	add.w	r2, r7, #16
 8021928:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 802192c:	6011      	str	r1, [r2, #0]
 802192e:	f107 0210 	add.w	r2, r7, #16
 8021932:	6812      	ldr	r2, [r2, #0]
 8021934:	fa92 f1a2 	rbit	r1, r2
 8021938:	f107 020c 	add.w	r2, r7, #12
 802193c:	6011      	str	r1, [r2, #0]
  return result;
 802193e:	f107 020c 	add.w	r2, r7, #12
 8021942:	6812      	ldr	r2, [r2, #0]
 8021944:	fab2 f282 	clz	r2, r2
 8021948:	b2d2      	uxtb	r2, r2
 802194a:	f042 0220 	orr.w	r2, r2, #32
 802194e:	b2d2      	uxtb	r2, r2
 8021950:	f002 021f 	and.w	r2, r2, #31
 8021954:	2101      	movs	r1, #1
 8021956:	fa01 f202 	lsl.w	r2, r1, r2
 802195a:	4013      	ands	r3, r2
 802195c:	2b00      	cmp	r3, #0
 802195e:	d19e      	bne.n	802189e <HAL_RCC_OscConfig+0xcfe>
 8021960:	e01e      	b.n	80219a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021962:	1d3b      	adds	r3, r7, #4
 8021964:	681b      	ldr	r3, [r3, #0]
 8021966:	69db      	ldr	r3, [r3, #28]
 8021968:	2b01      	cmp	r3, #1
 802196a:	d101      	bne.n	8021970 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 802196c:	2301      	movs	r3, #1
 802196e:	e018      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8021970:	4b0e      	ldr	r3, [pc, #56]	; (80219ac <HAL_RCC_OscConfig+0xe0c>)
 8021972:	685b      	ldr	r3, [r3, #4]
 8021974:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8021978:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802197c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8021980:	1d3b      	adds	r3, r7, #4
 8021982:	681b      	ldr	r3, [r3, #0]
 8021984:	6a1b      	ldr	r3, [r3, #32]
 8021986:	429a      	cmp	r2, r3
 8021988:	d108      	bne.n	802199c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 802198a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 802198e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8021992:	1d3b      	adds	r3, r7, #4
 8021994:	681b      	ldr	r3, [r3, #0]
 8021996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8021998:	429a      	cmp	r2, r3
 802199a:	d001      	beq.n	80219a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 802199c:	2301      	movs	r3, #1
 802199e:	e000      	b.n	80219a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80219a0:	2300      	movs	r3, #0
}
 80219a2:	4618      	mov	r0, r3
 80219a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80219a8:	46bd      	mov	sp, r7
 80219aa:	bd80      	pop	{r7, pc}
 80219ac:	40021000 	.word	0x40021000

080219b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80219b0:	b580      	push	{r7, lr}
 80219b2:	b09e      	sub	sp, #120	; 0x78
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
 80219b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80219ba:	2300      	movs	r3, #0
 80219bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80219be:	687b      	ldr	r3, [r7, #4]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	d101      	bne.n	80219c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80219c4:	2301      	movs	r3, #1
 80219c6:	e162      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80219c8:	4b90      	ldr	r3, [pc, #576]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	f003 0307 	and.w	r3, r3, #7
 80219d0:	683a      	ldr	r2, [r7, #0]
 80219d2:	429a      	cmp	r2, r3
 80219d4:	d910      	bls.n	80219f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80219d6:	4b8d      	ldr	r3, [pc, #564]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 80219d8:	681b      	ldr	r3, [r3, #0]
 80219da:	f023 0207 	bic.w	r2, r3, #7
 80219de:	498b      	ldr	r1, [pc, #556]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 80219e0:	683b      	ldr	r3, [r7, #0]
 80219e2:	4313      	orrs	r3, r2
 80219e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80219e6:	4b89      	ldr	r3, [pc, #548]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 80219e8:	681b      	ldr	r3, [r3, #0]
 80219ea:	f003 0307 	and.w	r3, r3, #7
 80219ee:	683a      	ldr	r2, [r7, #0]
 80219f0:	429a      	cmp	r2, r3
 80219f2:	d001      	beq.n	80219f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80219f4:	2301      	movs	r3, #1
 80219f6:	e14a      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	681b      	ldr	r3, [r3, #0]
 80219fc:	f003 0302 	and.w	r3, r3, #2
 8021a00:	2b00      	cmp	r3, #0
 8021a02:	d008      	beq.n	8021a16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021a04:	4b82      	ldr	r3, [pc, #520]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021a06:	685b      	ldr	r3, [r3, #4]
 8021a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	689b      	ldr	r3, [r3, #8]
 8021a10:	497f      	ldr	r1, [pc, #508]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021a12:	4313      	orrs	r3, r2
 8021a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	681b      	ldr	r3, [r3, #0]
 8021a1a:	f003 0301 	and.w	r3, r3, #1
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	f000 80dc 	beq.w	8021bdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	685b      	ldr	r3, [r3, #4]
 8021a28:	2b01      	cmp	r3, #1
 8021a2a:	d13c      	bne.n	8021aa6 <HAL_RCC_ClockConfig+0xf6>
 8021a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8021a30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021a34:	fa93 f3a3 	rbit	r3, r3
 8021a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8021a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021a3c:	fab3 f383 	clz	r3, r3
 8021a40:	b2db      	uxtb	r3, r3
 8021a42:	095b      	lsrs	r3, r3, #5
 8021a44:	b2db      	uxtb	r3, r3
 8021a46:	f043 0301 	orr.w	r3, r3, #1
 8021a4a:	b2db      	uxtb	r3, r3
 8021a4c:	2b01      	cmp	r3, #1
 8021a4e:	d102      	bne.n	8021a56 <HAL_RCC_ClockConfig+0xa6>
 8021a50:	4b6f      	ldr	r3, [pc, #444]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021a52:	681b      	ldr	r3, [r3, #0]
 8021a54:	e00f      	b.n	8021a76 <HAL_RCC_ClockConfig+0xc6>
 8021a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8021a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021a5e:	fa93 f3a3 	rbit	r3, r3
 8021a62:	667b      	str	r3, [r7, #100]	; 0x64
 8021a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8021a68:	663b      	str	r3, [r7, #96]	; 0x60
 8021a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8021a6c:	fa93 f3a3 	rbit	r3, r3
 8021a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021a72:	4b67      	ldr	r3, [pc, #412]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8021a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8021a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8021a7e:	fa92 f2a2 	rbit	r2, r2
 8021a82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8021a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8021a86:	fab2 f282 	clz	r2, r2
 8021a8a:	b2d2      	uxtb	r2, r2
 8021a8c:	f042 0220 	orr.w	r2, r2, #32
 8021a90:	b2d2      	uxtb	r2, r2
 8021a92:	f002 021f 	and.w	r2, r2, #31
 8021a96:	2101      	movs	r1, #1
 8021a98:	fa01 f202 	lsl.w	r2, r1, r2
 8021a9c:	4013      	ands	r3, r2
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d17b      	bne.n	8021b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8021aa2:	2301      	movs	r3, #1
 8021aa4:	e0f3      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	685b      	ldr	r3, [r3, #4]
 8021aaa:	2b02      	cmp	r3, #2
 8021aac:	d13c      	bne.n	8021b28 <HAL_RCC_ClockConfig+0x178>
 8021aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021ab6:	fa93 f3a3 	rbit	r3, r3
 8021aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8021abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021abe:	fab3 f383 	clz	r3, r3
 8021ac2:	b2db      	uxtb	r3, r3
 8021ac4:	095b      	lsrs	r3, r3, #5
 8021ac6:	b2db      	uxtb	r3, r3
 8021ac8:	f043 0301 	orr.w	r3, r3, #1
 8021acc:	b2db      	uxtb	r3, r3
 8021ace:	2b01      	cmp	r3, #1
 8021ad0:	d102      	bne.n	8021ad8 <HAL_RCC_ClockConfig+0x128>
 8021ad2:	4b4f      	ldr	r3, [pc, #316]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	e00f      	b.n	8021af8 <HAL_RCC_ClockConfig+0x148>
 8021ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021ae0:	fa93 f3a3 	rbit	r3, r3
 8021ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8021ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021aea:	643b      	str	r3, [r7, #64]	; 0x40
 8021aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021aee:	fa93 f3a3 	rbit	r3, r3
 8021af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021af4:	4b46      	ldr	r3, [pc, #280]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8021afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021b00:	fa92 f2a2 	rbit	r2, r2
 8021b04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8021b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021b08:	fab2 f282 	clz	r2, r2
 8021b0c:	b2d2      	uxtb	r2, r2
 8021b0e:	f042 0220 	orr.w	r2, r2, #32
 8021b12:	b2d2      	uxtb	r2, r2
 8021b14:	f002 021f 	and.w	r2, r2, #31
 8021b18:	2101      	movs	r1, #1
 8021b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8021b1e:	4013      	ands	r3, r2
 8021b20:	2b00      	cmp	r3, #0
 8021b22:	d13a      	bne.n	8021b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8021b24:	2301      	movs	r3, #1
 8021b26:	e0b2      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
 8021b28:	2302      	movs	r3, #2
 8021b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b2e:	fa93 f3a3 	rbit	r3, r3
 8021b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8021b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021b36:	fab3 f383 	clz	r3, r3
 8021b3a:	b2db      	uxtb	r3, r3
 8021b3c:	095b      	lsrs	r3, r3, #5
 8021b3e:	b2db      	uxtb	r3, r3
 8021b40:	f043 0301 	orr.w	r3, r3, #1
 8021b44:	b2db      	uxtb	r3, r3
 8021b46:	2b01      	cmp	r3, #1
 8021b48:	d102      	bne.n	8021b50 <HAL_RCC_ClockConfig+0x1a0>
 8021b4a:	4b31      	ldr	r3, [pc, #196]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	e00d      	b.n	8021b6c <HAL_RCC_ClockConfig+0x1bc>
 8021b50:	2302      	movs	r3, #2
 8021b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b56:	fa93 f3a3 	rbit	r3, r3
 8021b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8021b5c:	2302      	movs	r3, #2
 8021b5e:	623b      	str	r3, [r7, #32]
 8021b60:	6a3b      	ldr	r3, [r7, #32]
 8021b62:	fa93 f3a3 	rbit	r3, r3
 8021b66:	61fb      	str	r3, [r7, #28]
 8021b68:	4b29      	ldr	r3, [pc, #164]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b6c:	2202      	movs	r2, #2
 8021b6e:	61ba      	str	r2, [r7, #24]
 8021b70:	69ba      	ldr	r2, [r7, #24]
 8021b72:	fa92 f2a2 	rbit	r2, r2
 8021b76:	617a      	str	r2, [r7, #20]
  return result;
 8021b78:	697a      	ldr	r2, [r7, #20]
 8021b7a:	fab2 f282 	clz	r2, r2
 8021b7e:	b2d2      	uxtb	r2, r2
 8021b80:	f042 0220 	orr.w	r2, r2, #32
 8021b84:	b2d2      	uxtb	r2, r2
 8021b86:	f002 021f 	and.w	r2, r2, #31
 8021b8a:	2101      	movs	r1, #1
 8021b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8021b90:	4013      	ands	r3, r2
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	d101      	bne.n	8021b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8021b96:	2301      	movs	r3, #1
 8021b98:	e079      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8021b9a:	4b1d      	ldr	r3, [pc, #116]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021b9c:	685b      	ldr	r3, [r3, #4]
 8021b9e:	f023 0203 	bic.w	r2, r3, #3
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	685b      	ldr	r3, [r3, #4]
 8021ba6:	491a      	ldr	r1, [pc, #104]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021ba8:	4313      	orrs	r3, r2
 8021baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8021bac:	f7fe fd5a 	bl	8020664 <HAL_GetTick>
 8021bb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021bb2:	e00a      	b.n	8021bca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021bb4:	f7fe fd56 	bl	8020664 <HAL_GetTick>
 8021bb8:	4602      	mov	r2, r0
 8021bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021bbc:	1ad3      	subs	r3, r2, r3
 8021bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8021bc2:	4293      	cmp	r3, r2
 8021bc4:	d901      	bls.n	8021bca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8021bc6:	2303      	movs	r3, #3
 8021bc8:	e061      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021bca:	4b11      	ldr	r3, [pc, #68]	; (8021c10 <HAL_RCC_ClockConfig+0x260>)
 8021bcc:	685b      	ldr	r3, [r3, #4]
 8021bce:	f003 020c 	and.w	r2, r3, #12
 8021bd2:	687b      	ldr	r3, [r7, #4]
 8021bd4:	685b      	ldr	r3, [r3, #4]
 8021bd6:	009b      	lsls	r3, r3, #2
 8021bd8:	429a      	cmp	r2, r3
 8021bda:	d1eb      	bne.n	8021bb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021bdc:	4b0b      	ldr	r3, [pc, #44]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 8021bde:	681b      	ldr	r3, [r3, #0]
 8021be0:	f003 0307 	and.w	r3, r3, #7
 8021be4:	683a      	ldr	r2, [r7, #0]
 8021be6:	429a      	cmp	r2, r3
 8021be8:	d214      	bcs.n	8021c14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021bea:	4b08      	ldr	r3, [pc, #32]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	f023 0207 	bic.w	r2, r3, #7
 8021bf2:	4906      	ldr	r1, [pc, #24]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 8021bf4:	683b      	ldr	r3, [r7, #0]
 8021bf6:	4313      	orrs	r3, r2
 8021bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021bfa:	4b04      	ldr	r3, [pc, #16]	; (8021c0c <HAL_RCC_ClockConfig+0x25c>)
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	f003 0307 	and.w	r3, r3, #7
 8021c02:	683a      	ldr	r2, [r7, #0]
 8021c04:	429a      	cmp	r2, r3
 8021c06:	d005      	beq.n	8021c14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8021c08:	2301      	movs	r3, #1
 8021c0a:	e040      	b.n	8021c8e <HAL_RCC_ClockConfig+0x2de>
 8021c0c:	40022000 	.word	0x40022000
 8021c10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	681b      	ldr	r3, [r3, #0]
 8021c18:	f003 0304 	and.w	r3, r3, #4
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d008      	beq.n	8021c32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021c20:	4b1d      	ldr	r3, [pc, #116]	; (8021c98 <HAL_RCC_ClockConfig+0x2e8>)
 8021c22:	685b      	ldr	r3, [r3, #4]
 8021c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	68db      	ldr	r3, [r3, #12]
 8021c2c:	491a      	ldr	r1, [pc, #104]	; (8021c98 <HAL_RCC_ClockConfig+0x2e8>)
 8021c2e:	4313      	orrs	r3, r2
 8021c30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	f003 0308 	and.w	r3, r3, #8
 8021c3a:	2b00      	cmp	r3, #0
 8021c3c:	d009      	beq.n	8021c52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021c3e:	4b16      	ldr	r3, [pc, #88]	; (8021c98 <HAL_RCC_ClockConfig+0x2e8>)
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	691b      	ldr	r3, [r3, #16]
 8021c4a:	00db      	lsls	r3, r3, #3
 8021c4c:	4912      	ldr	r1, [pc, #72]	; (8021c98 <HAL_RCC_ClockConfig+0x2e8>)
 8021c4e:	4313      	orrs	r3, r2
 8021c50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8021c52:	f000 f829 	bl	8021ca8 <HAL_RCC_GetSysClockFreq>
 8021c56:	4601      	mov	r1, r0
 8021c58:	4b0f      	ldr	r3, [pc, #60]	; (8021c98 <HAL_RCC_ClockConfig+0x2e8>)
 8021c5a:	685b      	ldr	r3, [r3, #4]
 8021c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021c60:	22f0      	movs	r2, #240	; 0xf0
 8021c62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021c64:	693a      	ldr	r2, [r7, #16]
 8021c66:	fa92 f2a2 	rbit	r2, r2
 8021c6a:	60fa      	str	r2, [r7, #12]
  return result;
 8021c6c:	68fa      	ldr	r2, [r7, #12]
 8021c6e:	fab2 f282 	clz	r2, r2
 8021c72:	b2d2      	uxtb	r2, r2
 8021c74:	40d3      	lsrs	r3, r2
 8021c76:	4a09      	ldr	r2, [pc, #36]	; (8021c9c <HAL_RCC_ClockConfig+0x2ec>)
 8021c78:	5cd3      	ldrb	r3, [r2, r3]
 8021c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8021c7e:	4a08      	ldr	r2, [pc, #32]	; (8021ca0 <HAL_RCC_ClockConfig+0x2f0>)
 8021c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8021c82:	4b08      	ldr	r3, [pc, #32]	; (8021ca4 <HAL_RCC_ClockConfig+0x2f4>)
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	4618      	mov	r0, r3
 8021c88:	f7fe fca8 	bl	80205dc <HAL_InitTick>
  
  return HAL_OK;
 8021c8c:	2300      	movs	r3, #0
}
 8021c8e:	4618      	mov	r0, r3
 8021c90:	3778      	adds	r7, #120	; 0x78
 8021c92:	46bd      	mov	sp, r7
 8021c94:	bd80      	pop	{r7, pc}
 8021c96:	bf00      	nop
 8021c98:	40021000 	.word	0x40021000
 8021c9c:	08022990 	.word	0x08022990
 8021ca0:	20000000 	.word	0x20000000
 8021ca4:	20000004 	.word	0x20000004

08021ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021ca8:	b480      	push	{r7}
 8021caa:	b08b      	sub	sp, #44	; 0x2c
 8021cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8021cae:	2300      	movs	r3, #0
 8021cb0:	61fb      	str	r3, [r7, #28]
 8021cb2:	2300      	movs	r3, #0
 8021cb4:	61bb      	str	r3, [r7, #24]
 8021cb6:	2300      	movs	r3, #0
 8021cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8021cba:	2300      	movs	r3, #0
 8021cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8021cc2:	4b29      	ldr	r3, [pc, #164]	; (8021d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8021cc4:	685b      	ldr	r3, [r3, #4]
 8021cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8021cc8:	69fb      	ldr	r3, [r7, #28]
 8021cca:	f003 030c 	and.w	r3, r3, #12
 8021cce:	2b04      	cmp	r3, #4
 8021cd0:	d002      	beq.n	8021cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8021cd2:	2b08      	cmp	r3, #8
 8021cd4:	d003      	beq.n	8021cde <HAL_RCC_GetSysClockFreq+0x36>
 8021cd6:	e03c      	b.n	8021d52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8021cd8:	4b24      	ldr	r3, [pc, #144]	; (8021d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8021cda:	623b      	str	r3, [r7, #32]
      break;
 8021cdc:	e03c      	b.n	8021d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8021cde:	69fb      	ldr	r3, [r7, #28]
 8021ce0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8021ce4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8021ce8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021cea:	68ba      	ldr	r2, [r7, #8]
 8021cec:	fa92 f2a2 	rbit	r2, r2
 8021cf0:	607a      	str	r2, [r7, #4]
  return result;
 8021cf2:	687a      	ldr	r2, [r7, #4]
 8021cf4:	fab2 f282 	clz	r2, r2
 8021cf8:	b2d2      	uxtb	r2, r2
 8021cfa:	40d3      	lsrs	r3, r2
 8021cfc:	4a1c      	ldr	r2, [pc, #112]	; (8021d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8021cfe:	5cd3      	ldrb	r3, [r2, r3]
 8021d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8021d02:	4b19      	ldr	r3, [pc, #100]	; (8021d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8021d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d06:	f003 030f 	and.w	r3, r3, #15
 8021d0a:	220f      	movs	r2, #15
 8021d0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021d0e:	693a      	ldr	r2, [r7, #16]
 8021d10:	fa92 f2a2 	rbit	r2, r2
 8021d14:	60fa      	str	r2, [r7, #12]
  return result;
 8021d16:	68fa      	ldr	r2, [r7, #12]
 8021d18:	fab2 f282 	clz	r2, r2
 8021d1c:	b2d2      	uxtb	r2, r2
 8021d1e:	40d3      	lsrs	r3, r2
 8021d20:	4a14      	ldr	r2, [pc, #80]	; (8021d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8021d22:	5cd3      	ldrb	r3, [r2, r3]
 8021d24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8021d26:	69fb      	ldr	r3, [r7, #28]
 8021d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d008      	beq.n	8021d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8021d30:	4a0e      	ldr	r2, [pc, #56]	; (8021d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8021d32:	69bb      	ldr	r3, [r7, #24]
 8021d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8021d38:	697b      	ldr	r3, [r7, #20]
 8021d3a:	fb02 f303 	mul.w	r3, r2, r3
 8021d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8021d40:	e004      	b.n	8021d4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8021d42:	697b      	ldr	r3, [r7, #20]
 8021d44:	4a0c      	ldr	r2, [pc, #48]	; (8021d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8021d46:	fb02 f303 	mul.w	r3, r2, r3
 8021d4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8021d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d4e:	623b      	str	r3, [r7, #32]
      break;
 8021d50:	e002      	b.n	8021d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8021d52:	4b06      	ldr	r3, [pc, #24]	; (8021d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8021d54:	623b      	str	r3, [r7, #32]
      break;
 8021d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021d58:	6a3b      	ldr	r3, [r7, #32]
}
 8021d5a:	4618      	mov	r0, r3
 8021d5c:	372c      	adds	r7, #44	; 0x2c
 8021d5e:	46bd      	mov	sp, r7
 8021d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d64:	4770      	bx	lr
 8021d66:	bf00      	nop
 8021d68:	40021000 	.word	0x40021000
 8021d6c:	007a1200 	.word	0x007a1200
 8021d70:	080229a8 	.word	0x080229a8
 8021d74:	080229b8 	.word	0x080229b8
 8021d78:	003d0900 	.word	0x003d0900

08021d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8021d7c:	b480      	push	{r7}
 8021d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8021d80:	4b03      	ldr	r3, [pc, #12]	; (8021d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8021d82:	681b      	ldr	r3, [r3, #0]
}
 8021d84:	4618      	mov	r0, r3
 8021d86:	46bd      	mov	sp, r7
 8021d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d8c:	4770      	bx	lr
 8021d8e:	bf00      	nop
 8021d90:	20000000 	.word	0x20000000

08021d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021d94:	b580      	push	{r7, lr}
 8021d96:	b082      	sub	sp, #8
 8021d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8021d9a:	f7ff ffef 	bl	8021d7c <HAL_RCC_GetHCLKFreq>
 8021d9e:	4601      	mov	r1, r0
 8021da0:	4b0b      	ldr	r3, [pc, #44]	; (8021dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8021da2:	685b      	ldr	r3, [r3, #4]
 8021da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8021da8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8021dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021dae:	687a      	ldr	r2, [r7, #4]
 8021db0:	fa92 f2a2 	rbit	r2, r2
 8021db4:	603a      	str	r2, [r7, #0]
  return result;
 8021db6:	683a      	ldr	r2, [r7, #0]
 8021db8:	fab2 f282 	clz	r2, r2
 8021dbc:	b2d2      	uxtb	r2, r2
 8021dbe:	40d3      	lsrs	r3, r2
 8021dc0:	4a04      	ldr	r2, [pc, #16]	; (8021dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8021dc2:	5cd3      	ldrb	r3, [r2, r3]
 8021dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8021dc8:	4618      	mov	r0, r3
 8021dca:	3708      	adds	r7, #8
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	bd80      	pop	{r7, pc}
 8021dd0:	40021000 	.word	0x40021000
 8021dd4:	080229a0 	.word	0x080229a0

08021dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b082      	sub	sp, #8
 8021ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8021dde:	f7ff ffcd 	bl	8021d7c <HAL_RCC_GetHCLKFreq>
 8021de2:	4601      	mov	r1, r0
 8021de4:	4b0b      	ldr	r3, [pc, #44]	; (8021e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8021de6:	685b      	ldr	r3, [r3, #4]
 8021de8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8021dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8021df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021df2:	687a      	ldr	r2, [r7, #4]
 8021df4:	fa92 f2a2 	rbit	r2, r2
 8021df8:	603a      	str	r2, [r7, #0]
  return result;
 8021dfa:	683a      	ldr	r2, [r7, #0]
 8021dfc:	fab2 f282 	clz	r2, r2
 8021e00:	b2d2      	uxtb	r2, r2
 8021e02:	40d3      	lsrs	r3, r2
 8021e04:	4a04      	ldr	r2, [pc, #16]	; (8021e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8021e06:	5cd3      	ldrb	r3, [r2, r3]
 8021e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8021e0c:	4618      	mov	r0, r3
 8021e0e:	3708      	adds	r7, #8
 8021e10:	46bd      	mov	sp, r7
 8021e12:	bd80      	pop	{r7, pc}
 8021e14:	40021000 	.word	0x40021000
 8021e18:	080229a0 	.word	0x080229a0

08021e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b092      	sub	sp, #72	; 0x48
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8021e24:	2300      	movs	r3, #0
 8021e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8021e28:	2300      	movs	r3, #0
 8021e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	681b      	ldr	r3, [r3, #0]
 8021e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	f000 80d7 	beq.w	8021fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021e40:	4b4e      	ldr	r3, [pc, #312]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021e42:	69db      	ldr	r3, [r3, #28]
 8021e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d10e      	bne.n	8021e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8021e4c:	4b4b      	ldr	r3, [pc, #300]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021e4e:	69db      	ldr	r3, [r3, #28]
 8021e50:	4a4a      	ldr	r2, [pc, #296]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021e56:	61d3      	str	r3, [r2, #28]
 8021e58:	4b48      	ldr	r3, [pc, #288]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021e5a:	69db      	ldr	r3, [r3, #28]
 8021e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021e60:	60bb      	str	r3, [r7, #8]
 8021e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8021e64:	2301      	movs	r3, #1
 8021e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021e6a:	4b45      	ldr	r3, [pc, #276]	; (8021f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d118      	bne.n	8021ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021e76:	4b42      	ldr	r3, [pc, #264]	; (8021f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	4a41      	ldr	r2, [pc, #260]	; (8021f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8021e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021e80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021e82:	f7fe fbef 	bl	8020664 <HAL_GetTick>
 8021e86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021e88:	e008      	b.n	8021e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021e8a:	f7fe fbeb 	bl	8020664 <HAL_GetTick>
 8021e8e:	4602      	mov	r2, r0
 8021e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021e92:	1ad3      	subs	r3, r2, r3
 8021e94:	2b64      	cmp	r3, #100	; 0x64
 8021e96:	d901      	bls.n	8021e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8021e98:	2303      	movs	r3, #3
 8021e9a:	e169      	b.n	8022170 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021e9c:	4b38      	ldr	r3, [pc, #224]	; (8021f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8021e9e:	681b      	ldr	r3, [r3, #0]
 8021ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d0f0      	beq.n	8021e8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8021ea8:	4b34      	ldr	r3, [pc, #208]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021eaa:	6a1b      	ldr	r3, [r3, #32]
 8021eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8021eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021eb4:	2b00      	cmp	r3, #0
 8021eb6:	f000 8084 	beq.w	8021fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	685b      	ldr	r3, [r3, #4]
 8021ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d07c      	beq.n	8021fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8021ec8:	4b2c      	ldr	r3, [pc, #176]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021eca:	6a1b      	ldr	r3, [r3, #32]
 8021ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8021ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021ed6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021eda:	fa93 f3a3 	rbit	r3, r3
 8021ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8021ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8021ee2:	fab3 f383 	clz	r3, r3
 8021ee6:	b2db      	uxtb	r3, r3
 8021ee8:	461a      	mov	r2, r3
 8021eea:	4b26      	ldr	r3, [pc, #152]	; (8021f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8021eec:	4413      	add	r3, r2
 8021eee:	009b      	lsls	r3, r3, #2
 8021ef0:	461a      	mov	r2, r3
 8021ef2:	2301      	movs	r3, #1
 8021ef4:	6013      	str	r3, [r2, #0]
 8021ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021efa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021efe:	fa93 f3a3 	rbit	r3, r3
 8021f02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8021f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8021f06:	fab3 f383 	clz	r3, r3
 8021f0a:	b2db      	uxtb	r3, r3
 8021f0c:	461a      	mov	r2, r3
 8021f0e:	4b1d      	ldr	r3, [pc, #116]	; (8021f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8021f10:	4413      	add	r3, r2
 8021f12:	009b      	lsls	r3, r3, #2
 8021f14:	461a      	mov	r2, r3
 8021f16:	2300      	movs	r3, #0
 8021f18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8021f1a:	4a18      	ldr	r2, [pc, #96]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021f1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8021f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021f22:	f003 0301 	and.w	r3, r3, #1
 8021f26:	2b00      	cmp	r3, #0
 8021f28:	d04b      	beq.n	8021fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8021f2a:	f7fe fb9b 	bl	8020664 <HAL_GetTick>
 8021f2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021f30:	e00a      	b.n	8021f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021f32:	f7fe fb97 	bl	8020664 <HAL_GetTick>
 8021f36:	4602      	mov	r2, r0
 8021f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021f3a:	1ad3      	subs	r3, r2, r3
 8021f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8021f40:	4293      	cmp	r3, r2
 8021f42:	d901      	bls.n	8021f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8021f44:	2303      	movs	r3, #3
 8021f46:	e113      	b.n	8022170 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8021f48:	2302      	movs	r3, #2
 8021f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f4e:	fa93 f3a3 	rbit	r3, r3
 8021f52:	627b      	str	r3, [r7, #36]	; 0x24
 8021f54:	2302      	movs	r3, #2
 8021f56:	623b      	str	r3, [r7, #32]
 8021f58:	6a3b      	ldr	r3, [r7, #32]
 8021f5a:	fa93 f3a3 	rbit	r3, r3
 8021f5e:	61fb      	str	r3, [r7, #28]
  return result;
 8021f60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021f62:	fab3 f383 	clz	r3, r3
 8021f66:	b2db      	uxtb	r3, r3
 8021f68:	095b      	lsrs	r3, r3, #5
 8021f6a:	b2db      	uxtb	r3, r3
 8021f6c:	f043 0302 	orr.w	r3, r3, #2
 8021f70:	b2db      	uxtb	r3, r3
 8021f72:	2b02      	cmp	r3, #2
 8021f74:	d108      	bne.n	8021f88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8021f76:	4b01      	ldr	r3, [pc, #4]	; (8021f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8021f78:	6a1b      	ldr	r3, [r3, #32]
 8021f7a:	e00d      	b.n	8021f98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8021f7c:	40021000 	.word	0x40021000
 8021f80:	40007000 	.word	0x40007000
 8021f84:	10908100 	.word	0x10908100
 8021f88:	2302      	movs	r3, #2
 8021f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021f8c:	69bb      	ldr	r3, [r7, #24]
 8021f8e:	fa93 f3a3 	rbit	r3, r3
 8021f92:	617b      	str	r3, [r7, #20]
 8021f94:	4b78      	ldr	r3, [pc, #480]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021f98:	2202      	movs	r2, #2
 8021f9a:	613a      	str	r2, [r7, #16]
 8021f9c:	693a      	ldr	r2, [r7, #16]
 8021f9e:	fa92 f2a2 	rbit	r2, r2
 8021fa2:	60fa      	str	r2, [r7, #12]
  return result;
 8021fa4:	68fa      	ldr	r2, [r7, #12]
 8021fa6:	fab2 f282 	clz	r2, r2
 8021faa:	b2d2      	uxtb	r2, r2
 8021fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021fb0:	b2d2      	uxtb	r2, r2
 8021fb2:	f002 021f 	and.w	r2, r2, #31
 8021fb6:	2101      	movs	r1, #1
 8021fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8021fbc:	4013      	ands	r3, r2
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d0b7      	beq.n	8021f32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8021fc2:	4b6d      	ldr	r3, [pc, #436]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021fc4:	6a1b      	ldr	r3, [r3, #32]
 8021fc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	685b      	ldr	r3, [r3, #4]
 8021fce:	496a      	ldr	r1, [pc, #424]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021fd0:	4313      	orrs	r3, r2
 8021fd2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8021fd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8021fd8:	2b01      	cmp	r3, #1
 8021fda:	d105      	bne.n	8021fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021fdc:	4b66      	ldr	r3, [pc, #408]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021fde:	69db      	ldr	r3, [r3, #28]
 8021fe0:	4a65      	ldr	r2, [pc, #404]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021fe6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	f003 0301 	and.w	r3, r3, #1
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d008      	beq.n	8022006 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8021ff4:	4b60      	ldr	r3, [pc, #384]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8021ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ff8:	f023 0203 	bic.w	r2, r3, #3
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	689b      	ldr	r3, [r3, #8]
 8022000:	495d      	ldr	r1, [pc, #372]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022002:	4313      	orrs	r3, r2
 8022004:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	681b      	ldr	r3, [r3, #0]
 802200a:	f003 0302 	and.w	r3, r3, #2
 802200e:	2b00      	cmp	r3, #0
 8022010:	d008      	beq.n	8022024 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8022012:	4b59      	ldr	r3, [pc, #356]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022016:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	68db      	ldr	r3, [r3, #12]
 802201e:	4956      	ldr	r1, [pc, #344]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022020:	4313      	orrs	r3, r2
 8022022:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	681b      	ldr	r3, [r3, #0]
 8022028:	f003 0304 	and.w	r3, r3, #4
 802202c:	2b00      	cmp	r3, #0
 802202e:	d008      	beq.n	8022042 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8022030:	4b51      	ldr	r3, [pc, #324]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8022038:	687b      	ldr	r3, [r7, #4]
 802203a:	691b      	ldr	r3, [r3, #16]
 802203c:	494e      	ldr	r1, [pc, #312]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802203e:	4313      	orrs	r3, r2
 8022040:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022042:	687b      	ldr	r3, [r7, #4]
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	f003 0320 	and.w	r3, r3, #32
 802204a:	2b00      	cmp	r3, #0
 802204c:	d008      	beq.n	8022060 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 802204e:	4b4a      	ldr	r3, [pc, #296]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022052:	f023 0210 	bic.w	r2, r3, #16
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	69db      	ldr	r3, [r3, #28]
 802205a:	4947      	ldr	r1, [pc, #284]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802205c:	4313      	orrs	r3, r2
 802205e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8022060:	687b      	ldr	r3, [r7, #4]
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022068:	2b00      	cmp	r3, #0
 802206a:	d008      	beq.n	802207e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 802206c:	4b42      	ldr	r3, [pc, #264]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802206e:	685b      	ldr	r3, [r3, #4]
 8022070:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8022074:	687b      	ldr	r3, [r7, #4]
 8022076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022078:	493f      	ldr	r1, [pc, #252]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802207a:	4313      	orrs	r3, r2
 802207c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022086:	2b00      	cmp	r3, #0
 8022088:	d008      	beq.n	802209c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 802208a:	4b3b      	ldr	r3, [pc, #236]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802208e:	f023 0220 	bic.w	r2, r3, #32
 8022092:	687b      	ldr	r3, [r7, #4]
 8022094:	6a1b      	ldr	r3, [r3, #32]
 8022096:	4938      	ldr	r1, [pc, #224]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022098:	4313      	orrs	r3, r2
 802209a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 802209c:	687b      	ldr	r3, [r7, #4]
 802209e:	681b      	ldr	r3, [r3, #0]
 80220a0:	f003 0308 	and.w	r3, r3, #8
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	d008      	beq.n	80220ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80220a8:	4b33      	ldr	r3, [pc, #204]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	695b      	ldr	r3, [r3, #20]
 80220b4:	4930      	ldr	r1, [pc, #192]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220b6:	4313      	orrs	r3, r2
 80220b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	f003 0310 	and.w	r3, r3, #16
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d008      	beq.n	80220d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80220c6:	4b2c      	ldr	r3, [pc, #176]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80220ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	699b      	ldr	r3, [r3, #24]
 80220d2:	4929      	ldr	r1, [pc, #164]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220d4:	4313      	orrs	r3, r2
 80220d6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	681b      	ldr	r3, [r3, #0]
 80220dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d008      	beq.n	80220f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80220e4:	4b24      	ldr	r3, [pc, #144]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220e6:	685b      	ldr	r3, [r3, #4]
 80220e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80220ec:	687b      	ldr	r3, [r7, #4]
 80220ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220f0:	4921      	ldr	r1, [pc, #132]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80220f2:	4313      	orrs	r3, r2
 80220f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	681b      	ldr	r3, [r3, #0]
 80220fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d008      	beq.n	8022114 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8022102:	4b1d      	ldr	r3, [pc, #116]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022106:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802210e:	491a      	ldr	r1, [pc, #104]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022110:	4313      	orrs	r3, r2
 8022112:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8022114:	687b      	ldr	r3, [r7, #4]
 8022116:	681b      	ldr	r3, [r3, #0]
 8022118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802211c:	2b00      	cmp	r3, #0
 802211e:	d008      	beq.n	8022132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8022120:	4b15      	ldr	r3, [pc, #84]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022124:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8022128:	687b      	ldr	r3, [r7, #4]
 802212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802212c:	4912      	ldr	r1, [pc, #72]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802212e:	4313      	orrs	r3, r2
 8022130:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8022132:	687b      	ldr	r3, [r7, #4]
 8022134:	681b      	ldr	r3, [r3, #0]
 8022136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802213a:	2b00      	cmp	r3, #0
 802213c:	d008      	beq.n	8022150 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 802213e:	4b0e      	ldr	r3, [pc, #56]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8022140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802214a:	490b      	ldr	r1, [pc, #44]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802214c:	4313      	orrs	r3, r2
 802214e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8022150:	687b      	ldr	r3, [r7, #4]
 8022152:	681b      	ldr	r3, [r3, #0]
 8022154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022158:	2b00      	cmp	r3, #0
 802215a:	d008      	beq.n	802216e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 802215c:	4b06      	ldr	r3, [pc, #24]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022160:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022168:	4903      	ldr	r1, [pc, #12]	; (8022178 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 802216a:	4313      	orrs	r3, r2
 802216c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 802216e:	2300      	movs	r3, #0
}
 8022170:	4618      	mov	r0, r3
 8022172:	3748      	adds	r7, #72	; 0x48
 8022174:	46bd      	mov	sp, r7
 8022176:	bd80      	pop	{r7, pc}
 8022178:	40021000 	.word	0x40021000

0802217c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802217c:	b580      	push	{r7, lr}
 802217e:	b082      	sub	sp, #8
 8022180:	af00      	add	r7, sp, #0
 8022182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022184:	687b      	ldr	r3, [r7, #4]
 8022186:	2b00      	cmp	r3, #0
 8022188:	d101      	bne.n	802218e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802218a:	2301      	movs	r3, #1
 802218c:	e040      	b.n	8022210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022192:	2b00      	cmp	r3, #0
 8022194:	d106      	bne.n	80221a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	2200      	movs	r2, #0
 802219a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802219e:	6878      	ldr	r0, [r7, #4]
 80221a0:	f7fe f954 	bl	802044c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	2224      	movs	r2, #36	; 0x24
 80221a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	681a      	ldr	r2, [r3, #0]
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	681b      	ldr	r3, [r3, #0]
 80221b4:	f022 0201 	bic.w	r2, r2, #1
 80221b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80221ba:	6878      	ldr	r0, [r7, #4]
 80221bc:	f000 f82c 	bl	8022218 <UART_SetConfig>
 80221c0:	4603      	mov	r3, r0
 80221c2:	2b01      	cmp	r3, #1
 80221c4:	d101      	bne.n	80221ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80221c6:	2301      	movs	r3, #1
 80221c8:	e022      	b.n	8022210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d002      	beq.n	80221d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80221d2:	6878      	ldr	r0, [r7, #4]
 80221d4:	f000 fa3a 	bl	802264c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	681b      	ldr	r3, [r3, #0]
 80221dc:	685a      	ldr	r2, [r3, #4]
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80221e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	681b      	ldr	r3, [r3, #0]
 80221ec:	689a      	ldr	r2, [r3, #8]
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80221f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	681a      	ldr	r2, [r3, #0]
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	f042 0201 	orr.w	r2, r2, #1
 8022206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022208:	6878      	ldr	r0, [r7, #4]
 802220a:	f000 fac1 	bl	8022790 <UART_CheckIdleState>
 802220e:	4603      	mov	r3, r0
}
 8022210:	4618      	mov	r0, r3
 8022212:	3708      	adds	r7, #8
 8022214:	46bd      	mov	sp, r7
 8022216:	bd80      	pop	{r7, pc}

08022218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022218:	b580      	push	{r7, lr}
 802221a:	b088      	sub	sp, #32
 802221c:	af00      	add	r7, sp, #0
 802221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8022220:	2300      	movs	r3, #0
 8022222:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8022224:	2300      	movs	r3, #0
 8022226:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022228:	687b      	ldr	r3, [r7, #4]
 802222a:	689a      	ldr	r2, [r3, #8]
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	691b      	ldr	r3, [r3, #16]
 8022230:	431a      	orrs	r2, r3
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	695b      	ldr	r3, [r3, #20]
 8022236:	431a      	orrs	r2, r3
 8022238:	687b      	ldr	r3, [r7, #4]
 802223a:	69db      	ldr	r3, [r3, #28]
 802223c:	4313      	orrs	r3, r2
 802223e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	681b      	ldr	r3, [r3, #0]
 8022246:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 802224a:	f023 030c 	bic.w	r3, r3, #12
 802224e:	687a      	ldr	r2, [r7, #4]
 8022250:	6812      	ldr	r2, [r2, #0]
 8022252:	6939      	ldr	r1, [r7, #16]
 8022254:	430b      	orrs	r3, r1
 8022256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	685b      	ldr	r3, [r3, #4]
 802225e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	68da      	ldr	r2, [r3, #12]
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	430a      	orrs	r2, r1
 802226c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	699b      	ldr	r3, [r3, #24]
 8022272:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	6a1b      	ldr	r3, [r3, #32]
 8022278:	693a      	ldr	r2, [r7, #16]
 802227a:	4313      	orrs	r3, r2
 802227c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	681b      	ldr	r3, [r3, #0]
 8022282:	689b      	ldr	r3, [r3, #8]
 8022284:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8022288:	687b      	ldr	r3, [r7, #4]
 802228a:	681b      	ldr	r3, [r3, #0]
 802228c:	693a      	ldr	r2, [r7, #16]
 802228e:	430a      	orrs	r2, r1
 8022290:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022292:	687b      	ldr	r3, [r7, #4]
 8022294:	681b      	ldr	r3, [r3, #0]
 8022296:	4aa9      	ldr	r2, [pc, #676]	; (802253c <UART_SetConfig+0x324>)
 8022298:	4293      	cmp	r3, r2
 802229a:	d121      	bne.n	80222e0 <UART_SetConfig+0xc8>
 802229c:	4ba8      	ldr	r3, [pc, #672]	; (8022540 <UART_SetConfig+0x328>)
 802229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222a0:	f003 0303 	and.w	r3, r3, #3
 80222a4:	2b03      	cmp	r3, #3
 80222a6:	d817      	bhi.n	80222d8 <UART_SetConfig+0xc0>
 80222a8:	a201      	add	r2, pc, #4	; (adr r2, 80222b0 <UART_SetConfig+0x98>)
 80222aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80222ae:	bf00      	nop
 80222b0:	080222c1 	.word	0x080222c1
 80222b4:	080222cd 	.word	0x080222cd
 80222b8:	080222d3 	.word	0x080222d3
 80222bc:	080222c7 	.word	0x080222c7
 80222c0:	2301      	movs	r3, #1
 80222c2:	77fb      	strb	r3, [r7, #31]
 80222c4:	e0b2      	b.n	802242c <UART_SetConfig+0x214>
 80222c6:	2302      	movs	r3, #2
 80222c8:	77fb      	strb	r3, [r7, #31]
 80222ca:	e0af      	b.n	802242c <UART_SetConfig+0x214>
 80222cc:	2304      	movs	r3, #4
 80222ce:	77fb      	strb	r3, [r7, #31]
 80222d0:	e0ac      	b.n	802242c <UART_SetConfig+0x214>
 80222d2:	2308      	movs	r3, #8
 80222d4:	77fb      	strb	r3, [r7, #31]
 80222d6:	e0a9      	b.n	802242c <UART_SetConfig+0x214>
 80222d8:	2310      	movs	r3, #16
 80222da:	77fb      	strb	r3, [r7, #31]
 80222dc:	bf00      	nop
 80222de:	e0a5      	b.n	802242c <UART_SetConfig+0x214>
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	681b      	ldr	r3, [r3, #0]
 80222e4:	4a97      	ldr	r2, [pc, #604]	; (8022544 <UART_SetConfig+0x32c>)
 80222e6:	4293      	cmp	r3, r2
 80222e8:	d123      	bne.n	8022332 <UART_SetConfig+0x11a>
 80222ea:	4b95      	ldr	r3, [pc, #596]	; (8022540 <UART_SetConfig+0x328>)
 80222ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80222f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80222f6:	d012      	beq.n	802231e <UART_SetConfig+0x106>
 80222f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80222fc:	d802      	bhi.n	8022304 <UART_SetConfig+0xec>
 80222fe:	2b00      	cmp	r3, #0
 8022300:	d007      	beq.n	8022312 <UART_SetConfig+0xfa>
 8022302:	e012      	b.n	802232a <UART_SetConfig+0x112>
 8022304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8022308:	d00c      	beq.n	8022324 <UART_SetConfig+0x10c>
 802230a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802230e:	d003      	beq.n	8022318 <UART_SetConfig+0x100>
 8022310:	e00b      	b.n	802232a <UART_SetConfig+0x112>
 8022312:	2300      	movs	r3, #0
 8022314:	77fb      	strb	r3, [r7, #31]
 8022316:	e089      	b.n	802242c <UART_SetConfig+0x214>
 8022318:	2302      	movs	r3, #2
 802231a:	77fb      	strb	r3, [r7, #31]
 802231c:	e086      	b.n	802242c <UART_SetConfig+0x214>
 802231e:	2304      	movs	r3, #4
 8022320:	77fb      	strb	r3, [r7, #31]
 8022322:	e083      	b.n	802242c <UART_SetConfig+0x214>
 8022324:	2308      	movs	r3, #8
 8022326:	77fb      	strb	r3, [r7, #31]
 8022328:	e080      	b.n	802242c <UART_SetConfig+0x214>
 802232a:	2310      	movs	r3, #16
 802232c:	77fb      	strb	r3, [r7, #31]
 802232e:	bf00      	nop
 8022330:	e07c      	b.n	802242c <UART_SetConfig+0x214>
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	681b      	ldr	r3, [r3, #0]
 8022336:	4a84      	ldr	r2, [pc, #528]	; (8022548 <UART_SetConfig+0x330>)
 8022338:	4293      	cmp	r3, r2
 802233a:	d123      	bne.n	8022384 <UART_SetConfig+0x16c>
 802233c:	4b80      	ldr	r3, [pc, #512]	; (8022540 <UART_SetConfig+0x328>)
 802233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022340:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8022344:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8022348:	d012      	beq.n	8022370 <UART_SetConfig+0x158>
 802234a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802234e:	d802      	bhi.n	8022356 <UART_SetConfig+0x13e>
 8022350:	2b00      	cmp	r3, #0
 8022352:	d007      	beq.n	8022364 <UART_SetConfig+0x14c>
 8022354:	e012      	b.n	802237c <UART_SetConfig+0x164>
 8022356:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 802235a:	d00c      	beq.n	8022376 <UART_SetConfig+0x15e>
 802235c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8022360:	d003      	beq.n	802236a <UART_SetConfig+0x152>
 8022362:	e00b      	b.n	802237c <UART_SetConfig+0x164>
 8022364:	2300      	movs	r3, #0
 8022366:	77fb      	strb	r3, [r7, #31]
 8022368:	e060      	b.n	802242c <UART_SetConfig+0x214>
 802236a:	2302      	movs	r3, #2
 802236c:	77fb      	strb	r3, [r7, #31]
 802236e:	e05d      	b.n	802242c <UART_SetConfig+0x214>
 8022370:	2304      	movs	r3, #4
 8022372:	77fb      	strb	r3, [r7, #31]
 8022374:	e05a      	b.n	802242c <UART_SetConfig+0x214>
 8022376:	2308      	movs	r3, #8
 8022378:	77fb      	strb	r3, [r7, #31]
 802237a:	e057      	b.n	802242c <UART_SetConfig+0x214>
 802237c:	2310      	movs	r3, #16
 802237e:	77fb      	strb	r3, [r7, #31]
 8022380:	bf00      	nop
 8022382:	e053      	b.n	802242c <UART_SetConfig+0x214>
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	4a70      	ldr	r2, [pc, #448]	; (802254c <UART_SetConfig+0x334>)
 802238a:	4293      	cmp	r3, r2
 802238c:	d123      	bne.n	80223d6 <UART_SetConfig+0x1be>
 802238e:	4b6c      	ldr	r3, [pc, #432]	; (8022540 <UART_SetConfig+0x328>)
 8022390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022392:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8022396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802239a:	d012      	beq.n	80223c2 <UART_SetConfig+0x1aa>
 802239c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80223a0:	d802      	bhi.n	80223a8 <UART_SetConfig+0x190>
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d007      	beq.n	80223b6 <UART_SetConfig+0x19e>
 80223a6:	e012      	b.n	80223ce <UART_SetConfig+0x1b6>
 80223a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80223ac:	d00c      	beq.n	80223c8 <UART_SetConfig+0x1b0>
 80223ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80223b2:	d003      	beq.n	80223bc <UART_SetConfig+0x1a4>
 80223b4:	e00b      	b.n	80223ce <UART_SetConfig+0x1b6>
 80223b6:	2300      	movs	r3, #0
 80223b8:	77fb      	strb	r3, [r7, #31]
 80223ba:	e037      	b.n	802242c <UART_SetConfig+0x214>
 80223bc:	2302      	movs	r3, #2
 80223be:	77fb      	strb	r3, [r7, #31]
 80223c0:	e034      	b.n	802242c <UART_SetConfig+0x214>
 80223c2:	2304      	movs	r3, #4
 80223c4:	77fb      	strb	r3, [r7, #31]
 80223c6:	e031      	b.n	802242c <UART_SetConfig+0x214>
 80223c8:	2308      	movs	r3, #8
 80223ca:	77fb      	strb	r3, [r7, #31]
 80223cc:	e02e      	b.n	802242c <UART_SetConfig+0x214>
 80223ce:	2310      	movs	r3, #16
 80223d0:	77fb      	strb	r3, [r7, #31]
 80223d2:	bf00      	nop
 80223d4:	e02a      	b.n	802242c <UART_SetConfig+0x214>
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	681b      	ldr	r3, [r3, #0]
 80223da:	4a5d      	ldr	r2, [pc, #372]	; (8022550 <UART_SetConfig+0x338>)
 80223dc:	4293      	cmp	r3, r2
 80223de:	d123      	bne.n	8022428 <UART_SetConfig+0x210>
 80223e0:	4b57      	ldr	r3, [pc, #348]	; (8022540 <UART_SetConfig+0x328>)
 80223e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80223e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80223e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80223ec:	d012      	beq.n	8022414 <UART_SetConfig+0x1fc>
 80223ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80223f2:	d802      	bhi.n	80223fa <UART_SetConfig+0x1e2>
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d007      	beq.n	8022408 <UART_SetConfig+0x1f0>
 80223f8:	e012      	b.n	8022420 <UART_SetConfig+0x208>
 80223fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80223fe:	d00c      	beq.n	802241a <UART_SetConfig+0x202>
 8022400:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8022404:	d003      	beq.n	802240e <UART_SetConfig+0x1f6>
 8022406:	e00b      	b.n	8022420 <UART_SetConfig+0x208>
 8022408:	2300      	movs	r3, #0
 802240a:	77fb      	strb	r3, [r7, #31]
 802240c:	e00e      	b.n	802242c <UART_SetConfig+0x214>
 802240e:	2302      	movs	r3, #2
 8022410:	77fb      	strb	r3, [r7, #31]
 8022412:	e00b      	b.n	802242c <UART_SetConfig+0x214>
 8022414:	2304      	movs	r3, #4
 8022416:	77fb      	strb	r3, [r7, #31]
 8022418:	e008      	b.n	802242c <UART_SetConfig+0x214>
 802241a:	2308      	movs	r3, #8
 802241c:	77fb      	strb	r3, [r7, #31]
 802241e:	e005      	b.n	802242c <UART_SetConfig+0x214>
 8022420:	2310      	movs	r3, #16
 8022422:	77fb      	strb	r3, [r7, #31]
 8022424:	bf00      	nop
 8022426:	e001      	b.n	802242c <UART_SetConfig+0x214>
 8022428:	2310      	movs	r3, #16
 802242a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	69db      	ldr	r3, [r3, #28]
 8022430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8022434:	f040 808e 	bne.w	8022554 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8022438:	7ffb      	ldrb	r3, [r7, #31]
 802243a:	2b08      	cmp	r3, #8
 802243c:	d85e      	bhi.n	80224fc <UART_SetConfig+0x2e4>
 802243e:	a201      	add	r2, pc, #4	; (adr r2, 8022444 <UART_SetConfig+0x22c>)
 8022440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022444:	08022469 	.word	0x08022469
 8022448:	08022489 	.word	0x08022489
 802244c:	080224a9 	.word	0x080224a9
 8022450:	080224fd 	.word	0x080224fd
 8022454:	080224c5 	.word	0x080224c5
 8022458:	080224fd 	.word	0x080224fd
 802245c:	080224fd 	.word	0x080224fd
 8022460:	080224fd 	.word	0x080224fd
 8022464:	080224e5 	.word	0x080224e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022468:	f7ff fc94 	bl	8021d94 <HAL_RCC_GetPCLK1Freq>
 802246c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 802246e:	68fb      	ldr	r3, [r7, #12]
 8022470:	005a      	lsls	r2, r3, #1
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	685b      	ldr	r3, [r3, #4]
 8022476:	085b      	lsrs	r3, r3, #1
 8022478:	441a      	add	r2, r3
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	685b      	ldr	r3, [r3, #4]
 802247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8022482:	b29b      	uxth	r3, r3
 8022484:	61bb      	str	r3, [r7, #24]
        break;
 8022486:	e03c      	b.n	8022502 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8022488:	f7ff fca6 	bl	8021dd8 <HAL_RCC_GetPCLK2Freq>
 802248c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 802248e:	68fb      	ldr	r3, [r7, #12]
 8022490:	005a      	lsls	r2, r3, #1
 8022492:	687b      	ldr	r3, [r7, #4]
 8022494:	685b      	ldr	r3, [r3, #4]
 8022496:	085b      	lsrs	r3, r3, #1
 8022498:	441a      	add	r2, r3
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	685b      	ldr	r3, [r3, #4]
 802249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80224a2:	b29b      	uxth	r3, r3
 80224a4:	61bb      	str	r3, [r7, #24]
        break;
 80224a6:	e02c      	b.n	8022502 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	685b      	ldr	r3, [r3, #4]
 80224ac:	085b      	lsrs	r3, r3, #1
 80224ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80224b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80224b6:	687a      	ldr	r2, [r7, #4]
 80224b8:	6852      	ldr	r2, [r2, #4]
 80224ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80224be:	b29b      	uxth	r3, r3
 80224c0:	61bb      	str	r3, [r7, #24]
        break;
 80224c2:	e01e      	b.n	8022502 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80224c4:	f7ff fbf0 	bl	8021ca8 <HAL_RCC_GetSysClockFreq>
 80224c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80224ca:	68fb      	ldr	r3, [r7, #12]
 80224cc:	005a      	lsls	r2, r3, #1
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	685b      	ldr	r3, [r3, #4]
 80224d2:	085b      	lsrs	r3, r3, #1
 80224d4:	441a      	add	r2, r3
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	685b      	ldr	r3, [r3, #4]
 80224da:	fbb2 f3f3 	udiv	r3, r2, r3
 80224de:	b29b      	uxth	r3, r3
 80224e0:	61bb      	str	r3, [r7, #24]
        break;
 80224e2:	e00e      	b.n	8022502 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	685b      	ldr	r3, [r3, #4]
 80224e8:	085b      	lsrs	r3, r3, #1
 80224ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	685b      	ldr	r3, [r3, #4]
 80224f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80224f6:	b29b      	uxth	r3, r3
 80224f8:	61bb      	str	r3, [r7, #24]
        break;
 80224fa:	e002      	b.n	8022502 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 80224fc:	2301      	movs	r3, #1
 80224fe:	75fb      	strb	r3, [r7, #23]
        break;
 8022500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8022502:	69bb      	ldr	r3, [r7, #24]
 8022504:	2b0f      	cmp	r3, #15
 8022506:	d916      	bls.n	8022536 <UART_SetConfig+0x31e>
 8022508:	69bb      	ldr	r3, [r7, #24]
 802250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802250e:	d212      	bcs.n	8022536 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8022510:	69bb      	ldr	r3, [r7, #24]
 8022512:	b29b      	uxth	r3, r3
 8022514:	f023 030f 	bic.w	r3, r3, #15
 8022518:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802251a:	69bb      	ldr	r3, [r7, #24]
 802251c:	085b      	lsrs	r3, r3, #1
 802251e:	b29b      	uxth	r3, r3
 8022520:	f003 0307 	and.w	r3, r3, #7
 8022524:	b29a      	uxth	r2, r3
 8022526:	897b      	ldrh	r3, [r7, #10]
 8022528:	4313      	orrs	r3, r2
 802252a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	897a      	ldrh	r2, [r7, #10]
 8022532:	60da      	str	r2, [r3, #12]
 8022534:	e07e      	b.n	8022634 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8022536:	2301      	movs	r3, #1
 8022538:	75fb      	strb	r3, [r7, #23]
 802253a:	e07b      	b.n	8022634 <UART_SetConfig+0x41c>
 802253c:	40013800 	.word	0x40013800
 8022540:	40021000 	.word	0x40021000
 8022544:	40004400 	.word	0x40004400
 8022548:	40004800 	.word	0x40004800
 802254c:	40004c00 	.word	0x40004c00
 8022550:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8022554:	7ffb      	ldrb	r3, [r7, #31]
 8022556:	2b08      	cmp	r3, #8
 8022558:	d85b      	bhi.n	8022612 <UART_SetConfig+0x3fa>
 802255a:	a201      	add	r2, pc, #4	; (adr r2, 8022560 <UART_SetConfig+0x348>)
 802255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022560:	08022585 	.word	0x08022585
 8022564:	080225a3 	.word	0x080225a3
 8022568:	080225c1 	.word	0x080225c1
 802256c:	08022613 	.word	0x08022613
 8022570:	080225dd 	.word	0x080225dd
 8022574:	08022613 	.word	0x08022613
 8022578:	08022613 	.word	0x08022613
 802257c:	08022613 	.word	0x08022613
 8022580:	080225fb 	.word	0x080225fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022584:	f7ff fc06 	bl	8021d94 <HAL_RCC_GetPCLK1Freq>
 8022588:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	685b      	ldr	r3, [r3, #4]
 802258e:	085a      	lsrs	r2, r3, #1
 8022590:	68fb      	ldr	r3, [r7, #12]
 8022592:	441a      	add	r2, r3
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	685b      	ldr	r3, [r3, #4]
 8022598:	fbb2 f3f3 	udiv	r3, r2, r3
 802259c:	b29b      	uxth	r3, r3
 802259e:	61bb      	str	r3, [r7, #24]
        break;
 80225a0:	e03a      	b.n	8022618 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80225a2:	f7ff fc19 	bl	8021dd8 <HAL_RCC_GetPCLK2Freq>
 80225a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	685b      	ldr	r3, [r3, #4]
 80225ac:	085a      	lsrs	r2, r3, #1
 80225ae:	68fb      	ldr	r3, [r7, #12]
 80225b0:	441a      	add	r2, r3
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	685b      	ldr	r3, [r3, #4]
 80225b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80225ba:	b29b      	uxth	r3, r3
 80225bc:	61bb      	str	r3, [r7, #24]
        break;
 80225be:	e02b      	b.n	8022618 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	685b      	ldr	r3, [r3, #4]
 80225c4:	085b      	lsrs	r3, r3, #1
 80225c6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80225ca:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80225ce:	687a      	ldr	r2, [r7, #4]
 80225d0:	6852      	ldr	r2, [r2, #4]
 80225d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80225d6:	b29b      	uxth	r3, r3
 80225d8:	61bb      	str	r3, [r7, #24]
        break;
 80225da:	e01d      	b.n	8022618 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80225dc:	f7ff fb64 	bl	8021ca8 <HAL_RCC_GetSysClockFreq>
 80225e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	685b      	ldr	r3, [r3, #4]
 80225e6:	085a      	lsrs	r2, r3, #1
 80225e8:	68fb      	ldr	r3, [r7, #12]
 80225ea:	441a      	add	r2, r3
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	685b      	ldr	r3, [r3, #4]
 80225f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80225f4:	b29b      	uxth	r3, r3
 80225f6:	61bb      	str	r3, [r7, #24]
        break;
 80225f8:	e00e      	b.n	8022618 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	685b      	ldr	r3, [r3, #4]
 80225fe:	085b      	lsrs	r3, r3, #1
 8022600:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	685b      	ldr	r3, [r3, #4]
 8022608:	fbb2 f3f3 	udiv	r3, r2, r3
 802260c:	b29b      	uxth	r3, r3
 802260e:	61bb      	str	r3, [r7, #24]
        break;
 8022610:	e002      	b.n	8022618 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8022612:	2301      	movs	r3, #1
 8022614:	75fb      	strb	r3, [r7, #23]
        break;
 8022616:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8022618:	69bb      	ldr	r3, [r7, #24]
 802261a:	2b0f      	cmp	r3, #15
 802261c:	d908      	bls.n	8022630 <UART_SetConfig+0x418>
 802261e:	69bb      	ldr	r3, [r7, #24]
 8022620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022624:	d204      	bcs.n	8022630 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	69ba      	ldr	r2, [r7, #24]
 802262c:	60da      	str	r2, [r3, #12]
 802262e:	e001      	b.n	8022634 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8022630:	2301      	movs	r3, #1
 8022632:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	2200      	movs	r2, #0
 8022638:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 802263a:	687b      	ldr	r3, [r7, #4]
 802263c:	2200      	movs	r2, #0
 802263e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8022640:	7dfb      	ldrb	r3, [r7, #23]
}
 8022642:	4618      	mov	r0, r3
 8022644:	3720      	adds	r7, #32
 8022646:	46bd      	mov	sp, r7
 8022648:	bd80      	pop	{r7, pc}
 802264a:	bf00      	nop

0802264c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 802264c:	b480      	push	{r7}
 802264e:	b083      	sub	sp, #12
 8022650:	af00      	add	r7, sp, #0
 8022652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022658:	f003 0301 	and.w	r3, r3, #1
 802265c:	2b00      	cmp	r3, #0
 802265e:	d00a      	beq.n	8022676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	685b      	ldr	r3, [r3, #4]
 8022666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	681b      	ldr	r3, [r3, #0]
 8022672:	430a      	orrs	r2, r1
 8022674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802267a:	f003 0302 	and.w	r3, r3, #2
 802267e:	2b00      	cmp	r3, #0
 8022680:	d00a      	beq.n	8022698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8022682:	687b      	ldr	r3, [r7, #4]
 8022684:	681b      	ldr	r3, [r3, #0]
 8022686:	685b      	ldr	r3, [r3, #4]
 8022688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	681b      	ldr	r3, [r3, #0]
 8022694:	430a      	orrs	r2, r1
 8022696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802269c:	f003 0304 	and.w	r3, r3, #4
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	d00a      	beq.n	80226ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80226a4:	687b      	ldr	r3, [r7, #4]
 80226a6:	681b      	ldr	r3, [r3, #0]
 80226a8:	685b      	ldr	r3, [r3, #4]
 80226aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80226ae:	687b      	ldr	r3, [r7, #4]
 80226b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	430a      	orrs	r2, r1
 80226b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80226ba:	687b      	ldr	r3, [r7, #4]
 80226bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80226be:	f003 0308 	and.w	r3, r3, #8
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d00a      	beq.n	80226dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	681b      	ldr	r3, [r3, #0]
 80226ca:	685b      	ldr	r3, [r3, #4]
 80226cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	681b      	ldr	r3, [r3, #0]
 80226d8:	430a      	orrs	r2, r1
 80226da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80226e0:	f003 0310 	and.w	r3, r3, #16
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d00a      	beq.n	80226fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	681b      	ldr	r3, [r3, #0]
 80226ec:	689b      	ldr	r3, [r3, #8]
 80226ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	681b      	ldr	r3, [r3, #0]
 80226fa:	430a      	orrs	r2, r1
 80226fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022702:	f003 0320 	and.w	r3, r3, #32
 8022706:	2b00      	cmp	r3, #0
 8022708:	d00a      	beq.n	8022720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	681b      	ldr	r3, [r3, #0]
 802270e:	689b      	ldr	r3, [r3, #8]
 8022710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	681b      	ldr	r3, [r3, #0]
 802271c:	430a      	orrs	r2, r1
 802271e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022728:	2b00      	cmp	r3, #0
 802272a:	d01a      	beq.n	8022762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	685b      	ldr	r3, [r3, #4]
 8022732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	430a      	orrs	r2, r1
 8022740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802274a:	d10a      	bne.n	8022762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	681b      	ldr	r3, [r3, #0]
 8022750:	685b      	ldr	r3, [r3, #4]
 8022752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8022756:	687b      	ldr	r3, [r7, #4]
 8022758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	430a      	orrs	r2, r1
 8022760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8022762:	687b      	ldr	r3, [r7, #4]
 8022764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802276a:	2b00      	cmp	r3, #0
 802276c:	d00a      	beq.n	8022784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	681b      	ldr	r3, [r3, #0]
 8022772:	685b      	ldr	r3, [r3, #4]
 8022774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	681b      	ldr	r3, [r3, #0]
 8022780:	430a      	orrs	r2, r1
 8022782:	605a      	str	r2, [r3, #4]
  }
}
 8022784:	bf00      	nop
 8022786:	370c      	adds	r7, #12
 8022788:	46bd      	mov	sp, r7
 802278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802278e:	4770      	bx	lr

08022790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8022790:	b580      	push	{r7, lr}
 8022792:	b086      	sub	sp, #24
 8022794:	af02      	add	r7, sp, #8
 8022796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	2200      	movs	r2, #0
 802279c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 802279e:	f7fd ff61 	bl	8020664 <HAL_GetTick>
 80227a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	681b      	ldr	r3, [r3, #0]
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	f003 0308 	and.w	r3, r3, #8
 80227ae:	2b08      	cmp	r3, #8
 80227b0:	d10e      	bne.n	80227d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80227b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80227b6:	9300      	str	r3, [sp, #0]
 80227b8:	68fb      	ldr	r3, [r7, #12]
 80227ba:	2200      	movs	r2, #0
 80227bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80227c0:	6878      	ldr	r0, [r7, #4]
 80227c2:	f000 f82a 	bl	802281a <UART_WaitOnFlagUntilTimeout>
 80227c6:	4603      	mov	r3, r0
 80227c8:	2b00      	cmp	r3, #0
 80227ca:	d001      	beq.n	80227d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80227cc:	2303      	movs	r3, #3
 80227ce:	e020      	b.n	8022812 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	681b      	ldr	r3, [r3, #0]
 80227d4:	681b      	ldr	r3, [r3, #0]
 80227d6:	f003 0304 	and.w	r3, r3, #4
 80227da:	2b04      	cmp	r3, #4
 80227dc:	d10e      	bne.n	80227fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80227de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80227e2:	9300      	str	r3, [sp, #0]
 80227e4:	68fb      	ldr	r3, [r7, #12]
 80227e6:	2200      	movs	r2, #0
 80227e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80227ec:	6878      	ldr	r0, [r7, #4]
 80227ee:	f000 f814 	bl	802281a <UART_WaitOnFlagUntilTimeout>
 80227f2:	4603      	mov	r3, r0
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d001      	beq.n	80227fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80227f8:	2303      	movs	r3, #3
 80227fa:	e00a      	b.n	8022812 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	2220      	movs	r2, #32
 8022800:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	2220      	movs	r2, #32
 8022806:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	2200      	movs	r2, #0
 802280c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8022810:	2300      	movs	r3, #0
}
 8022812:	4618      	mov	r0, r3
 8022814:	3710      	adds	r7, #16
 8022816:	46bd      	mov	sp, r7
 8022818:	bd80      	pop	{r7, pc}

0802281a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802281a:	b580      	push	{r7, lr}
 802281c:	b084      	sub	sp, #16
 802281e:	af00      	add	r7, sp, #0
 8022820:	60f8      	str	r0, [r7, #12]
 8022822:	60b9      	str	r1, [r7, #8]
 8022824:	603b      	str	r3, [r7, #0]
 8022826:	4613      	mov	r3, r2
 8022828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802282a:	e05d      	b.n	80228e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802282c:	69bb      	ldr	r3, [r7, #24]
 802282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022832:	d059      	beq.n	80228e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022834:	f7fd ff16 	bl	8020664 <HAL_GetTick>
 8022838:	4602      	mov	r2, r0
 802283a:	683b      	ldr	r3, [r7, #0]
 802283c:	1ad3      	subs	r3, r2, r3
 802283e:	69ba      	ldr	r2, [r7, #24]
 8022840:	429a      	cmp	r2, r3
 8022842:	d302      	bcc.n	802284a <UART_WaitOnFlagUntilTimeout+0x30>
 8022844:	69bb      	ldr	r3, [r7, #24]
 8022846:	2b00      	cmp	r3, #0
 8022848:	d11b      	bne.n	8022882 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802284a:	68fb      	ldr	r3, [r7, #12]
 802284c:	681b      	ldr	r3, [r3, #0]
 802284e:	681a      	ldr	r2, [r3, #0]
 8022850:	68fb      	ldr	r3, [r7, #12]
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8022858:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802285a:	68fb      	ldr	r3, [r7, #12]
 802285c:	681b      	ldr	r3, [r3, #0]
 802285e:	689a      	ldr	r2, [r3, #8]
 8022860:	68fb      	ldr	r3, [r7, #12]
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	f022 0201 	bic.w	r2, r2, #1
 8022868:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 802286a:	68fb      	ldr	r3, [r7, #12]
 802286c:	2220      	movs	r2, #32
 802286e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8022870:	68fb      	ldr	r3, [r7, #12]
 8022872:	2220      	movs	r2, #32
 8022874:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8022876:	68fb      	ldr	r3, [r7, #12]
 8022878:	2200      	movs	r2, #0
 802287a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 802287e:	2303      	movs	r3, #3
 8022880:	e042      	b.n	8022908 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	681b      	ldr	r3, [r3, #0]
 8022886:	681b      	ldr	r3, [r3, #0]
 8022888:	f003 0304 	and.w	r3, r3, #4
 802288c:	2b00      	cmp	r3, #0
 802288e:	d02b      	beq.n	80228e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8022890:	68fb      	ldr	r3, [r7, #12]
 8022892:	681b      	ldr	r3, [r3, #0]
 8022894:	69db      	ldr	r3, [r3, #28]
 8022896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802289a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802289e:	d123      	bne.n	80228e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80228a0:	68fb      	ldr	r3, [r7, #12]
 80228a2:	681b      	ldr	r3, [r3, #0]
 80228a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80228a8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80228aa:	68fb      	ldr	r3, [r7, #12]
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	681a      	ldr	r2, [r3, #0]
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80228b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80228ba:	68fb      	ldr	r3, [r7, #12]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	689a      	ldr	r2, [r3, #8]
 80228c0:	68fb      	ldr	r3, [r7, #12]
 80228c2:	681b      	ldr	r3, [r3, #0]
 80228c4:	f022 0201 	bic.w	r2, r2, #1
 80228c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	2220      	movs	r2, #32
 80228ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	2220      	movs	r2, #32
 80228d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80228d6:	68fb      	ldr	r3, [r7, #12]
 80228d8:	2220      	movs	r2, #32
 80228da:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80228dc:	68fb      	ldr	r3, [r7, #12]
 80228de:	2200      	movs	r2, #0
 80228e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80228e4:	2303      	movs	r3, #3
 80228e6:	e00f      	b.n	8022908 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80228e8:	68fb      	ldr	r3, [r7, #12]
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	69da      	ldr	r2, [r3, #28]
 80228ee:	68bb      	ldr	r3, [r7, #8]
 80228f0:	4013      	ands	r3, r2
 80228f2:	68ba      	ldr	r2, [r7, #8]
 80228f4:	429a      	cmp	r2, r3
 80228f6:	bf0c      	ite	eq
 80228f8:	2301      	moveq	r3, #1
 80228fa:	2300      	movne	r3, #0
 80228fc:	b2db      	uxtb	r3, r3
 80228fe:	461a      	mov	r2, r3
 8022900:	79fb      	ldrb	r3, [r7, #7]
 8022902:	429a      	cmp	r2, r3
 8022904:	d092      	beq.n	802282c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8022906:	2300      	movs	r3, #0
}
 8022908:	4618      	mov	r0, r3
 802290a:	3710      	adds	r7, #16
 802290c:	46bd      	mov	sp, r7
 802290e:	bd80      	pop	{r7, pc}

08022910 <__libc_init_array>:
 8022910:	b570      	push	{r4, r5, r6, lr}
 8022912:	4e0d      	ldr	r6, [pc, #52]	; (8022948 <__libc_init_array+0x38>)
 8022914:	4c0d      	ldr	r4, [pc, #52]	; (802294c <__libc_init_array+0x3c>)
 8022916:	1ba4      	subs	r4, r4, r6
 8022918:	10a4      	asrs	r4, r4, #2
 802291a:	2500      	movs	r5, #0
 802291c:	42a5      	cmp	r5, r4
 802291e:	d109      	bne.n	8022934 <__libc_init_array+0x24>
 8022920:	4e0b      	ldr	r6, [pc, #44]	; (8022950 <__libc_init_array+0x40>)
 8022922:	4c0c      	ldr	r4, [pc, #48]	; (8022954 <__libc_init_array+0x44>)
 8022924:	f000 f820 	bl	8022968 <_init>
 8022928:	1ba4      	subs	r4, r4, r6
 802292a:	10a4      	asrs	r4, r4, #2
 802292c:	2500      	movs	r5, #0
 802292e:	42a5      	cmp	r5, r4
 8022930:	d105      	bne.n	802293e <__libc_init_array+0x2e>
 8022932:	bd70      	pop	{r4, r5, r6, pc}
 8022934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022938:	4798      	blx	r3
 802293a:	3501      	adds	r5, #1
 802293c:	e7ee      	b.n	802291c <__libc_init_array+0xc>
 802293e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022942:	4798      	blx	r3
 8022944:	3501      	adds	r5, #1
 8022946:	e7f2      	b.n	802292e <__libc_init_array+0x1e>
 8022948:	080229c8 	.word	0x080229c8
 802294c:	080229c8 	.word	0x080229c8
 8022950:	080229c8 	.word	0x080229c8
 8022954:	080229cc 	.word	0x080229cc

08022958 <memset>:
 8022958:	4402      	add	r2, r0
 802295a:	4603      	mov	r3, r0
 802295c:	4293      	cmp	r3, r2
 802295e:	d100      	bne.n	8022962 <memset+0xa>
 8022960:	4770      	bx	lr
 8022962:	f803 1b01 	strb.w	r1, [r3], #1
 8022966:	e7f9      	b.n	802295c <memset+0x4>

08022968 <_init>:
 8022968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802296a:	bf00      	nop
 802296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802296e:	bc08      	pop	{r3}
 8022970:	469e      	mov	lr, r3
 8022972:	4770      	bx	lr

08022974 <_fini>:
 8022974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022976:	bf00      	nop
 8022978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802297a:	bc08      	pop	{r3}
 802297c:	469e      	mov	lr, r3
 802297e:	4770      	bx	lr


upload-test-program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc0  08020188  08020188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08021d48  08021d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d88  08021d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08021d88  08021d88  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08021d88  08021d88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d88  08021d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021d8c  08021d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08021d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08021d9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08021d9c  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000dad  00000000  00000000  000244f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  000252a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000360  00000000  00000000  00025690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f53  00000000  00000000  000259f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041b8  00000000  00000000  0003d943  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a8a0  00000000  00000000  00041afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc39b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd0  00000000  00000000  000cc418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020188 <__do_global_dtors_aux>:
 8020188:	b510      	push	{r4, lr}
 802018a:	4c05      	ldr	r4, [pc, #20]	; (80201a0 <__do_global_dtors_aux+0x18>)
 802018c:	7823      	ldrb	r3, [r4, #0]
 802018e:	b933      	cbnz	r3, 802019e <__do_global_dtors_aux+0x16>
 8020190:	4b04      	ldr	r3, [pc, #16]	; (80201a4 <__do_global_dtors_aux+0x1c>)
 8020192:	b113      	cbz	r3, 802019a <__do_global_dtors_aux+0x12>
 8020194:	4804      	ldr	r0, [pc, #16]	; (80201a8 <__do_global_dtors_aux+0x20>)
 8020196:	f3af 8000 	nop.w
 802019a:	2301      	movs	r3, #1
 802019c:	7023      	strb	r3, [r4, #0]
 802019e:	bd10      	pop	{r4, pc}
 80201a0:	2000000c 	.word	0x2000000c
 80201a4:	00000000 	.word	0x00000000
 80201a8:	08021d30 	.word	0x08021d30

080201ac <frame_dummy>:
 80201ac:	b508      	push	{r3, lr}
 80201ae:	4b03      	ldr	r3, [pc, #12]	; (80201bc <frame_dummy+0x10>)
 80201b0:	b11b      	cbz	r3, 80201ba <frame_dummy+0xe>
 80201b2:	4903      	ldr	r1, [pc, #12]	; (80201c0 <frame_dummy+0x14>)
 80201b4:	4803      	ldr	r0, [pc, #12]	; (80201c4 <frame_dummy+0x18>)
 80201b6:	f3af 8000 	nop.w
 80201ba:	bd08      	pop	{r3, pc}
 80201bc:	00000000 	.word	0x00000000
 80201c0:	20000010 	.word	0x20000010
 80201c4:	08021d30 	.word	0x08021d30

080201c8 <togglePins>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void togglePins(){
 80201c8:	b590      	push	{r4, r7, lr}
 80201ca:	b085      	sub	sp, #20
 80201cc:	af00      	add	r7, sp, #0
	static int start = 0;
	static int state = 0;
	uint16_t pins[] = {
 80201ce:	4b2b      	ldr	r3, [pc, #172]	; (802027c <togglePins+0xb4>)
 80201d0:	463c      	mov	r4, r7
 80201d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80201d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			GPIO_PIN_12,
			GPIO_PIN_13,
			GPIO_PIN_14,
			GPIO_PIN_15
	};
	if(!start){
 80201d8:	4b29      	ldr	r3, [pc, #164]	; (8020280 <togglePins+0xb8>)
 80201da:	681b      	ldr	r3, [r3, #0]
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d10f      	bne.n	8020200 <togglePins+0x38>
			HAL_GPIO_TogglePin(GPIOE, pins[1]);
 80201e0:	887b      	ldrh	r3, [r7, #2]
 80201e2:	4619      	mov	r1, r3
 80201e4:	4827      	ldr	r0, [pc, #156]	; (8020284 <togglePins+0xbc>)
 80201e6:	f000 fc6f 	bl	8020ac8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOE, pins[2]);
 80201ea:	88bb      	ldrh	r3, [r7, #4]
 80201ec:	4619      	mov	r1, r3
 80201ee:	4825      	ldr	r0, [pc, #148]	; (8020284 <togglePins+0xbc>)
 80201f0:	f000 fc6a 	bl	8020ac8 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOE, pins[3]);
 80201f4:	88fb      	ldrh	r3, [r7, #6]
 80201f6:	4619      	mov	r1, r3
 80201f8:	4822      	ldr	r0, [pc, #136]	; (8020284 <togglePins+0xbc>)
 80201fa:	f000 fc65 	bl	8020ac8 <HAL_GPIO_TogglePin>
 80201fe:	e026      	b.n	802024e <togglePins+0x86>
	}else{
		HAL_GPIO_TogglePin(GPIOE, pins[(state) % 8]);
 8020200:	4b21      	ldr	r3, [pc, #132]	; (8020288 <togglePins+0xc0>)
 8020202:	681b      	ldr	r3, [r3, #0]
 8020204:	425a      	negs	r2, r3
 8020206:	f003 0307 	and.w	r3, r3, #7
 802020a:	f002 0207 	and.w	r2, r2, #7
 802020e:	bf58      	it	pl
 8020210:	4253      	negpl	r3, r2
 8020212:	005b      	lsls	r3, r3, #1
 8020214:	f107 0210 	add.w	r2, r7, #16
 8020218:	4413      	add	r3, r2
 802021a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 802021e:	4619      	mov	r1, r3
 8020220:	4818      	ldr	r0, [pc, #96]	; (8020284 <togglePins+0xbc>)
 8020222:	f000 fc51 	bl	8020ac8 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOE, pins[(state + 3) % 8]);
 8020226:	4b18      	ldr	r3, [pc, #96]	; (8020288 <togglePins+0xc0>)
 8020228:	681b      	ldr	r3, [r3, #0]
 802022a:	3303      	adds	r3, #3
 802022c:	425a      	negs	r2, r3
 802022e:	f003 0307 	and.w	r3, r3, #7
 8020232:	f002 0207 	and.w	r2, r2, #7
 8020236:	bf58      	it	pl
 8020238:	4253      	negpl	r3, r2
 802023a:	005b      	lsls	r3, r3, #1
 802023c:	f107 0210 	add.w	r2, r7, #16
 8020240:	4413      	add	r3, r2
 8020242:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8020246:	4619      	mov	r1, r3
 8020248:	480e      	ldr	r0, [pc, #56]	; (8020284 <togglePins+0xbc>)
 802024a:	f000 fc3d 	bl	8020ac8 <HAL_GPIO_TogglePin>
	}
	state++;
 802024e:	4b0e      	ldr	r3, [pc, #56]	; (8020288 <togglePins+0xc0>)
 8020250:	681b      	ldr	r3, [r3, #0]
 8020252:	3301      	adds	r3, #1
 8020254:	4a0c      	ldr	r2, [pc, #48]	; (8020288 <togglePins+0xc0>)
 8020256:	6013      	str	r3, [r2, #0]
	state %= 8;
 8020258:	4b0b      	ldr	r3, [pc, #44]	; (8020288 <togglePins+0xc0>)
 802025a:	681b      	ldr	r3, [r3, #0]
 802025c:	425a      	negs	r2, r3
 802025e:	f003 0307 	and.w	r3, r3, #7
 8020262:	f002 0207 	and.w	r2, r2, #7
 8020266:	bf58      	it	pl
 8020268:	4253      	negpl	r3, r2
 802026a:	4a07      	ldr	r2, [pc, #28]	; (8020288 <togglePins+0xc0>)
 802026c:	6013      	str	r3, [r2, #0]
	start = 1;
 802026e:	4b04      	ldr	r3, [pc, #16]	; (8020280 <togglePins+0xb8>)
 8020270:	2201      	movs	r2, #1
 8020272:	601a      	str	r2, [r3, #0]
}
 8020274:	bf00      	nop
 8020276:	3714      	adds	r7, #20
 8020278:	46bd      	mov	sp, r7
 802027a:	bd90      	pop	{r4, r7, pc}
 802027c:	08021d48 	.word	0x08021d48
 8020280:	20000028 	.word	0x20000028
 8020284:	48001000 	.word	0x48001000
 8020288:	2000002c 	.word	0x2000002c

0802028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802028c:	b580      	push	{r7, lr}
 802028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08020000;
 8020290:	4b07      	ldr	r3, [pc, #28]	; (80202b0 <main+0x24>)
 8020292:	4a08      	ldr	r2, [pc, #32]	; (80202b4 <main+0x28>)
 8020294:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020296:	f000 f917 	bl	80204c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802029a:	f000 f80d 	bl	80202b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802029e:	f000 f847 	bl	8020330 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  togglePins();
 80202a2:	f7ff ff91 	bl	80201c8 <togglePins>
	  HAL_Delay(150);
 80202a6:	2096      	movs	r0, #150	; 0x96
 80202a8:	f000 f974 	bl	8020594 <HAL_Delay>
	  togglePins();
 80202ac:	e7f9      	b.n	80202a2 <main+0x16>
 80202ae:	bf00      	nop
 80202b0:	e000ed00 	.word	0xe000ed00
 80202b4:	08020000 	.word	0x08020000

080202b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80202b8:	b580      	push	{r7, lr}
 80202ba:	b090      	sub	sp, #64	; 0x40
 80202bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80202be:	f107 0318 	add.w	r3, r7, #24
 80202c2:	2228      	movs	r2, #40	; 0x28
 80202c4:	2100      	movs	r1, #0
 80202c6:	4618      	mov	r0, r3
 80202c8:	f001 fd2a 	bl	8021d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80202cc:	1d3b      	adds	r3, r7, #4
 80202ce:	2200      	movs	r2, #0
 80202d0:	601a      	str	r2, [r3, #0]
 80202d2:	605a      	str	r2, [r3, #4]
 80202d4:	609a      	str	r2, [r3, #8]
 80202d6:	60da      	str	r2, [r3, #12]
 80202d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80202da:	2302      	movs	r3, #2
 80202dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80202de:	2301      	movs	r3, #1
 80202e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80202e2:	2310      	movs	r3, #16
 80202e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80202e6:	2300      	movs	r3, #0
 80202e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80202ea:	f107 0318 	add.w	r3, r7, #24
 80202ee:	4618      	mov	r0, r3
 80202f0:	f000 fc04 	bl	8020afc <HAL_RCC_OscConfig>
 80202f4:	4603      	mov	r3, r0
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	d001      	beq.n	80202fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80202fa:	f000 f84b 	bl	8020394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80202fe:	230f      	movs	r3, #15
 8020300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8020302:	2300      	movs	r3, #0
 8020304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020306:	2300      	movs	r3, #0
 8020308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 802030a:	2300      	movs	r3, #0
 802030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 802030e:	2300      	movs	r3, #0
 8020310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8020312:	1d3b      	adds	r3, r7, #4
 8020314:	2100      	movs	r1, #0
 8020316:	4618      	mov	r0, r3
 8020318:	f001 faf8 	bl	802190c <HAL_RCC_ClockConfig>
 802031c:	4603      	mov	r3, r0
 802031e:	2b00      	cmp	r3, #0
 8020320:	d001      	beq.n	8020326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8020322:	f000 f837 	bl	8020394 <Error_Handler>
  }
}
 8020326:	bf00      	nop
 8020328:	3740      	adds	r7, #64	; 0x40
 802032a:	46bd      	mov	sp, r7
 802032c:	bd80      	pop	{r7, pc}
	...

08020330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020330:	b580      	push	{r7, lr}
 8020332:	b086      	sub	sp, #24
 8020334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020336:	1d3b      	adds	r3, r7, #4
 8020338:	2200      	movs	r2, #0
 802033a:	601a      	str	r2, [r3, #0]
 802033c:	605a      	str	r2, [r3, #4]
 802033e:	609a      	str	r2, [r3, #8]
 8020340:	60da      	str	r2, [r3, #12]
 8020342:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020344:	4b11      	ldr	r3, [pc, #68]	; (802038c <MX_GPIO_Init+0x5c>)
 8020346:	695b      	ldr	r3, [r3, #20]
 8020348:	4a10      	ldr	r2, [pc, #64]	; (802038c <MX_GPIO_Init+0x5c>)
 802034a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802034e:	6153      	str	r3, [r2, #20]
 8020350:	4b0e      	ldr	r3, [pc, #56]	; (802038c <MX_GPIO_Init+0x5c>)
 8020352:	695b      	ldr	r3, [r3, #20]
 8020354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020358:	603b      	str	r3, [r7, #0]
 802035a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 802035c:	2200      	movs	r2, #0
 802035e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8020362:	480b      	ldr	r0, [pc, #44]	; (8020390 <MX_GPIO_Init+0x60>)
 8020364:	f000 fb98 	bl	8020a98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8020368:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 802036c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802036e:	2301      	movs	r3, #1
 8020370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020372:	2300      	movs	r3, #0
 8020374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020376:	2300      	movs	r3, #0
 8020378:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802037a:	1d3b      	adds	r3, r7, #4
 802037c:	4619      	mov	r1, r3
 802037e:	4804      	ldr	r0, [pc, #16]	; (8020390 <MX_GPIO_Init+0x60>)
 8020380:	f000 fa10 	bl	80207a4 <HAL_GPIO_Init>

}
 8020384:	bf00      	nop
 8020386:	3718      	adds	r7, #24
 8020388:	46bd      	mov	sp, r7
 802038a:	bd80      	pop	{r7, pc}
 802038c:	40021000 	.word	0x40021000
 8020390:	48001000 	.word	0x48001000

08020394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020394:	b480      	push	{r7}
 8020396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8020398:	bf00      	nop
 802039a:	46bd      	mov	sp, r7
 802039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a0:	4770      	bx	lr
	...

080203a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80203a4:	b480      	push	{r7}
 80203a6:	b083      	sub	sp, #12
 80203a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80203aa:	4b0f      	ldr	r3, [pc, #60]	; (80203e8 <HAL_MspInit+0x44>)
 80203ac:	699b      	ldr	r3, [r3, #24]
 80203ae:	4a0e      	ldr	r2, [pc, #56]	; (80203e8 <HAL_MspInit+0x44>)
 80203b0:	f043 0301 	orr.w	r3, r3, #1
 80203b4:	6193      	str	r3, [r2, #24]
 80203b6:	4b0c      	ldr	r3, [pc, #48]	; (80203e8 <HAL_MspInit+0x44>)
 80203b8:	699b      	ldr	r3, [r3, #24]
 80203ba:	f003 0301 	and.w	r3, r3, #1
 80203be:	607b      	str	r3, [r7, #4]
 80203c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80203c2:	4b09      	ldr	r3, [pc, #36]	; (80203e8 <HAL_MspInit+0x44>)
 80203c4:	69db      	ldr	r3, [r3, #28]
 80203c6:	4a08      	ldr	r2, [pc, #32]	; (80203e8 <HAL_MspInit+0x44>)
 80203c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80203cc:	61d3      	str	r3, [r2, #28]
 80203ce:	4b06      	ldr	r3, [pc, #24]	; (80203e8 <HAL_MspInit+0x44>)
 80203d0:	69db      	ldr	r3, [r3, #28]
 80203d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80203d6:	603b      	str	r3, [r7, #0]
 80203d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80203da:	bf00      	nop
 80203dc:	370c      	adds	r7, #12
 80203de:	46bd      	mov	sp, r7
 80203e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e4:	4770      	bx	lr
 80203e6:	bf00      	nop
 80203e8:	40021000 	.word	0x40021000

080203ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80203ec:	b480      	push	{r7}
 80203ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80203f0:	bf00      	nop
 80203f2:	46bd      	mov	sp, r7
 80203f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203f8:	4770      	bx	lr

080203fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80203fa:	b480      	push	{r7}
 80203fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80203fe:	e7fe      	b.n	80203fe <HardFault_Handler+0x4>

08020400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020400:	b480      	push	{r7}
 8020402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020404:	e7fe      	b.n	8020404 <MemManage_Handler+0x4>

08020406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020406:	b480      	push	{r7}
 8020408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802040a:	e7fe      	b.n	802040a <BusFault_Handler+0x4>

0802040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802040c:	b480      	push	{r7}
 802040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020410:	e7fe      	b.n	8020410 <UsageFault_Handler+0x4>

08020412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020412:	b480      	push	{r7}
 8020414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020416:	bf00      	nop
 8020418:	46bd      	mov	sp, r7
 802041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802041e:	4770      	bx	lr

08020420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020420:	b480      	push	{r7}
 8020422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020424:	bf00      	nop
 8020426:	46bd      	mov	sp, r7
 8020428:	f85d 7b04 	ldr.w	r7, [sp], #4
 802042c:	4770      	bx	lr

0802042e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802042e:	b480      	push	{r7}
 8020430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020432:	bf00      	nop
 8020434:	46bd      	mov	sp, r7
 8020436:	f85d 7b04 	ldr.w	r7, [sp], #4
 802043a:	4770      	bx	lr

0802043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802043c:	b580      	push	{r7, lr}
 802043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020440:	f000 f888 	bl	8020554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020444:	bf00      	nop
 8020446:	bd80      	pop	{r7, pc}

08020448 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020448:	b480      	push	{r7}
 802044a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802044c:	4b08      	ldr	r3, [pc, #32]	; (8020470 <SystemInit+0x28>)
 802044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020452:	4a07      	ldr	r2, [pc, #28]	; (8020470 <SystemInit+0x28>)
 8020454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802045c:	4b04      	ldr	r3, [pc, #16]	; (8020470 <SystemInit+0x28>)
 802045e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8020462:	609a      	str	r2, [r3, #8]
#endif
}
 8020464:	bf00      	nop
 8020466:	46bd      	mov	sp, r7
 8020468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046c:	4770      	bx	lr
 802046e:	bf00      	nop
 8020470:	e000ed00 	.word	0xe000ed00

08020474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8020474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80204ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8020478:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 802047a:	e003      	b.n	8020484 <LoopCopyDataInit>

0802047c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 802047c:	4b0c      	ldr	r3, [pc, #48]	; (80204b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 802047e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8020480:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8020482:	3104      	adds	r1, #4

08020484 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8020484:	480b      	ldr	r0, [pc, #44]	; (80204b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8020486:	4b0c      	ldr	r3, [pc, #48]	; (80204b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8020488:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 802048a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 802048c:	d3f6      	bcc.n	802047c <CopyDataInit>
	ldr	r2, =_sbss
 802048e:	4a0b      	ldr	r2, [pc, #44]	; (80204bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8020490:	e002      	b.n	8020498 <LoopFillZerobss>

08020492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8020492:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8020494:	f842 3b04 	str.w	r3, [r2], #4

08020498 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8020498:	4b09      	ldr	r3, [pc, #36]	; (80204c0 <LoopForever+0x16>)
	cmp	r2, r3
 802049a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 802049c:	d3f9      	bcc.n	8020492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 802049e:	f7ff ffd3 	bl	8020448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80204a2:	f001 fc19 	bl	8021cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80204a6:	f7ff fef1 	bl	802028c <main>

080204aa <LoopForever>:

LoopForever:
    b LoopForever
 80204aa:	e7fe      	b.n	80204aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80204ac:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80204b0:	08021d90 	.word	0x08021d90
	ldr	r0, =_sdata
 80204b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80204b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80204bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80204c0:	20000034 	.word	0x20000034

080204c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80204c4:	e7fe      	b.n	80204c4 <ADC1_2_IRQHandler>
	...

080204c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80204c8:	b580      	push	{r7, lr}
 80204ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80204cc:	4b08      	ldr	r3, [pc, #32]	; (80204f0 <HAL_Init+0x28>)
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	4a07      	ldr	r2, [pc, #28]	; (80204f0 <HAL_Init+0x28>)
 80204d2:	f043 0310 	orr.w	r3, r3, #16
 80204d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80204d8:	2003      	movs	r0, #3
 80204da:	f000 f92f 	bl	802073c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80204de:	2000      	movs	r0, #0
 80204e0:	f000 f808 	bl	80204f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80204e4:	f7ff ff5e 	bl	80203a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80204e8:	2300      	movs	r3, #0
}
 80204ea:	4618      	mov	r0, r3
 80204ec:	bd80      	pop	{r7, pc}
 80204ee:	bf00      	nop
 80204f0:	40022000 	.word	0x40022000

080204f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80204f4:	b580      	push	{r7, lr}
 80204f6:	b082      	sub	sp, #8
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80204fc:	4b12      	ldr	r3, [pc, #72]	; (8020548 <HAL_InitTick+0x54>)
 80204fe:	681a      	ldr	r2, [r3, #0]
 8020500:	4b12      	ldr	r3, [pc, #72]	; (802054c <HAL_InitTick+0x58>)
 8020502:	781b      	ldrb	r3, [r3, #0]
 8020504:	4619      	mov	r1, r3
 8020506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802050a:	fbb3 f3f1 	udiv	r3, r3, r1
 802050e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020512:	4618      	mov	r0, r3
 8020514:	f000 f939 	bl	802078a <HAL_SYSTICK_Config>
 8020518:	4603      	mov	r3, r0
 802051a:	2b00      	cmp	r3, #0
 802051c:	d001      	beq.n	8020522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802051e:	2301      	movs	r3, #1
 8020520:	e00e      	b.n	8020540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020522:	687b      	ldr	r3, [r7, #4]
 8020524:	2b0f      	cmp	r3, #15
 8020526:	d80a      	bhi.n	802053e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020528:	2200      	movs	r2, #0
 802052a:	6879      	ldr	r1, [r7, #4]
 802052c:	f04f 30ff 	mov.w	r0, #4294967295
 8020530:	f000 f90f 	bl	8020752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020534:	4a06      	ldr	r2, [pc, #24]	; (8020550 <HAL_InitTick+0x5c>)
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 802053a:	2300      	movs	r3, #0
 802053c:	e000      	b.n	8020540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802053e:	2301      	movs	r3, #1
}
 8020540:	4618      	mov	r0, r3
 8020542:	3708      	adds	r7, #8
 8020544:	46bd      	mov	sp, r7
 8020546:	bd80      	pop	{r7, pc}
 8020548:	20000000 	.word	0x20000000
 802054c:	20000008 	.word	0x20000008
 8020550:	20000004 	.word	0x20000004

08020554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020554:	b480      	push	{r7}
 8020556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020558:	4b06      	ldr	r3, [pc, #24]	; (8020574 <HAL_IncTick+0x20>)
 802055a:	781b      	ldrb	r3, [r3, #0]
 802055c:	461a      	mov	r2, r3
 802055e:	4b06      	ldr	r3, [pc, #24]	; (8020578 <HAL_IncTick+0x24>)
 8020560:	681b      	ldr	r3, [r3, #0]
 8020562:	4413      	add	r3, r2
 8020564:	4a04      	ldr	r2, [pc, #16]	; (8020578 <HAL_IncTick+0x24>)
 8020566:	6013      	str	r3, [r2, #0]
}
 8020568:	bf00      	nop
 802056a:	46bd      	mov	sp, r7
 802056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020570:	4770      	bx	lr
 8020572:	bf00      	nop
 8020574:	20000008 	.word	0x20000008
 8020578:	20000030 	.word	0x20000030

0802057c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802057c:	b480      	push	{r7}
 802057e:	af00      	add	r7, sp, #0
  return uwTick;  
 8020580:	4b03      	ldr	r3, [pc, #12]	; (8020590 <HAL_GetTick+0x14>)
 8020582:	681b      	ldr	r3, [r3, #0]
}
 8020584:	4618      	mov	r0, r3
 8020586:	46bd      	mov	sp, r7
 8020588:	f85d 7b04 	ldr.w	r7, [sp], #4
 802058c:	4770      	bx	lr
 802058e:	bf00      	nop
 8020590:	20000030 	.word	0x20000030

08020594 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	b084      	sub	sp, #16
 8020598:	af00      	add	r7, sp, #0
 802059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802059c:	f7ff ffee 	bl	802057c <HAL_GetTick>
 80205a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80205a6:	68fb      	ldr	r3, [r7, #12]
 80205a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205ac:	d005      	beq.n	80205ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80205ae:	4b09      	ldr	r3, [pc, #36]	; (80205d4 <HAL_Delay+0x40>)
 80205b0:	781b      	ldrb	r3, [r3, #0]
 80205b2:	461a      	mov	r2, r3
 80205b4:	68fb      	ldr	r3, [r7, #12]
 80205b6:	4413      	add	r3, r2
 80205b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80205ba:	bf00      	nop
 80205bc:	f7ff ffde 	bl	802057c <HAL_GetTick>
 80205c0:	4602      	mov	r2, r0
 80205c2:	68bb      	ldr	r3, [r7, #8]
 80205c4:	1ad3      	subs	r3, r2, r3
 80205c6:	68fa      	ldr	r2, [r7, #12]
 80205c8:	429a      	cmp	r2, r3
 80205ca:	d8f7      	bhi.n	80205bc <HAL_Delay+0x28>
  {
  }
}
 80205cc:	bf00      	nop
 80205ce:	3710      	adds	r7, #16
 80205d0:	46bd      	mov	sp, r7
 80205d2:	bd80      	pop	{r7, pc}
 80205d4:	20000008 	.word	0x20000008

080205d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80205d8:	b480      	push	{r7}
 80205da:	b085      	sub	sp, #20
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	f003 0307 	and.w	r3, r3, #7
 80205e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80205e8:	4b0c      	ldr	r3, [pc, #48]	; (802061c <__NVIC_SetPriorityGrouping+0x44>)
 80205ea:	68db      	ldr	r3, [r3, #12]
 80205ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80205ee:	68ba      	ldr	r2, [r7, #8]
 80205f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80205f4:	4013      	ands	r3, r2
 80205f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80205fc:	68bb      	ldr	r3, [r7, #8]
 80205fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8020608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802060a:	4a04      	ldr	r2, [pc, #16]	; (802061c <__NVIC_SetPriorityGrouping+0x44>)
 802060c:	68bb      	ldr	r3, [r7, #8]
 802060e:	60d3      	str	r3, [r2, #12]
}
 8020610:	bf00      	nop
 8020612:	3714      	adds	r7, #20
 8020614:	46bd      	mov	sp, r7
 8020616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802061a:	4770      	bx	lr
 802061c:	e000ed00 	.word	0xe000ed00

08020620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020620:	b480      	push	{r7}
 8020622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020624:	4b04      	ldr	r3, [pc, #16]	; (8020638 <__NVIC_GetPriorityGrouping+0x18>)
 8020626:	68db      	ldr	r3, [r3, #12]
 8020628:	0a1b      	lsrs	r3, r3, #8
 802062a:	f003 0307 	and.w	r3, r3, #7
}
 802062e:	4618      	mov	r0, r3
 8020630:	46bd      	mov	sp, r7
 8020632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020636:	4770      	bx	lr
 8020638:	e000ed00 	.word	0xe000ed00

0802063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802063c:	b480      	push	{r7}
 802063e:	b083      	sub	sp, #12
 8020640:	af00      	add	r7, sp, #0
 8020642:	4603      	mov	r3, r0
 8020644:	6039      	str	r1, [r7, #0]
 8020646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802064c:	2b00      	cmp	r3, #0
 802064e:	db0a      	blt.n	8020666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020650:	683b      	ldr	r3, [r7, #0]
 8020652:	b2da      	uxtb	r2, r3
 8020654:	490c      	ldr	r1, [pc, #48]	; (8020688 <__NVIC_SetPriority+0x4c>)
 8020656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802065a:	0112      	lsls	r2, r2, #4
 802065c:	b2d2      	uxtb	r2, r2
 802065e:	440b      	add	r3, r1
 8020660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020664:	e00a      	b.n	802067c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020666:	683b      	ldr	r3, [r7, #0]
 8020668:	b2da      	uxtb	r2, r3
 802066a:	4908      	ldr	r1, [pc, #32]	; (802068c <__NVIC_SetPriority+0x50>)
 802066c:	79fb      	ldrb	r3, [r7, #7]
 802066e:	f003 030f 	and.w	r3, r3, #15
 8020672:	3b04      	subs	r3, #4
 8020674:	0112      	lsls	r2, r2, #4
 8020676:	b2d2      	uxtb	r2, r2
 8020678:	440b      	add	r3, r1
 802067a:	761a      	strb	r2, [r3, #24]
}
 802067c:	bf00      	nop
 802067e:	370c      	adds	r7, #12
 8020680:	46bd      	mov	sp, r7
 8020682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020686:	4770      	bx	lr
 8020688:	e000e100 	.word	0xe000e100
 802068c:	e000ed00 	.word	0xe000ed00

08020690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020690:	b480      	push	{r7}
 8020692:	b089      	sub	sp, #36	; 0x24
 8020694:	af00      	add	r7, sp, #0
 8020696:	60f8      	str	r0, [r7, #12]
 8020698:	60b9      	str	r1, [r7, #8]
 802069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802069c:	68fb      	ldr	r3, [r7, #12]
 802069e:	f003 0307 	and.w	r3, r3, #7
 80206a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80206a4:	69fb      	ldr	r3, [r7, #28]
 80206a6:	f1c3 0307 	rsb	r3, r3, #7
 80206aa:	2b04      	cmp	r3, #4
 80206ac:	bf28      	it	cs
 80206ae:	2304      	movcs	r3, #4
 80206b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80206b2:	69fb      	ldr	r3, [r7, #28]
 80206b4:	3304      	adds	r3, #4
 80206b6:	2b06      	cmp	r3, #6
 80206b8:	d902      	bls.n	80206c0 <NVIC_EncodePriority+0x30>
 80206ba:	69fb      	ldr	r3, [r7, #28]
 80206bc:	3b03      	subs	r3, #3
 80206be:	e000      	b.n	80206c2 <NVIC_EncodePriority+0x32>
 80206c0:	2300      	movs	r3, #0
 80206c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206c4:	f04f 32ff 	mov.w	r2, #4294967295
 80206c8:	69bb      	ldr	r3, [r7, #24]
 80206ca:	fa02 f303 	lsl.w	r3, r2, r3
 80206ce:	43da      	mvns	r2, r3
 80206d0:	68bb      	ldr	r3, [r7, #8]
 80206d2:	401a      	ands	r2, r3
 80206d4:	697b      	ldr	r3, [r7, #20]
 80206d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80206d8:	f04f 31ff 	mov.w	r1, #4294967295
 80206dc:	697b      	ldr	r3, [r7, #20]
 80206de:	fa01 f303 	lsl.w	r3, r1, r3
 80206e2:	43d9      	mvns	r1, r3
 80206e4:	687b      	ldr	r3, [r7, #4]
 80206e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80206e8:	4313      	orrs	r3, r2
         );
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	3724      	adds	r7, #36	; 0x24
 80206ee:	46bd      	mov	sp, r7
 80206f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f4:	4770      	bx	lr
	...

080206f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80206f8:	b580      	push	{r7, lr}
 80206fa:	b082      	sub	sp, #8
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020700:	687b      	ldr	r3, [r7, #4]
 8020702:	3b01      	subs	r3, #1
 8020704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020708:	d301      	bcc.n	802070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 802070a:	2301      	movs	r3, #1
 802070c:	e00f      	b.n	802072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802070e:	4a0a      	ldr	r2, [pc, #40]	; (8020738 <SysTick_Config+0x40>)
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	3b01      	subs	r3, #1
 8020714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020716:	210f      	movs	r1, #15
 8020718:	f04f 30ff 	mov.w	r0, #4294967295
 802071c:	f7ff ff8e 	bl	802063c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020720:	4b05      	ldr	r3, [pc, #20]	; (8020738 <SysTick_Config+0x40>)
 8020722:	2200      	movs	r2, #0
 8020724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020726:	4b04      	ldr	r3, [pc, #16]	; (8020738 <SysTick_Config+0x40>)
 8020728:	2207      	movs	r2, #7
 802072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 802072c:	2300      	movs	r3, #0
}
 802072e:	4618      	mov	r0, r3
 8020730:	3708      	adds	r7, #8
 8020732:	46bd      	mov	sp, r7
 8020734:	bd80      	pop	{r7, pc}
 8020736:	bf00      	nop
 8020738:	e000e010 	.word	0xe000e010

0802073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802073c:	b580      	push	{r7, lr}
 802073e:	b082      	sub	sp, #8
 8020740:	af00      	add	r7, sp, #0
 8020742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020744:	6878      	ldr	r0, [r7, #4]
 8020746:	f7ff ff47 	bl	80205d8 <__NVIC_SetPriorityGrouping>
}
 802074a:	bf00      	nop
 802074c:	3708      	adds	r7, #8
 802074e:	46bd      	mov	sp, r7
 8020750:	bd80      	pop	{r7, pc}

08020752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020752:	b580      	push	{r7, lr}
 8020754:	b086      	sub	sp, #24
 8020756:	af00      	add	r7, sp, #0
 8020758:	4603      	mov	r3, r0
 802075a:	60b9      	str	r1, [r7, #8]
 802075c:	607a      	str	r2, [r7, #4]
 802075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8020760:	2300      	movs	r3, #0
 8020762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8020764:	f7ff ff5c 	bl	8020620 <__NVIC_GetPriorityGrouping>
 8020768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802076a:	687a      	ldr	r2, [r7, #4]
 802076c:	68b9      	ldr	r1, [r7, #8]
 802076e:	6978      	ldr	r0, [r7, #20]
 8020770:	f7ff ff8e 	bl	8020690 <NVIC_EncodePriority>
 8020774:	4602      	mov	r2, r0
 8020776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802077a:	4611      	mov	r1, r2
 802077c:	4618      	mov	r0, r3
 802077e:	f7ff ff5d 	bl	802063c <__NVIC_SetPriority>
}
 8020782:	bf00      	nop
 8020784:	3718      	adds	r7, #24
 8020786:	46bd      	mov	sp, r7
 8020788:	bd80      	pop	{r7, pc}

0802078a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802078a:	b580      	push	{r7, lr}
 802078c:	b082      	sub	sp, #8
 802078e:	af00      	add	r7, sp, #0
 8020790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020792:	6878      	ldr	r0, [r7, #4]
 8020794:	f7ff ffb0 	bl	80206f8 <SysTick_Config>
 8020798:	4603      	mov	r3, r0
}
 802079a:	4618      	mov	r0, r3
 802079c:	3708      	adds	r7, #8
 802079e:	46bd      	mov	sp, r7
 80207a0:	bd80      	pop	{r7, pc}
	...

080207a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80207a4:	b480      	push	{r7}
 80207a6:	b087      	sub	sp, #28
 80207a8:	af00      	add	r7, sp, #0
 80207aa:	6078      	str	r0, [r7, #4]
 80207ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80207ae:	2300      	movs	r3, #0
 80207b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80207b2:	e154      	b.n	8020a5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80207b4:	683b      	ldr	r3, [r7, #0]
 80207b6:	681a      	ldr	r2, [r3, #0]
 80207b8:	2101      	movs	r1, #1
 80207ba:	697b      	ldr	r3, [r7, #20]
 80207bc:	fa01 f303 	lsl.w	r3, r1, r3
 80207c0:	4013      	ands	r3, r2
 80207c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	f000 8146 	beq.w	8020a58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80207cc:	683b      	ldr	r3, [r7, #0]
 80207ce:	685b      	ldr	r3, [r3, #4]
 80207d0:	2b01      	cmp	r3, #1
 80207d2:	d00b      	beq.n	80207ec <HAL_GPIO_Init+0x48>
 80207d4:	683b      	ldr	r3, [r7, #0]
 80207d6:	685b      	ldr	r3, [r3, #4]
 80207d8:	2b02      	cmp	r3, #2
 80207da:	d007      	beq.n	80207ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80207dc:	683b      	ldr	r3, [r7, #0]
 80207de:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80207e0:	2b11      	cmp	r3, #17
 80207e2:	d003      	beq.n	80207ec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80207e4:	683b      	ldr	r3, [r7, #0]
 80207e6:	685b      	ldr	r3, [r3, #4]
 80207e8:	2b12      	cmp	r3, #18
 80207ea:	d130      	bne.n	802084e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	689b      	ldr	r3, [r3, #8]
 80207f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	005b      	lsls	r3, r3, #1
 80207f6:	2203      	movs	r2, #3
 80207f8:	fa02 f303 	lsl.w	r3, r2, r3
 80207fc:	43db      	mvns	r3, r3
 80207fe:	693a      	ldr	r2, [r7, #16]
 8020800:	4013      	ands	r3, r2
 8020802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8020804:	683b      	ldr	r3, [r7, #0]
 8020806:	68da      	ldr	r2, [r3, #12]
 8020808:	697b      	ldr	r3, [r7, #20]
 802080a:	005b      	lsls	r3, r3, #1
 802080c:	fa02 f303 	lsl.w	r3, r2, r3
 8020810:	693a      	ldr	r2, [r7, #16]
 8020812:	4313      	orrs	r3, r2
 8020814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	693a      	ldr	r2, [r7, #16]
 802081a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802081c:	687b      	ldr	r3, [r7, #4]
 802081e:	685b      	ldr	r3, [r3, #4]
 8020820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020822:	2201      	movs	r2, #1
 8020824:	697b      	ldr	r3, [r7, #20]
 8020826:	fa02 f303 	lsl.w	r3, r2, r3
 802082a:	43db      	mvns	r3, r3
 802082c:	693a      	ldr	r2, [r7, #16]
 802082e:	4013      	ands	r3, r2
 8020830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8020832:	683b      	ldr	r3, [r7, #0]
 8020834:	685b      	ldr	r3, [r3, #4]
 8020836:	091b      	lsrs	r3, r3, #4
 8020838:	f003 0201 	and.w	r2, r3, #1
 802083c:	697b      	ldr	r3, [r7, #20]
 802083e:	fa02 f303 	lsl.w	r3, r2, r3
 8020842:	693a      	ldr	r2, [r7, #16]
 8020844:	4313      	orrs	r3, r2
 8020846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	693a      	ldr	r2, [r7, #16]
 802084c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	68db      	ldr	r3, [r3, #12]
 8020852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8020854:	697b      	ldr	r3, [r7, #20]
 8020856:	005b      	lsls	r3, r3, #1
 8020858:	2203      	movs	r2, #3
 802085a:	fa02 f303 	lsl.w	r3, r2, r3
 802085e:	43db      	mvns	r3, r3
 8020860:	693a      	ldr	r2, [r7, #16]
 8020862:	4013      	ands	r3, r2
 8020864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8020866:	683b      	ldr	r3, [r7, #0]
 8020868:	689a      	ldr	r2, [r3, #8]
 802086a:	697b      	ldr	r3, [r7, #20]
 802086c:	005b      	lsls	r3, r3, #1
 802086e:	fa02 f303 	lsl.w	r3, r2, r3
 8020872:	693a      	ldr	r2, [r7, #16]
 8020874:	4313      	orrs	r3, r2
 8020876:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	693a      	ldr	r2, [r7, #16]
 802087c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802087e:	683b      	ldr	r3, [r7, #0]
 8020880:	685b      	ldr	r3, [r3, #4]
 8020882:	2b02      	cmp	r3, #2
 8020884:	d003      	beq.n	802088e <HAL_GPIO_Init+0xea>
 8020886:	683b      	ldr	r3, [r7, #0]
 8020888:	685b      	ldr	r3, [r3, #4]
 802088a:	2b12      	cmp	r3, #18
 802088c:	d123      	bne.n	80208d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 802088e:	697b      	ldr	r3, [r7, #20]
 8020890:	08da      	lsrs	r2, r3, #3
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	3208      	adds	r2, #8
 8020896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802089a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 802089c:	697b      	ldr	r3, [r7, #20]
 802089e:	f003 0307 	and.w	r3, r3, #7
 80208a2:	009b      	lsls	r3, r3, #2
 80208a4:	220f      	movs	r2, #15
 80208a6:	fa02 f303 	lsl.w	r3, r2, r3
 80208aa:	43db      	mvns	r3, r3
 80208ac:	693a      	ldr	r2, [r7, #16]
 80208ae:	4013      	ands	r3, r2
 80208b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80208b2:	683b      	ldr	r3, [r7, #0]
 80208b4:	691a      	ldr	r2, [r3, #16]
 80208b6:	697b      	ldr	r3, [r7, #20]
 80208b8:	f003 0307 	and.w	r3, r3, #7
 80208bc:	009b      	lsls	r3, r3, #2
 80208be:	fa02 f303 	lsl.w	r3, r2, r3
 80208c2:	693a      	ldr	r2, [r7, #16]
 80208c4:	4313      	orrs	r3, r2
 80208c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80208c8:	697b      	ldr	r3, [r7, #20]
 80208ca:	08da      	lsrs	r2, r3, #3
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	3208      	adds	r2, #8
 80208d0:	6939      	ldr	r1, [r7, #16]
 80208d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80208dc:	697b      	ldr	r3, [r7, #20]
 80208de:	005b      	lsls	r3, r3, #1
 80208e0:	2203      	movs	r2, #3
 80208e2:	fa02 f303 	lsl.w	r3, r2, r3
 80208e6:	43db      	mvns	r3, r3
 80208e8:	693a      	ldr	r2, [r7, #16]
 80208ea:	4013      	ands	r3, r2
 80208ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80208ee:	683b      	ldr	r3, [r7, #0]
 80208f0:	685b      	ldr	r3, [r3, #4]
 80208f2:	f003 0203 	and.w	r2, r3, #3
 80208f6:	697b      	ldr	r3, [r7, #20]
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	fa02 f303 	lsl.w	r3, r2, r3
 80208fe:	693a      	ldr	r2, [r7, #16]
 8020900:	4313      	orrs	r3, r2
 8020902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	693a      	ldr	r2, [r7, #16]
 8020908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802090a:	683b      	ldr	r3, [r7, #0]
 802090c:	685b      	ldr	r3, [r3, #4]
 802090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020912:	2b00      	cmp	r3, #0
 8020914:	f000 80a0 	beq.w	8020a58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020918:	4b58      	ldr	r3, [pc, #352]	; (8020a7c <HAL_GPIO_Init+0x2d8>)
 802091a:	699b      	ldr	r3, [r3, #24]
 802091c:	4a57      	ldr	r2, [pc, #348]	; (8020a7c <HAL_GPIO_Init+0x2d8>)
 802091e:	f043 0301 	orr.w	r3, r3, #1
 8020922:	6193      	str	r3, [r2, #24]
 8020924:	4b55      	ldr	r3, [pc, #340]	; (8020a7c <HAL_GPIO_Init+0x2d8>)
 8020926:	699b      	ldr	r3, [r3, #24]
 8020928:	f003 0301 	and.w	r3, r3, #1
 802092c:	60bb      	str	r3, [r7, #8]
 802092e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8020930:	4a53      	ldr	r2, [pc, #332]	; (8020a80 <HAL_GPIO_Init+0x2dc>)
 8020932:	697b      	ldr	r3, [r7, #20]
 8020934:	089b      	lsrs	r3, r3, #2
 8020936:	3302      	adds	r3, #2
 8020938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802093c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 802093e:	697b      	ldr	r3, [r7, #20]
 8020940:	f003 0303 	and.w	r3, r3, #3
 8020944:	009b      	lsls	r3, r3, #2
 8020946:	220f      	movs	r2, #15
 8020948:	fa02 f303 	lsl.w	r3, r2, r3
 802094c:	43db      	mvns	r3, r3
 802094e:	693a      	ldr	r2, [r7, #16]
 8020950:	4013      	ands	r3, r2
 8020952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 802095a:	d019      	beq.n	8020990 <HAL_GPIO_Init+0x1ec>
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	4a49      	ldr	r2, [pc, #292]	; (8020a84 <HAL_GPIO_Init+0x2e0>)
 8020960:	4293      	cmp	r3, r2
 8020962:	d013      	beq.n	802098c <HAL_GPIO_Init+0x1e8>
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	4a48      	ldr	r2, [pc, #288]	; (8020a88 <HAL_GPIO_Init+0x2e4>)
 8020968:	4293      	cmp	r3, r2
 802096a:	d00d      	beq.n	8020988 <HAL_GPIO_Init+0x1e4>
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	4a47      	ldr	r2, [pc, #284]	; (8020a8c <HAL_GPIO_Init+0x2e8>)
 8020970:	4293      	cmp	r3, r2
 8020972:	d007      	beq.n	8020984 <HAL_GPIO_Init+0x1e0>
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	4a46      	ldr	r2, [pc, #280]	; (8020a90 <HAL_GPIO_Init+0x2ec>)
 8020978:	4293      	cmp	r3, r2
 802097a:	d101      	bne.n	8020980 <HAL_GPIO_Init+0x1dc>
 802097c:	2304      	movs	r3, #4
 802097e:	e008      	b.n	8020992 <HAL_GPIO_Init+0x1ee>
 8020980:	2305      	movs	r3, #5
 8020982:	e006      	b.n	8020992 <HAL_GPIO_Init+0x1ee>
 8020984:	2303      	movs	r3, #3
 8020986:	e004      	b.n	8020992 <HAL_GPIO_Init+0x1ee>
 8020988:	2302      	movs	r3, #2
 802098a:	e002      	b.n	8020992 <HAL_GPIO_Init+0x1ee>
 802098c:	2301      	movs	r3, #1
 802098e:	e000      	b.n	8020992 <HAL_GPIO_Init+0x1ee>
 8020990:	2300      	movs	r3, #0
 8020992:	697a      	ldr	r2, [r7, #20]
 8020994:	f002 0203 	and.w	r2, r2, #3
 8020998:	0092      	lsls	r2, r2, #2
 802099a:	4093      	lsls	r3, r2
 802099c:	693a      	ldr	r2, [r7, #16]
 802099e:	4313      	orrs	r3, r2
 80209a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80209a2:	4937      	ldr	r1, [pc, #220]	; (8020a80 <HAL_GPIO_Init+0x2dc>)
 80209a4:	697b      	ldr	r3, [r7, #20]
 80209a6:	089b      	lsrs	r3, r3, #2
 80209a8:	3302      	adds	r3, #2
 80209aa:	693a      	ldr	r2, [r7, #16]
 80209ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80209b0:	4b38      	ldr	r3, [pc, #224]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80209b6:	68fb      	ldr	r3, [r7, #12]
 80209b8:	43db      	mvns	r3, r3
 80209ba:	693a      	ldr	r2, [r7, #16]
 80209bc:	4013      	ands	r3, r2
 80209be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80209c0:	683b      	ldr	r3, [r7, #0]
 80209c2:	685b      	ldr	r3, [r3, #4]
 80209c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80209c8:	2b00      	cmp	r3, #0
 80209ca:	d003      	beq.n	80209d4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80209cc:	693a      	ldr	r2, [r7, #16]
 80209ce:	68fb      	ldr	r3, [r7, #12]
 80209d0:	4313      	orrs	r3, r2
 80209d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80209d4:	4a2f      	ldr	r2, [pc, #188]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 80209d6:	693b      	ldr	r3, [r7, #16]
 80209d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80209da:	4b2e      	ldr	r3, [pc, #184]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 80209dc:	685b      	ldr	r3, [r3, #4]
 80209de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80209e0:	68fb      	ldr	r3, [r7, #12]
 80209e2:	43db      	mvns	r3, r3
 80209e4:	693a      	ldr	r2, [r7, #16]
 80209e6:	4013      	ands	r3, r2
 80209e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80209ea:	683b      	ldr	r3, [r7, #0]
 80209ec:	685b      	ldr	r3, [r3, #4]
 80209ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d003      	beq.n	80209fe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80209f6:	693a      	ldr	r2, [r7, #16]
 80209f8:	68fb      	ldr	r3, [r7, #12]
 80209fa:	4313      	orrs	r3, r2
 80209fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80209fe:	4a25      	ldr	r2, [pc, #148]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 8020a00:	693b      	ldr	r3, [r7, #16]
 8020a02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020a04:	4b23      	ldr	r3, [pc, #140]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 8020a06:	689b      	ldr	r3, [r3, #8]
 8020a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020a0a:	68fb      	ldr	r3, [r7, #12]
 8020a0c:	43db      	mvns	r3, r3
 8020a0e:	693a      	ldr	r2, [r7, #16]
 8020a10:	4013      	ands	r3, r2
 8020a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8020a14:	683b      	ldr	r3, [r7, #0]
 8020a16:	685b      	ldr	r3, [r3, #4]
 8020a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d003      	beq.n	8020a28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8020a20:	693a      	ldr	r2, [r7, #16]
 8020a22:	68fb      	ldr	r3, [r7, #12]
 8020a24:	4313      	orrs	r3, r2
 8020a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8020a28:	4a1a      	ldr	r2, [pc, #104]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 8020a2a:	693b      	ldr	r3, [r7, #16]
 8020a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8020a2e:	4b19      	ldr	r3, [pc, #100]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 8020a30:	68db      	ldr	r3, [r3, #12]
 8020a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020a34:	68fb      	ldr	r3, [r7, #12]
 8020a36:	43db      	mvns	r3, r3
 8020a38:	693a      	ldr	r2, [r7, #16]
 8020a3a:	4013      	ands	r3, r2
 8020a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8020a3e:	683b      	ldr	r3, [r7, #0]
 8020a40:	685b      	ldr	r3, [r3, #4]
 8020a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8020a46:	2b00      	cmp	r3, #0
 8020a48:	d003      	beq.n	8020a52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8020a4a:	693a      	ldr	r2, [r7, #16]
 8020a4c:	68fb      	ldr	r3, [r7, #12]
 8020a4e:	4313      	orrs	r3, r2
 8020a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8020a52:	4a10      	ldr	r2, [pc, #64]	; (8020a94 <HAL_GPIO_Init+0x2f0>)
 8020a54:	693b      	ldr	r3, [r7, #16]
 8020a56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8020a58:	697b      	ldr	r3, [r7, #20]
 8020a5a:	3301      	adds	r3, #1
 8020a5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020a5e:	683b      	ldr	r3, [r7, #0]
 8020a60:	681a      	ldr	r2, [r3, #0]
 8020a62:	697b      	ldr	r3, [r7, #20]
 8020a64:	fa22 f303 	lsr.w	r3, r2, r3
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	f47f aea3 	bne.w	80207b4 <HAL_GPIO_Init+0x10>
  }
}
 8020a6e:	bf00      	nop
 8020a70:	371c      	adds	r7, #28
 8020a72:	46bd      	mov	sp, r7
 8020a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a78:	4770      	bx	lr
 8020a7a:	bf00      	nop
 8020a7c:	40021000 	.word	0x40021000
 8020a80:	40010000 	.word	0x40010000
 8020a84:	48000400 	.word	0x48000400
 8020a88:	48000800 	.word	0x48000800
 8020a8c:	48000c00 	.word	0x48000c00
 8020a90:	48001000 	.word	0x48001000
 8020a94:	40010400 	.word	0x40010400

08020a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8020a98:	b480      	push	{r7}
 8020a9a:	b083      	sub	sp, #12
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
 8020aa0:	460b      	mov	r3, r1
 8020aa2:	807b      	strh	r3, [r7, #2]
 8020aa4:	4613      	mov	r3, r2
 8020aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020aa8:	787b      	ldrb	r3, [r7, #1]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d003      	beq.n	8020ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8020aae:	887a      	ldrh	r2, [r7, #2]
 8020ab0:	687b      	ldr	r3, [r7, #4]
 8020ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8020ab4:	e002      	b.n	8020abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8020ab6:	887a      	ldrh	r2, [r7, #2]
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8020abc:	bf00      	nop
 8020abe:	370c      	adds	r7, #12
 8020ac0:	46bd      	mov	sp, r7
 8020ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ac6:	4770      	bx	lr

08020ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8020ac8:	b480      	push	{r7}
 8020aca:	b085      	sub	sp, #20
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
 8020ad0:	460b      	mov	r3, r1
 8020ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	695b      	ldr	r3, [r3, #20]
 8020ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8020ada:	887a      	ldrh	r2, [r7, #2]
 8020adc:	68fb      	ldr	r3, [r7, #12]
 8020ade:	4013      	ands	r3, r2
 8020ae0:	041a      	lsls	r2, r3, #16
 8020ae2:	68fb      	ldr	r3, [r7, #12]
 8020ae4:	43d9      	mvns	r1, r3
 8020ae6:	887b      	ldrh	r3, [r7, #2]
 8020ae8:	400b      	ands	r3, r1
 8020aea:	431a      	orrs	r2, r3
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	619a      	str	r2, [r3, #24]
}
 8020af0:	bf00      	nop
 8020af2:	3714      	adds	r7, #20
 8020af4:	46bd      	mov	sp, r7
 8020af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020afa:	4770      	bx	lr

08020afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8020b02:	af00      	add	r7, sp, #0
 8020b04:	1d3b      	adds	r3, r7, #4
 8020b06:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020b08:	1d3b      	adds	r3, r7, #4
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	2b00      	cmp	r3, #0
 8020b0e:	d102      	bne.n	8020b16 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8020b10:	2301      	movs	r3, #1
 8020b12:	f000 bef4 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020b16:	1d3b      	adds	r3, r7, #4
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	681b      	ldr	r3, [r3, #0]
 8020b1c:	f003 0301 	and.w	r3, r3, #1
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	f000 816a 	beq.w	8020dfa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8020b26:	4bb3      	ldr	r3, [pc, #716]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020b28:	685b      	ldr	r3, [r3, #4]
 8020b2a:	f003 030c 	and.w	r3, r3, #12
 8020b2e:	2b04      	cmp	r3, #4
 8020b30:	d00c      	beq.n	8020b4c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8020b32:	4bb0      	ldr	r3, [pc, #704]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020b34:	685b      	ldr	r3, [r3, #4]
 8020b36:	f003 030c 	and.w	r3, r3, #12
 8020b3a:	2b08      	cmp	r3, #8
 8020b3c:	d159      	bne.n	8020bf2 <HAL_RCC_OscConfig+0xf6>
 8020b3e:	4bad      	ldr	r3, [pc, #692]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020b40:	685b      	ldr	r3, [r3, #4]
 8020b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020b4a:	d152      	bne.n	8020bf2 <HAL_RCC_OscConfig+0xf6>
 8020b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020b50:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020b54:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8020b58:	fa93 f3a3 	rbit	r3, r3
 8020b5c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8020b60:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020b64:	fab3 f383 	clz	r3, r3
 8020b68:	b2db      	uxtb	r3, r3
 8020b6a:	095b      	lsrs	r3, r3, #5
 8020b6c:	b2db      	uxtb	r3, r3
 8020b6e:	f043 0301 	orr.w	r3, r3, #1
 8020b72:	b2db      	uxtb	r3, r3
 8020b74:	2b01      	cmp	r3, #1
 8020b76:	d102      	bne.n	8020b7e <HAL_RCC_OscConfig+0x82>
 8020b78:	4b9e      	ldr	r3, [pc, #632]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	e015      	b.n	8020baa <HAL_RCC_OscConfig+0xae>
 8020b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020b82:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020b86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8020b8a:	fa93 f3a3 	rbit	r3, r3
 8020b8e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8020b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020b96:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8020b9a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8020b9e:	fa93 f3a3 	rbit	r3, r3
 8020ba2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8020ba6:	4b93      	ldr	r3, [pc, #588]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020bae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8020bb2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8020bb6:	fa92 f2a2 	rbit	r2, r2
 8020bba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8020bbe:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8020bc2:	fab2 f282 	clz	r2, r2
 8020bc6:	b2d2      	uxtb	r2, r2
 8020bc8:	f042 0220 	orr.w	r2, r2, #32
 8020bcc:	b2d2      	uxtb	r2, r2
 8020bce:	f002 021f 	and.w	r2, r2, #31
 8020bd2:	2101      	movs	r1, #1
 8020bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8020bd8:	4013      	ands	r3, r2
 8020bda:	2b00      	cmp	r3, #0
 8020bdc:	f000 810c 	beq.w	8020df8 <HAL_RCC_OscConfig+0x2fc>
 8020be0:	1d3b      	adds	r3, r7, #4
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	685b      	ldr	r3, [r3, #4]
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	f040 8106 	bne.w	8020df8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8020bec:	2301      	movs	r3, #1
 8020bee:	f000 be86 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020bf2:	1d3b      	adds	r3, r7, #4
 8020bf4:	681b      	ldr	r3, [r3, #0]
 8020bf6:	685b      	ldr	r3, [r3, #4]
 8020bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020bfc:	d106      	bne.n	8020c0c <HAL_RCC_OscConfig+0x110>
 8020bfe:	4b7d      	ldr	r3, [pc, #500]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	4a7c      	ldr	r2, [pc, #496]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020c08:	6013      	str	r3, [r2, #0]
 8020c0a:	e030      	b.n	8020c6e <HAL_RCC_OscConfig+0x172>
 8020c0c:	1d3b      	adds	r3, r7, #4
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	685b      	ldr	r3, [r3, #4]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d10c      	bne.n	8020c30 <HAL_RCC_OscConfig+0x134>
 8020c16:	4b77      	ldr	r3, [pc, #476]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	4a76      	ldr	r2, [pc, #472]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020c20:	6013      	str	r3, [r2, #0]
 8020c22:	4b74      	ldr	r3, [pc, #464]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c24:	681b      	ldr	r3, [r3, #0]
 8020c26:	4a73      	ldr	r2, [pc, #460]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020c2c:	6013      	str	r3, [r2, #0]
 8020c2e:	e01e      	b.n	8020c6e <HAL_RCC_OscConfig+0x172>
 8020c30:	1d3b      	adds	r3, r7, #4
 8020c32:	681b      	ldr	r3, [r3, #0]
 8020c34:	685b      	ldr	r3, [r3, #4]
 8020c36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8020c3a:	d10c      	bne.n	8020c56 <HAL_RCC_OscConfig+0x15a>
 8020c3c:	4b6d      	ldr	r3, [pc, #436]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	4a6c      	ldr	r2, [pc, #432]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020c46:	6013      	str	r3, [r2, #0]
 8020c48:	4b6a      	ldr	r3, [pc, #424]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	4a69      	ldr	r2, [pc, #420]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020c52:	6013      	str	r3, [r2, #0]
 8020c54:	e00b      	b.n	8020c6e <HAL_RCC_OscConfig+0x172>
 8020c56:	4b67      	ldr	r3, [pc, #412]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c58:	681b      	ldr	r3, [r3, #0]
 8020c5a:	4a66      	ldr	r2, [pc, #408]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020c60:	6013      	str	r3, [r2, #0]
 8020c62:	4b64      	ldr	r3, [pc, #400]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	4a63      	ldr	r2, [pc, #396]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020c6c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8020c6e:	4b61      	ldr	r3, [pc, #388]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c72:	f023 020f 	bic.w	r2, r3, #15
 8020c76:	1d3b      	adds	r3, r7, #4
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	689b      	ldr	r3, [r3, #8]
 8020c7c:	495d      	ldr	r1, [pc, #372]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020c7e:	4313      	orrs	r3, r2
 8020c80:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8020c82:	1d3b      	adds	r3, r7, #4
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	685b      	ldr	r3, [r3, #4]
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	d059      	beq.n	8020d40 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020c8c:	f7ff fc76 	bl	802057c <HAL_GetTick>
 8020c90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020c94:	e00a      	b.n	8020cac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020c96:	f7ff fc71 	bl	802057c <HAL_GetTick>
 8020c9a:	4602      	mov	r2, r0
 8020c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020ca0:	1ad3      	subs	r3, r2, r3
 8020ca2:	2b64      	cmp	r3, #100	; 0x64
 8020ca4:	d902      	bls.n	8020cac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8020ca6:	2303      	movs	r3, #3
 8020ca8:	f000 be29 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
 8020cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020cb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020cb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8020cb8:	fa93 f3a3 	rbit	r3, r3
 8020cbc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8020cc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020cc4:	fab3 f383 	clz	r3, r3
 8020cc8:	b2db      	uxtb	r3, r3
 8020cca:	095b      	lsrs	r3, r3, #5
 8020ccc:	b2db      	uxtb	r3, r3
 8020cce:	f043 0301 	orr.w	r3, r3, #1
 8020cd2:	b2db      	uxtb	r3, r3
 8020cd4:	2b01      	cmp	r3, #1
 8020cd6:	d102      	bne.n	8020cde <HAL_RCC_OscConfig+0x1e2>
 8020cd8:	4b46      	ldr	r3, [pc, #280]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020cda:	681b      	ldr	r3, [r3, #0]
 8020cdc:	e015      	b.n	8020d0a <HAL_RCC_OscConfig+0x20e>
 8020cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020ce2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020ce6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8020cea:	fa93 f3a3 	rbit	r3, r3
 8020cee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8020cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020cf6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8020cfa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8020cfe:	fa93 f3a3 	rbit	r3, r3
 8020d02:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8020d06:	4b3b      	ldr	r3, [pc, #236]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020d0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8020d12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8020d16:	fa92 f2a2 	rbit	r2, r2
 8020d1a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8020d1e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8020d22:	fab2 f282 	clz	r2, r2
 8020d26:	b2d2      	uxtb	r2, r2
 8020d28:	f042 0220 	orr.w	r2, r2, #32
 8020d2c:	b2d2      	uxtb	r2, r2
 8020d2e:	f002 021f 	and.w	r2, r2, #31
 8020d32:	2101      	movs	r1, #1
 8020d34:	fa01 f202 	lsl.w	r2, r1, r2
 8020d38:	4013      	ands	r3, r2
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	d0ab      	beq.n	8020c96 <HAL_RCC_OscConfig+0x19a>
 8020d3e:	e05c      	b.n	8020dfa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020d40:	f7ff fc1c 	bl	802057c <HAL_GetTick>
 8020d44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020d48:	e00a      	b.n	8020d60 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020d4a:	f7ff fc17 	bl	802057c <HAL_GetTick>
 8020d4e:	4602      	mov	r2, r0
 8020d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020d54:	1ad3      	subs	r3, r2, r3
 8020d56:	2b64      	cmp	r3, #100	; 0x64
 8020d58:	d902      	bls.n	8020d60 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8020d5a:	2303      	movs	r3, #3
 8020d5c:	f000 bdcf 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
 8020d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020d64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020d68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8020d6c:	fa93 f3a3 	rbit	r3, r3
 8020d70:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8020d74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020d78:	fab3 f383 	clz	r3, r3
 8020d7c:	b2db      	uxtb	r3, r3
 8020d7e:	095b      	lsrs	r3, r3, #5
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	f043 0301 	orr.w	r3, r3, #1
 8020d86:	b2db      	uxtb	r3, r3
 8020d88:	2b01      	cmp	r3, #1
 8020d8a:	d102      	bne.n	8020d92 <HAL_RCC_OscConfig+0x296>
 8020d8c:	4b19      	ldr	r3, [pc, #100]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	e015      	b.n	8020dbe <HAL_RCC_OscConfig+0x2c2>
 8020d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020d96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020d9a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8020d9e:	fa93 f3a3 	rbit	r3, r3
 8020da2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8020da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8020daa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8020dae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8020db2:	fa93 f3a3 	rbit	r3, r3
 8020db6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8020dba:	4b0e      	ldr	r3, [pc, #56]	; (8020df4 <HAL_RCC_OscConfig+0x2f8>)
 8020dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8020dc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8020dc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8020dca:	fa92 f2a2 	rbit	r2, r2
 8020dce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8020dd2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8020dd6:	fab2 f282 	clz	r2, r2
 8020dda:	b2d2      	uxtb	r2, r2
 8020ddc:	f042 0220 	orr.w	r2, r2, #32
 8020de0:	b2d2      	uxtb	r2, r2
 8020de2:	f002 021f 	and.w	r2, r2, #31
 8020de6:	2101      	movs	r1, #1
 8020de8:	fa01 f202 	lsl.w	r2, r1, r2
 8020dec:	4013      	ands	r3, r2
 8020dee:	2b00      	cmp	r3, #0
 8020df0:	d1ab      	bne.n	8020d4a <HAL_RCC_OscConfig+0x24e>
 8020df2:	e002      	b.n	8020dfa <HAL_RCC_OscConfig+0x2fe>
 8020df4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020dfa:	1d3b      	adds	r3, r7, #4
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	f003 0302 	and.w	r3, r3, #2
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	f000 816f 	beq.w	80210e8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8020e0a:	4bd0      	ldr	r3, [pc, #832]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020e0c:	685b      	ldr	r3, [r3, #4]
 8020e0e:	f003 030c 	and.w	r3, r3, #12
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d00b      	beq.n	8020e2e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8020e16:	4bcd      	ldr	r3, [pc, #820]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020e18:	685b      	ldr	r3, [r3, #4]
 8020e1a:	f003 030c 	and.w	r3, r3, #12
 8020e1e:	2b08      	cmp	r3, #8
 8020e20:	d16c      	bne.n	8020efc <HAL_RCC_OscConfig+0x400>
 8020e22:	4bca      	ldr	r3, [pc, #808]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020e24:	685b      	ldr	r3, [r3, #4]
 8020e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d166      	bne.n	8020efc <HAL_RCC_OscConfig+0x400>
 8020e2e:	2302      	movs	r3, #2
 8020e30:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020e34:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8020e38:	fa93 f3a3 	rbit	r3, r3
 8020e3c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8020e40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020e44:	fab3 f383 	clz	r3, r3
 8020e48:	b2db      	uxtb	r3, r3
 8020e4a:	095b      	lsrs	r3, r3, #5
 8020e4c:	b2db      	uxtb	r3, r3
 8020e4e:	f043 0301 	orr.w	r3, r3, #1
 8020e52:	b2db      	uxtb	r3, r3
 8020e54:	2b01      	cmp	r3, #1
 8020e56:	d102      	bne.n	8020e5e <HAL_RCC_OscConfig+0x362>
 8020e58:	4bbc      	ldr	r3, [pc, #752]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020e5a:	681b      	ldr	r3, [r3, #0]
 8020e5c:	e013      	b.n	8020e86 <HAL_RCC_OscConfig+0x38a>
 8020e5e:	2302      	movs	r3, #2
 8020e60:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020e64:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8020e68:	fa93 f3a3 	rbit	r3, r3
 8020e6c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8020e70:	2302      	movs	r3, #2
 8020e72:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8020e76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8020e7a:	fa93 f3a3 	rbit	r3, r3
 8020e7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8020e82:	4bb2      	ldr	r3, [pc, #712]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e86:	2202      	movs	r2, #2
 8020e88:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8020e8c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8020e90:	fa92 f2a2 	rbit	r2, r2
 8020e94:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8020e98:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8020e9c:	fab2 f282 	clz	r2, r2
 8020ea0:	b2d2      	uxtb	r2, r2
 8020ea2:	f042 0220 	orr.w	r2, r2, #32
 8020ea6:	b2d2      	uxtb	r2, r2
 8020ea8:	f002 021f 	and.w	r2, r2, #31
 8020eac:	2101      	movs	r1, #1
 8020eae:	fa01 f202 	lsl.w	r2, r1, r2
 8020eb2:	4013      	ands	r3, r2
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d007      	beq.n	8020ec8 <HAL_RCC_OscConfig+0x3cc>
 8020eb8:	1d3b      	adds	r3, r7, #4
 8020eba:	681b      	ldr	r3, [r3, #0]
 8020ebc:	691b      	ldr	r3, [r3, #16]
 8020ebe:	2b01      	cmp	r3, #1
 8020ec0:	d002      	beq.n	8020ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8020ec2:	2301      	movs	r3, #1
 8020ec4:	f000 bd1b 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020ec8:	4ba0      	ldr	r3, [pc, #640]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020ed0:	1d3b      	adds	r3, r7, #4
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	695b      	ldr	r3, [r3, #20]
 8020ed6:	21f8      	movs	r1, #248	; 0xf8
 8020ed8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020edc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8020ee0:	fa91 f1a1 	rbit	r1, r1
 8020ee4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8020ee8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8020eec:	fab1 f181 	clz	r1, r1
 8020ef0:	b2c9      	uxtb	r1, r1
 8020ef2:	408b      	lsls	r3, r1
 8020ef4:	4995      	ldr	r1, [pc, #596]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020ef6:	4313      	orrs	r3, r2
 8020ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020efa:	e0f5      	b.n	80210e8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8020efc:	1d3b      	adds	r3, r7, #4
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	691b      	ldr	r3, [r3, #16]
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	f000 8085 	beq.w	8021012 <HAL_RCC_OscConfig+0x516>
 8020f08:	2301      	movs	r3, #1
 8020f0a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020f0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8020f12:	fa93 f3a3 	rbit	r3, r3
 8020f16:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8020f1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8020f1e:	fab3 f383 	clz	r3, r3
 8020f22:	b2db      	uxtb	r3, r3
 8020f24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8020f28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8020f2c:	009b      	lsls	r3, r3, #2
 8020f2e:	461a      	mov	r2, r3
 8020f30:	2301      	movs	r3, #1
 8020f32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8020f34:	f7ff fb22 	bl	802057c <HAL_GetTick>
 8020f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020f3c:	e00a      	b.n	8020f54 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020f3e:	f7ff fb1d 	bl	802057c <HAL_GetTick>
 8020f42:	4602      	mov	r2, r0
 8020f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8020f48:	1ad3      	subs	r3, r2, r3
 8020f4a:	2b02      	cmp	r3, #2
 8020f4c:	d902      	bls.n	8020f54 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8020f4e:	2303      	movs	r3, #3
 8020f50:	f000 bcd5 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
 8020f54:	2302      	movs	r3, #2
 8020f56:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020f5a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8020f5e:	fa93 f3a3 	rbit	r3, r3
 8020f62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8020f66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020f6a:	fab3 f383 	clz	r3, r3
 8020f6e:	b2db      	uxtb	r3, r3
 8020f70:	095b      	lsrs	r3, r3, #5
 8020f72:	b2db      	uxtb	r3, r3
 8020f74:	f043 0301 	orr.w	r3, r3, #1
 8020f78:	b2db      	uxtb	r3, r3
 8020f7a:	2b01      	cmp	r3, #1
 8020f7c:	d102      	bne.n	8020f84 <HAL_RCC_OscConfig+0x488>
 8020f7e:	4b73      	ldr	r3, [pc, #460]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020f80:	681b      	ldr	r3, [r3, #0]
 8020f82:	e013      	b.n	8020fac <HAL_RCC_OscConfig+0x4b0>
 8020f84:	2302      	movs	r3, #2
 8020f86:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020f8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8020f8e:	fa93 f3a3 	rbit	r3, r3
 8020f92:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8020f96:	2302      	movs	r3, #2
 8020f98:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8020f9c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8020fa0:	fa93 f3a3 	rbit	r3, r3
 8020fa4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8020fa8:	4b68      	ldr	r3, [pc, #416]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020fac:	2202      	movs	r2, #2
 8020fae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8020fb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8020fb6:	fa92 f2a2 	rbit	r2, r2
 8020fba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8020fbe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8020fc2:	fab2 f282 	clz	r2, r2
 8020fc6:	b2d2      	uxtb	r2, r2
 8020fc8:	f042 0220 	orr.w	r2, r2, #32
 8020fcc:	b2d2      	uxtb	r2, r2
 8020fce:	f002 021f 	and.w	r2, r2, #31
 8020fd2:	2101      	movs	r1, #1
 8020fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8020fd8:	4013      	ands	r3, r2
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d0af      	beq.n	8020f3e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020fde:	4b5b      	ldr	r3, [pc, #364]	; (802114c <HAL_RCC_OscConfig+0x650>)
 8020fe0:	681b      	ldr	r3, [r3, #0]
 8020fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020fe6:	1d3b      	adds	r3, r7, #4
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	695b      	ldr	r3, [r3, #20]
 8020fec:	21f8      	movs	r1, #248	; 0xf8
 8020fee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8020ff2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8020ff6:	fa91 f1a1 	rbit	r1, r1
 8020ffa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8020ffe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8021002:	fab1 f181 	clz	r1, r1
 8021006:	b2c9      	uxtb	r1, r1
 8021008:	408b      	lsls	r3, r1
 802100a:	4950      	ldr	r1, [pc, #320]	; (802114c <HAL_RCC_OscConfig+0x650>)
 802100c:	4313      	orrs	r3, r2
 802100e:	600b      	str	r3, [r1, #0]
 8021010:	e06a      	b.n	80210e8 <HAL_RCC_OscConfig+0x5ec>
 8021012:	2301      	movs	r3, #1
 8021014:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021018:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 802101c:	fa93 f3a3 	rbit	r3, r3
 8021020:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8021024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021028:	fab3 f383 	clz	r3, r3
 802102c:	b2db      	uxtb	r3, r3
 802102e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8021032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8021036:	009b      	lsls	r3, r3, #2
 8021038:	461a      	mov	r2, r3
 802103a:	2300      	movs	r3, #0
 802103c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802103e:	f7ff fa9d 	bl	802057c <HAL_GetTick>
 8021042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021046:	e00a      	b.n	802105e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8021048:	f7ff fa98 	bl	802057c <HAL_GetTick>
 802104c:	4602      	mov	r2, r0
 802104e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021052:	1ad3      	subs	r3, r2, r3
 8021054:	2b02      	cmp	r3, #2
 8021056:	d902      	bls.n	802105e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8021058:	2303      	movs	r3, #3
 802105a:	f000 bc50 	b.w	80218fe <HAL_RCC_OscConfig+0xe02>
 802105e:	2302      	movs	r3, #2
 8021060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021064:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8021068:	fa93 f3a3 	rbit	r3, r3
 802106c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8021070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021074:	fab3 f383 	clz	r3, r3
 8021078:	b2db      	uxtb	r3, r3
 802107a:	095b      	lsrs	r3, r3, #5
 802107c:	b2db      	uxtb	r3, r3
 802107e:	f043 0301 	orr.w	r3, r3, #1
 8021082:	b2db      	uxtb	r3, r3
 8021084:	2b01      	cmp	r3, #1
 8021086:	d102      	bne.n	802108e <HAL_RCC_OscConfig+0x592>
 8021088:	4b30      	ldr	r3, [pc, #192]	; (802114c <HAL_RCC_OscConfig+0x650>)
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	e013      	b.n	80210b6 <HAL_RCC_OscConfig+0x5ba>
 802108e:	2302      	movs	r3, #2
 8021090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8021098:	fa93 f3a3 	rbit	r3, r3
 802109c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80210a0:	2302      	movs	r3, #2
 80210a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80210a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80210aa:	fa93 f3a3 	rbit	r3, r3
 80210ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80210b2:	4b26      	ldr	r3, [pc, #152]	; (802114c <HAL_RCC_OscConfig+0x650>)
 80210b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80210b6:	2202      	movs	r2, #2
 80210b8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80210bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80210c0:	fa92 f2a2 	rbit	r2, r2
 80210c4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80210c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80210cc:	fab2 f282 	clz	r2, r2
 80210d0:	b2d2      	uxtb	r2, r2
 80210d2:	f042 0220 	orr.w	r2, r2, #32
 80210d6:	b2d2      	uxtb	r2, r2
 80210d8:	f002 021f 	and.w	r2, r2, #31
 80210dc:	2101      	movs	r1, #1
 80210de:	fa01 f202 	lsl.w	r2, r1, r2
 80210e2:	4013      	ands	r3, r2
 80210e4:	2b00      	cmp	r3, #0
 80210e6:	d1af      	bne.n	8021048 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80210e8:	1d3b      	adds	r3, r7, #4
 80210ea:	681b      	ldr	r3, [r3, #0]
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	f003 0308 	and.w	r3, r3, #8
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	f000 80da 	beq.w	80212ac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80210f8:	1d3b      	adds	r3, r7, #4
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	699b      	ldr	r3, [r3, #24]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d069      	beq.n	80211d6 <HAL_RCC_OscConfig+0x6da>
 8021102:	2301      	movs	r3, #1
 8021104:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021108:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 802110c:	fa93 f3a3 	rbit	r3, r3
 8021110:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8021114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021118:	fab3 f383 	clz	r3, r3
 802111c:	b2db      	uxtb	r3, r3
 802111e:	461a      	mov	r2, r3
 8021120:	4b0b      	ldr	r3, [pc, #44]	; (8021150 <HAL_RCC_OscConfig+0x654>)
 8021122:	4413      	add	r3, r2
 8021124:	009b      	lsls	r3, r3, #2
 8021126:	461a      	mov	r2, r3
 8021128:	2301      	movs	r3, #1
 802112a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802112c:	f7ff fa26 	bl	802057c <HAL_GetTick>
 8021130:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021134:	e00e      	b.n	8021154 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021136:	f7ff fa21 	bl	802057c <HAL_GetTick>
 802113a:	4602      	mov	r2, r0
 802113c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021140:	1ad3      	subs	r3, r2, r3
 8021142:	2b02      	cmp	r3, #2
 8021144:	d906      	bls.n	8021154 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8021146:	2303      	movs	r3, #3
 8021148:	e3d9      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 802114a:	bf00      	nop
 802114c:	40021000 	.word	0x40021000
 8021150:	10908120 	.word	0x10908120
 8021154:	2302      	movs	r3, #2
 8021156:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802115a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 802115e:	fa93 f3a3 	rbit	r3, r3
 8021162:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8021166:	f507 7380 	add.w	r3, r7, #256	; 0x100
 802116a:	2202      	movs	r2, #2
 802116c:	601a      	str	r2, [r3, #0]
 802116e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	fa93 f2a3 	rbit	r2, r3
 8021178:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 802117c:	601a      	str	r2, [r3, #0]
 802117e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8021182:	2202      	movs	r2, #2
 8021184:	601a      	str	r2, [r3, #0]
 8021186:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 802118a:	681b      	ldr	r3, [r3, #0]
 802118c:	fa93 f2a3 	rbit	r2, r3
 8021190:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8021194:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021196:	4ba5      	ldr	r3, [pc, #660]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802119a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 802119e:	2102      	movs	r1, #2
 80211a0:	6019      	str	r1, [r3, #0]
 80211a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80211a6:	681b      	ldr	r3, [r3, #0]
 80211a8:	fa93 f1a3 	rbit	r1, r3
 80211ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80211b0:	6019      	str	r1, [r3, #0]
  return result;
 80211b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	fab3 f383 	clz	r3, r3
 80211bc:	b2db      	uxtb	r3, r3
 80211be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80211c2:	b2db      	uxtb	r3, r3
 80211c4:	f003 031f 	and.w	r3, r3, #31
 80211c8:	2101      	movs	r1, #1
 80211ca:	fa01 f303 	lsl.w	r3, r1, r3
 80211ce:	4013      	ands	r3, r2
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d0b0      	beq.n	8021136 <HAL_RCC_OscConfig+0x63a>
 80211d4:	e06a      	b.n	80212ac <HAL_RCC_OscConfig+0x7b0>
 80211d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80211da:	2201      	movs	r2, #1
 80211dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80211de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80211e2:	681b      	ldr	r3, [r3, #0]
 80211e4:	fa93 f2a3 	rbit	r2, r3
 80211e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80211ec:	601a      	str	r2, [r3, #0]
  return result;
 80211ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80211f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80211f4:	fab3 f383 	clz	r3, r3
 80211f8:	b2db      	uxtb	r3, r3
 80211fa:	461a      	mov	r2, r3
 80211fc:	4b8c      	ldr	r3, [pc, #560]	; (8021430 <HAL_RCC_OscConfig+0x934>)
 80211fe:	4413      	add	r3, r2
 8021200:	009b      	lsls	r3, r3, #2
 8021202:	461a      	mov	r2, r3
 8021204:	2300      	movs	r3, #0
 8021206:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021208:	f7ff f9b8 	bl	802057c <HAL_GetTick>
 802120c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021210:	e009      	b.n	8021226 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8021212:	f7ff f9b3 	bl	802057c <HAL_GetTick>
 8021216:	4602      	mov	r2, r0
 8021218:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 802121c:	1ad3      	subs	r3, r2, r3
 802121e:	2b02      	cmp	r3, #2
 8021220:	d901      	bls.n	8021226 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8021222:	2303      	movs	r3, #3
 8021224:	e36b      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 8021226:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 802122a:	2202      	movs	r2, #2
 802122c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802122e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8021232:	681b      	ldr	r3, [r3, #0]
 8021234:	fa93 f2a3 	rbit	r2, r3
 8021238:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 802123c:	601a      	str	r2, [r3, #0]
 802123e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8021242:	2202      	movs	r2, #2
 8021244:	601a      	str	r2, [r3, #0]
 8021246:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	fa93 f2a3 	rbit	r2, r3
 8021250:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8021254:	601a      	str	r2, [r3, #0]
 8021256:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 802125a:	2202      	movs	r2, #2
 802125c:	601a      	str	r2, [r3, #0]
 802125e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	fa93 f2a3 	rbit	r2, r3
 8021268:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 802126c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802126e:	4b6f      	ldr	r3, [pc, #444]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8021272:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8021276:	2102      	movs	r1, #2
 8021278:	6019      	str	r1, [r3, #0]
 802127a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	fa93 f1a3 	rbit	r1, r3
 8021284:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8021288:	6019      	str	r1, [r3, #0]
  return result;
 802128a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	fab3 f383 	clz	r3, r3
 8021294:	b2db      	uxtb	r3, r3
 8021296:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802129a:	b2db      	uxtb	r3, r3
 802129c:	f003 031f 	and.w	r3, r3, #31
 80212a0:	2101      	movs	r1, #1
 80212a2:	fa01 f303 	lsl.w	r3, r1, r3
 80212a6:	4013      	ands	r3, r2
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	d1b2      	bne.n	8021212 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80212ac:	1d3b      	adds	r3, r7, #4
 80212ae:	681b      	ldr	r3, [r3, #0]
 80212b0:	681b      	ldr	r3, [r3, #0]
 80212b2:	f003 0304 	and.w	r3, r3, #4
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	f000 8158 	beq.w	802156c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80212bc:	2300      	movs	r3, #0
 80212be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80212c2:	4b5a      	ldr	r3, [pc, #360]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80212c4:	69db      	ldr	r3, [r3, #28]
 80212c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d112      	bne.n	80212f4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80212ce:	4b57      	ldr	r3, [pc, #348]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80212d0:	69db      	ldr	r3, [r3, #28]
 80212d2:	4a56      	ldr	r2, [pc, #344]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80212d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80212d8:	61d3      	str	r3, [r2, #28]
 80212da:	4b54      	ldr	r3, [pc, #336]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80212dc:	69db      	ldr	r3, [r3, #28]
 80212de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80212e2:	f107 0308 	add.w	r3, r7, #8
 80212e6:	601a      	str	r2, [r3, #0]
 80212e8:	f107 0308 	add.w	r3, r7, #8
 80212ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80212ee:	2301      	movs	r3, #1
 80212f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80212f4:	4b4f      	ldr	r3, [pc, #316]	; (8021434 <HAL_RCC_OscConfig+0x938>)
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d11a      	bne.n	8021336 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021300:	4b4c      	ldr	r3, [pc, #304]	; (8021434 <HAL_RCC_OscConfig+0x938>)
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	4a4b      	ldr	r2, [pc, #300]	; (8021434 <HAL_RCC_OscConfig+0x938>)
 8021306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802130a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802130c:	f7ff f936 	bl	802057c <HAL_GetTick>
 8021310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021314:	e009      	b.n	802132a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021316:	f7ff f931 	bl	802057c <HAL_GetTick>
 802131a:	4602      	mov	r2, r0
 802131c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021320:	1ad3      	subs	r3, r2, r3
 8021322:	2b64      	cmp	r3, #100	; 0x64
 8021324:	d901      	bls.n	802132a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8021326:	2303      	movs	r3, #3
 8021328:	e2e9      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802132a:	4b42      	ldr	r3, [pc, #264]	; (8021434 <HAL_RCC_OscConfig+0x938>)
 802132c:	681b      	ldr	r3, [r3, #0]
 802132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021332:	2b00      	cmp	r3, #0
 8021334:	d0ef      	beq.n	8021316 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021336:	1d3b      	adds	r3, r7, #4
 8021338:	681b      	ldr	r3, [r3, #0]
 802133a:	68db      	ldr	r3, [r3, #12]
 802133c:	2b01      	cmp	r3, #1
 802133e:	d106      	bne.n	802134e <HAL_RCC_OscConfig+0x852>
 8021340:	4b3a      	ldr	r3, [pc, #232]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021342:	6a1b      	ldr	r3, [r3, #32]
 8021344:	4a39      	ldr	r2, [pc, #228]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021346:	f043 0301 	orr.w	r3, r3, #1
 802134a:	6213      	str	r3, [r2, #32]
 802134c:	e02f      	b.n	80213ae <HAL_RCC_OscConfig+0x8b2>
 802134e:	1d3b      	adds	r3, r7, #4
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	68db      	ldr	r3, [r3, #12]
 8021354:	2b00      	cmp	r3, #0
 8021356:	d10c      	bne.n	8021372 <HAL_RCC_OscConfig+0x876>
 8021358:	4b34      	ldr	r3, [pc, #208]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802135a:	6a1b      	ldr	r3, [r3, #32]
 802135c:	4a33      	ldr	r2, [pc, #204]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802135e:	f023 0301 	bic.w	r3, r3, #1
 8021362:	6213      	str	r3, [r2, #32]
 8021364:	4b31      	ldr	r3, [pc, #196]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021366:	6a1b      	ldr	r3, [r3, #32]
 8021368:	4a30      	ldr	r2, [pc, #192]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802136a:	f023 0304 	bic.w	r3, r3, #4
 802136e:	6213      	str	r3, [r2, #32]
 8021370:	e01d      	b.n	80213ae <HAL_RCC_OscConfig+0x8b2>
 8021372:	1d3b      	adds	r3, r7, #4
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	68db      	ldr	r3, [r3, #12]
 8021378:	2b05      	cmp	r3, #5
 802137a:	d10c      	bne.n	8021396 <HAL_RCC_OscConfig+0x89a>
 802137c:	4b2b      	ldr	r3, [pc, #172]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802137e:	6a1b      	ldr	r3, [r3, #32]
 8021380:	4a2a      	ldr	r2, [pc, #168]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021382:	f043 0304 	orr.w	r3, r3, #4
 8021386:	6213      	str	r3, [r2, #32]
 8021388:	4b28      	ldr	r3, [pc, #160]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802138a:	6a1b      	ldr	r3, [r3, #32]
 802138c:	4a27      	ldr	r2, [pc, #156]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802138e:	f043 0301 	orr.w	r3, r3, #1
 8021392:	6213      	str	r3, [r2, #32]
 8021394:	e00b      	b.n	80213ae <HAL_RCC_OscConfig+0x8b2>
 8021396:	4b25      	ldr	r3, [pc, #148]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021398:	6a1b      	ldr	r3, [r3, #32]
 802139a:	4a24      	ldr	r2, [pc, #144]	; (802142c <HAL_RCC_OscConfig+0x930>)
 802139c:	f023 0301 	bic.w	r3, r3, #1
 80213a0:	6213      	str	r3, [r2, #32]
 80213a2:	4b22      	ldr	r3, [pc, #136]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80213a4:	6a1b      	ldr	r3, [r3, #32]
 80213a6:	4a21      	ldr	r2, [pc, #132]	; (802142c <HAL_RCC_OscConfig+0x930>)
 80213a8:	f023 0304 	bic.w	r3, r3, #4
 80213ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80213ae:	1d3b      	adds	r3, r7, #4
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	68db      	ldr	r3, [r3, #12]
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d06b      	beq.n	8021490 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80213b8:	f7ff f8e0 	bl	802057c <HAL_GetTick>
 80213bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80213c0:	e00b      	b.n	80213da <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80213c2:	f7ff f8db 	bl	802057c <HAL_GetTick>
 80213c6:	4602      	mov	r2, r0
 80213c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80213cc:	1ad3      	subs	r3, r2, r3
 80213ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80213d2:	4293      	cmp	r3, r2
 80213d4:	d901      	bls.n	80213da <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80213d6:	2303      	movs	r3, #3
 80213d8:	e291      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 80213da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80213de:	2202      	movs	r2, #2
 80213e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80213e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	fa93 f2a3 	rbit	r2, r3
 80213ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80213f0:	601a      	str	r2, [r3, #0]
 80213f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80213f6:	2202      	movs	r2, #2
 80213f8:	601a      	str	r2, [r3, #0]
 80213fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80213fe:	681b      	ldr	r3, [r3, #0]
 8021400:	fa93 f2a3 	rbit	r2, r3
 8021404:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8021408:	601a      	str	r2, [r3, #0]
  return result;
 802140a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802140e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021410:	fab3 f383 	clz	r3, r3
 8021414:	b2db      	uxtb	r3, r3
 8021416:	095b      	lsrs	r3, r3, #5
 8021418:	b2db      	uxtb	r3, r3
 802141a:	f043 0302 	orr.w	r3, r3, #2
 802141e:	b2db      	uxtb	r3, r3
 8021420:	2b02      	cmp	r3, #2
 8021422:	d109      	bne.n	8021438 <HAL_RCC_OscConfig+0x93c>
 8021424:	4b01      	ldr	r3, [pc, #4]	; (802142c <HAL_RCC_OscConfig+0x930>)
 8021426:	6a1b      	ldr	r3, [r3, #32]
 8021428:	e014      	b.n	8021454 <HAL_RCC_OscConfig+0x958>
 802142a:	bf00      	nop
 802142c:	40021000 	.word	0x40021000
 8021430:	10908120 	.word	0x10908120
 8021434:	40007000 	.word	0x40007000
 8021438:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 802143c:	2202      	movs	r2, #2
 802143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021440:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	fa93 f2a3 	rbit	r2, r3
 802144a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 802144e:	601a      	str	r2, [r3, #0]
 8021450:	4bbb      	ldr	r3, [pc, #748]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 8021452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021454:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8021458:	2102      	movs	r1, #2
 802145a:	6011      	str	r1, [r2, #0]
 802145c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8021460:	6812      	ldr	r2, [r2, #0]
 8021462:	fa92 f1a2 	rbit	r1, r2
 8021466:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802146a:	6011      	str	r1, [r2, #0]
  return result;
 802146c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8021470:	6812      	ldr	r2, [r2, #0]
 8021472:	fab2 f282 	clz	r2, r2
 8021476:	b2d2      	uxtb	r2, r2
 8021478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802147c:	b2d2      	uxtb	r2, r2
 802147e:	f002 021f 	and.w	r2, r2, #31
 8021482:	2101      	movs	r1, #1
 8021484:	fa01 f202 	lsl.w	r2, r1, r2
 8021488:	4013      	ands	r3, r2
 802148a:	2b00      	cmp	r3, #0
 802148c:	d099      	beq.n	80213c2 <HAL_RCC_OscConfig+0x8c6>
 802148e:	e063      	b.n	8021558 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8021490:	f7ff f874 	bl	802057c <HAL_GetTick>
 8021494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8021498:	e00b      	b.n	80214b2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802149a:	f7ff f86f 	bl	802057c <HAL_GetTick>
 802149e:	4602      	mov	r2, r0
 80214a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80214a4:	1ad3      	subs	r3, r2, r3
 80214a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80214aa:	4293      	cmp	r3, r2
 80214ac:	d901      	bls.n	80214b2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80214ae:	2303      	movs	r3, #3
 80214b0:	e225      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 80214b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80214b6:	2202      	movs	r2, #2
 80214b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80214ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80214be:	681b      	ldr	r3, [r3, #0]
 80214c0:	fa93 f2a3 	rbit	r2, r3
 80214c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80214c8:	601a      	str	r2, [r3, #0]
 80214ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80214ce:	2202      	movs	r2, #2
 80214d0:	601a      	str	r2, [r3, #0]
 80214d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80214d6:	681b      	ldr	r3, [r3, #0]
 80214d8:	fa93 f2a3 	rbit	r2, r3
 80214dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80214e0:	601a      	str	r2, [r3, #0]
  return result;
 80214e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80214e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80214e8:	fab3 f383 	clz	r3, r3
 80214ec:	b2db      	uxtb	r3, r3
 80214ee:	095b      	lsrs	r3, r3, #5
 80214f0:	b2db      	uxtb	r3, r3
 80214f2:	f043 0302 	orr.w	r3, r3, #2
 80214f6:	b2db      	uxtb	r3, r3
 80214f8:	2b02      	cmp	r3, #2
 80214fa:	d102      	bne.n	8021502 <HAL_RCC_OscConfig+0xa06>
 80214fc:	4b90      	ldr	r3, [pc, #576]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 80214fe:	6a1b      	ldr	r3, [r3, #32]
 8021500:	e00d      	b.n	802151e <HAL_RCC_OscConfig+0xa22>
 8021502:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8021506:	2202      	movs	r2, #2
 8021508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802150a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 802150e:	681b      	ldr	r3, [r3, #0]
 8021510:	fa93 f2a3 	rbit	r2, r3
 8021514:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8021518:	601a      	str	r2, [r3, #0]
 802151a:	4b89      	ldr	r3, [pc, #548]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 802151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802151e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8021522:	2102      	movs	r1, #2
 8021524:	6011      	str	r1, [r2, #0]
 8021526:	f107 0288 	add.w	r2, r7, #136	; 0x88
 802152a:	6812      	ldr	r2, [r2, #0]
 802152c:	fa92 f1a2 	rbit	r1, r2
 8021530:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8021534:	6011      	str	r1, [r2, #0]
  return result;
 8021536:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802153a:	6812      	ldr	r2, [r2, #0]
 802153c:	fab2 f282 	clz	r2, r2
 8021540:	b2d2      	uxtb	r2, r2
 8021542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021546:	b2d2      	uxtb	r2, r2
 8021548:	f002 021f 	and.w	r2, r2, #31
 802154c:	2101      	movs	r1, #1
 802154e:	fa01 f202 	lsl.w	r2, r1, r2
 8021552:	4013      	ands	r3, r2
 8021554:	2b00      	cmp	r3, #0
 8021556:	d1a0      	bne.n	802149a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8021558:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 802155c:	2b01      	cmp	r3, #1
 802155e:	d105      	bne.n	802156c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8021560:	4b77      	ldr	r3, [pc, #476]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 8021562:	69db      	ldr	r3, [r3, #28]
 8021564:	4a76      	ldr	r2, [pc, #472]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 8021566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802156a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802156c:	1d3b      	adds	r3, r7, #4
 802156e:	681b      	ldr	r3, [r3, #0]
 8021570:	69db      	ldr	r3, [r3, #28]
 8021572:	2b00      	cmp	r3, #0
 8021574:	f000 81c2 	beq.w	80218fc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8021578:	4b71      	ldr	r3, [pc, #452]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 802157a:	685b      	ldr	r3, [r3, #4]
 802157c:	f003 030c 	and.w	r3, r3, #12
 8021580:	2b08      	cmp	r3, #8
 8021582:	f000 819c 	beq.w	80218be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021586:	1d3b      	adds	r3, r7, #4
 8021588:	681b      	ldr	r3, [r3, #0]
 802158a:	69db      	ldr	r3, [r3, #28]
 802158c:	2b02      	cmp	r3, #2
 802158e:	f040 8114 	bne.w	80217ba <HAL_RCC_OscConfig+0xcbe>
 8021592:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8021596:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 802159a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802159c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	fa93 f2a3 	rbit	r2, r3
 80215a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80215aa:	601a      	str	r2, [r3, #0]
  return result;
 80215ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80215b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80215b2:	fab3 f383 	clz	r3, r3
 80215b6:	b2db      	uxtb	r3, r3
 80215b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80215bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80215c0:	009b      	lsls	r3, r3, #2
 80215c2:	461a      	mov	r2, r3
 80215c4:	2300      	movs	r3, #0
 80215c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80215c8:	f7fe ffd8 	bl	802057c <HAL_GetTick>
 80215cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80215d0:	e009      	b.n	80215e6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80215d2:	f7fe ffd3 	bl	802057c <HAL_GetTick>
 80215d6:	4602      	mov	r2, r0
 80215d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80215dc:	1ad3      	subs	r3, r2, r3
 80215de:	2b02      	cmp	r3, #2
 80215e0:	d901      	bls.n	80215e6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80215e2:	2303      	movs	r3, #3
 80215e4:	e18b      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 80215e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80215ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80215ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80215f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80215f4:	681b      	ldr	r3, [r3, #0]
 80215f6:	fa93 f2a3 	rbit	r2, r3
 80215fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80215fe:	601a      	str	r2, [r3, #0]
  return result;
 8021600:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8021604:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8021606:	fab3 f383 	clz	r3, r3
 802160a:	b2db      	uxtb	r3, r3
 802160c:	095b      	lsrs	r3, r3, #5
 802160e:	b2db      	uxtb	r3, r3
 8021610:	f043 0301 	orr.w	r3, r3, #1
 8021614:	b2db      	uxtb	r3, r3
 8021616:	2b01      	cmp	r3, #1
 8021618:	d102      	bne.n	8021620 <HAL_RCC_OscConfig+0xb24>
 802161a:	4b49      	ldr	r3, [pc, #292]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 802161c:	681b      	ldr	r3, [r3, #0]
 802161e:	e01b      	b.n	8021658 <HAL_RCC_OscConfig+0xb5c>
 8021620:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8021624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021628:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802162a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 802162e:	681b      	ldr	r3, [r3, #0]
 8021630:	fa93 f2a3 	rbit	r2, r3
 8021634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8021638:	601a      	str	r2, [r3, #0]
 802163a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802163e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021642:	601a      	str	r2, [r3, #0]
 8021644:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	fa93 f2a3 	rbit	r2, r3
 802164e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8021652:	601a      	str	r2, [r3, #0]
 8021654:	4b3a      	ldr	r3, [pc, #232]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 8021656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021658:	f107 0260 	add.w	r2, r7, #96	; 0x60
 802165c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8021660:	6011      	str	r1, [r2, #0]
 8021662:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8021666:	6812      	ldr	r2, [r2, #0]
 8021668:	fa92 f1a2 	rbit	r1, r2
 802166c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8021670:	6011      	str	r1, [r2, #0]
  return result;
 8021672:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8021676:	6812      	ldr	r2, [r2, #0]
 8021678:	fab2 f282 	clz	r2, r2
 802167c:	b2d2      	uxtb	r2, r2
 802167e:	f042 0220 	orr.w	r2, r2, #32
 8021682:	b2d2      	uxtb	r2, r2
 8021684:	f002 021f 	and.w	r2, r2, #31
 8021688:	2101      	movs	r1, #1
 802168a:	fa01 f202 	lsl.w	r2, r1, r2
 802168e:	4013      	ands	r3, r2
 8021690:	2b00      	cmp	r3, #0
 8021692:	d19e      	bne.n	80215d2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8021694:	4b2a      	ldr	r3, [pc, #168]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 8021696:	685b      	ldr	r3, [r3, #4]
 8021698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 802169c:	1d3b      	adds	r3, r7, #4
 802169e:	681b      	ldr	r3, [r3, #0]
 80216a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80216a2:	1d3b      	adds	r3, r7, #4
 80216a4:	681b      	ldr	r3, [r3, #0]
 80216a6:	6a1b      	ldr	r3, [r3, #32]
 80216a8:	430b      	orrs	r3, r1
 80216aa:	4925      	ldr	r1, [pc, #148]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 80216ac:	4313      	orrs	r3, r2
 80216ae:	604b      	str	r3, [r1, #4]
 80216b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80216b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80216b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80216ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80216be:	681b      	ldr	r3, [r3, #0]
 80216c0:	fa93 f2a3 	rbit	r2, r3
 80216c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80216c8:	601a      	str	r2, [r3, #0]
  return result;
 80216ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80216ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80216d0:	fab3 f383 	clz	r3, r3
 80216d4:	b2db      	uxtb	r3, r3
 80216d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80216da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80216de:	009b      	lsls	r3, r3, #2
 80216e0:	461a      	mov	r2, r3
 80216e2:	2301      	movs	r3, #1
 80216e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80216e6:	f7fe ff49 	bl	802057c <HAL_GetTick>
 80216ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80216ee:	e009      	b.n	8021704 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80216f0:	f7fe ff44 	bl	802057c <HAL_GetTick>
 80216f4:	4602      	mov	r2, r0
 80216f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80216fa:	1ad3      	subs	r3, r2, r3
 80216fc:	2b02      	cmp	r3, #2
 80216fe:	d901      	bls.n	8021704 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8021700:	2303      	movs	r3, #3
 8021702:	e0fc      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 8021704:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8021708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802170e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	fa93 f2a3 	rbit	r2, r3
 8021718:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802171c:	601a      	str	r2, [r3, #0]
  return result;
 802171e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8021722:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8021724:	fab3 f383 	clz	r3, r3
 8021728:	b2db      	uxtb	r3, r3
 802172a:	095b      	lsrs	r3, r3, #5
 802172c:	b2db      	uxtb	r3, r3
 802172e:	f043 0301 	orr.w	r3, r3, #1
 8021732:	b2db      	uxtb	r3, r3
 8021734:	2b01      	cmp	r3, #1
 8021736:	d105      	bne.n	8021744 <HAL_RCC_OscConfig+0xc48>
 8021738:	4b01      	ldr	r3, [pc, #4]	; (8021740 <HAL_RCC_OscConfig+0xc44>)
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	e01e      	b.n	802177c <HAL_RCC_OscConfig+0xc80>
 802173e:	bf00      	nop
 8021740:	40021000 	.word	0x40021000
 8021744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021748:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802174c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802174e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8021752:	681b      	ldr	r3, [r3, #0]
 8021754:	fa93 f2a3 	rbit	r2, r3
 8021758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802175c:	601a      	str	r2, [r3, #0]
 802175e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021762:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021766:	601a      	str	r2, [r3, #0]
 8021768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	fa93 f2a3 	rbit	r2, r3
 8021772:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8021776:	601a      	str	r2, [r3, #0]
 8021778:	4b63      	ldr	r3, [pc, #396]	; (8021908 <HAL_RCC_OscConfig+0xe0c>)
 802177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802177c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8021780:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8021784:	6011      	str	r1, [r2, #0]
 8021786:	f107 0238 	add.w	r2, r7, #56	; 0x38
 802178a:	6812      	ldr	r2, [r2, #0]
 802178c:	fa92 f1a2 	rbit	r1, r2
 8021790:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8021794:	6011      	str	r1, [r2, #0]
  return result;
 8021796:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802179a:	6812      	ldr	r2, [r2, #0]
 802179c:	fab2 f282 	clz	r2, r2
 80217a0:	b2d2      	uxtb	r2, r2
 80217a2:	f042 0220 	orr.w	r2, r2, #32
 80217a6:	b2d2      	uxtb	r2, r2
 80217a8:	f002 021f 	and.w	r2, r2, #31
 80217ac:	2101      	movs	r1, #1
 80217ae:	fa01 f202 	lsl.w	r2, r1, r2
 80217b2:	4013      	ands	r3, r2
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d09b      	beq.n	80216f0 <HAL_RCC_OscConfig+0xbf4>
 80217b8:	e0a0      	b.n	80218fc <HAL_RCC_OscConfig+0xe00>
 80217ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80217be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80217c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80217c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80217c8:	681b      	ldr	r3, [r3, #0]
 80217ca:	fa93 f2a3 	rbit	r2, r3
 80217ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80217d2:	601a      	str	r2, [r3, #0]
  return result;
 80217d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80217d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80217da:	fab3 f383 	clz	r3, r3
 80217de:	b2db      	uxtb	r3, r3
 80217e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80217e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80217e8:	009b      	lsls	r3, r3, #2
 80217ea:	461a      	mov	r2, r3
 80217ec:	2300      	movs	r3, #0
 80217ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80217f0:	f7fe fec4 	bl	802057c <HAL_GetTick>
 80217f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80217f8:	e009      	b.n	802180e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80217fa:	f7fe febf 	bl	802057c <HAL_GetTick>
 80217fe:	4602      	mov	r2, r0
 8021800:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8021804:	1ad3      	subs	r3, r2, r3
 8021806:	2b02      	cmp	r3, #2
 8021808:	d901      	bls.n	802180e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 802180a:	2303      	movs	r3, #3
 802180c:	e077      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
 802180e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8021812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802181c:	681b      	ldr	r3, [r3, #0]
 802181e:	fa93 f2a3 	rbit	r2, r3
 8021822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021826:	601a      	str	r2, [r3, #0]
  return result;
 8021828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802182c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 802182e:	fab3 f383 	clz	r3, r3
 8021832:	b2db      	uxtb	r3, r3
 8021834:	095b      	lsrs	r3, r3, #5
 8021836:	b2db      	uxtb	r3, r3
 8021838:	f043 0301 	orr.w	r3, r3, #1
 802183c:	b2db      	uxtb	r3, r3
 802183e:	2b01      	cmp	r3, #1
 8021840:	d102      	bne.n	8021848 <HAL_RCC_OscConfig+0xd4c>
 8021842:	4b31      	ldr	r3, [pc, #196]	; (8021908 <HAL_RCC_OscConfig+0xe0c>)
 8021844:	681b      	ldr	r3, [r3, #0]
 8021846:	e01b      	b.n	8021880 <HAL_RCC_OscConfig+0xd84>
 8021848:	f107 0320 	add.w	r3, r7, #32
 802184c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021852:	f107 0320 	add.w	r3, r7, #32
 8021856:	681b      	ldr	r3, [r3, #0]
 8021858:	fa93 f2a3 	rbit	r2, r3
 802185c:	f107 031c 	add.w	r3, r7, #28
 8021860:	601a      	str	r2, [r3, #0]
 8021862:	f107 0318 	add.w	r3, r7, #24
 8021866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802186a:	601a      	str	r2, [r3, #0]
 802186c:	f107 0318 	add.w	r3, r7, #24
 8021870:	681b      	ldr	r3, [r3, #0]
 8021872:	fa93 f2a3 	rbit	r2, r3
 8021876:	f107 0314 	add.w	r3, r7, #20
 802187a:	601a      	str	r2, [r3, #0]
 802187c:	4b22      	ldr	r3, [pc, #136]	; (8021908 <HAL_RCC_OscConfig+0xe0c>)
 802187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021880:	f107 0210 	add.w	r2, r7, #16
 8021884:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8021888:	6011      	str	r1, [r2, #0]
 802188a:	f107 0210 	add.w	r2, r7, #16
 802188e:	6812      	ldr	r2, [r2, #0]
 8021890:	fa92 f1a2 	rbit	r1, r2
 8021894:	f107 020c 	add.w	r2, r7, #12
 8021898:	6011      	str	r1, [r2, #0]
  return result;
 802189a:	f107 020c 	add.w	r2, r7, #12
 802189e:	6812      	ldr	r2, [r2, #0]
 80218a0:	fab2 f282 	clz	r2, r2
 80218a4:	b2d2      	uxtb	r2, r2
 80218a6:	f042 0220 	orr.w	r2, r2, #32
 80218aa:	b2d2      	uxtb	r2, r2
 80218ac:	f002 021f 	and.w	r2, r2, #31
 80218b0:	2101      	movs	r1, #1
 80218b2:	fa01 f202 	lsl.w	r2, r1, r2
 80218b6:	4013      	ands	r3, r2
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d19e      	bne.n	80217fa <HAL_RCC_OscConfig+0xcfe>
 80218bc:	e01e      	b.n	80218fc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80218be:	1d3b      	adds	r3, r7, #4
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	69db      	ldr	r3, [r3, #28]
 80218c4:	2b01      	cmp	r3, #1
 80218c6:	d101      	bne.n	80218cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80218c8:	2301      	movs	r3, #1
 80218ca:	e018      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80218cc:	4b0e      	ldr	r3, [pc, #56]	; (8021908 <HAL_RCC_OscConfig+0xe0c>)
 80218ce:	685b      	ldr	r3, [r3, #4]
 80218d0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80218d4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80218d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80218dc:	1d3b      	adds	r3, r7, #4
 80218de:	681b      	ldr	r3, [r3, #0]
 80218e0:	6a1b      	ldr	r3, [r3, #32]
 80218e2:	429a      	cmp	r2, r3
 80218e4:	d108      	bne.n	80218f8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80218e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80218ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80218ee:	1d3b      	adds	r3, r7, #4
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80218f4:	429a      	cmp	r2, r3
 80218f6:	d001      	beq.n	80218fc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80218f8:	2301      	movs	r3, #1
 80218fa:	e000      	b.n	80218fe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80218fc:	2300      	movs	r3, #0
}
 80218fe:	4618      	mov	r0, r3
 8021900:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8021904:	46bd      	mov	sp, r7
 8021906:	bd80      	pop	{r7, pc}
 8021908:	40021000 	.word	0x40021000

0802190c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b09e      	sub	sp, #120	; 0x78
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
 8021914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8021916:	2300      	movs	r3, #0
 8021918:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	2b00      	cmp	r3, #0
 802191e:	d101      	bne.n	8021924 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8021920:	2301      	movs	r3, #1
 8021922:	e162      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8021924:	4b90      	ldr	r3, [pc, #576]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	f003 0307 	and.w	r3, r3, #7
 802192c:	683a      	ldr	r2, [r7, #0]
 802192e:	429a      	cmp	r2, r3
 8021930:	d910      	bls.n	8021954 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021932:	4b8d      	ldr	r3, [pc, #564]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021934:	681b      	ldr	r3, [r3, #0]
 8021936:	f023 0207 	bic.w	r2, r3, #7
 802193a:	498b      	ldr	r1, [pc, #556]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 802193c:	683b      	ldr	r3, [r7, #0]
 802193e:	4313      	orrs	r3, r2
 8021940:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021942:	4b89      	ldr	r3, [pc, #548]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021944:	681b      	ldr	r3, [r3, #0]
 8021946:	f003 0307 	and.w	r3, r3, #7
 802194a:	683a      	ldr	r2, [r7, #0]
 802194c:	429a      	cmp	r2, r3
 802194e:	d001      	beq.n	8021954 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8021950:	2301      	movs	r3, #1
 8021952:	e14a      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	681b      	ldr	r3, [r3, #0]
 8021958:	f003 0302 	and.w	r3, r3, #2
 802195c:	2b00      	cmp	r3, #0
 802195e:	d008      	beq.n	8021972 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8021960:	4b82      	ldr	r3, [pc, #520]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021962:	685b      	ldr	r3, [r3, #4]
 8021964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	689b      	ldr	r3, [r3, #8]
 802196c:	497f      	ldr	r1, [pc, #508]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 802196e:	4313      	orrs	r3, r2
 8021970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	681b      	ldr	r3, [r3, #0]
 8021976:	f003 0301 	and.w	r3, r3, #1
 802197a:	2b00      	cmp	r3, #0
 802197c:	f000 80dc 	beq.w	8021b38 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	685b      	ldr	r3, [r3, #4]
 8021984:	2b01      	cmp	r3, #1
 8021986:	d13c      	bne.n	8021a02 <HAL_RCC_ClockConfig+0xf6>
 8021988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802198c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 802198e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021990:	fa93 f3a3 	rbit	r3, r3
 8021994:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8021996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021998:	fab3 f383 	clz	r3, r3
 802199c:	b2db      	uxtb	r3, r3
 802199e:	095b      	lsrs	r3, r3, #5
 80219a0:	b2db      	uxtb	r3, r3
 80219a2:	f043 0301 	orr.w	r3, r3, #1
 80219a6:	b2db      	uxtb	r3, r3
 80219a8:	2b01      	cmp	r3, #1
 80219aa:	d102      	bne.n	80219b2 <HAL_RCC_ClockConfig+0xa6>
 80219ac:	4b6f      	ldr	r3, [pc, #444]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 80219ae:	681b      	ldr	r3, [r3, #0]
 80219b0:	e00f      	b.n	80219d2 <HAL_RCC_ClockConfig+0xc6>
 80219b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80219b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80219b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80219ba:	fa93 f3a3 	rbit	r3, r3
 80219be:	667b      	str	r3, [r7, #100]	; 0x64
 80219c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80219c4:	663b      	str	r3, [r7, #96]	; 0x60
 80219c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80219c8:	fa93 f3a3 	rbit	r3, r3
 80219cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80219ce:	4b67      	ldr	r3, [pc, #412]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 80219d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80219d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80219d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80219da:	fa92 f2a2 	rbit	r2, r2
 80219de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80219e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80219e2:	fab2 f282 	clz	r2, r2
 80219e6:	b2d2      	uxtb	r2, r2
 80219e8:	f042 0220 	orr.w	r2, r2, #32
 80219ec:	b2d2      	uxtb	r2, r2
 80219ee:	f002 021f 	and.w	r2, r2, #31
 80219f2:	2101      	movs	r1, #1
 80219f4:	fa01 f202 	lsl.w	r2, r1, r2
 80219f8:	4013      	ands	r3, r2
 80219fa:	2b00      	cmp	r3, #0
 80219fc:	d17b      	bne.n	8021af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80219fe:	2301      	movs	r3, #1
 8021a00:	e0f3      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8021a02:	687b      	ldr	r3, [r7, #4]
 8021a04:	685b      	ldr	r3, [r3, #4]
 8021a06:	2b02      	cmp	r3, #2
 8021a08:	d13c      	bne.n	8021a84 <HAL_RCC_ClockConfig+0x178>
 8021a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021a0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021a12:	fa93 f3a3 	rbit	r3, r3
 8021a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8021a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021a1a:	fab3 f383 	clz	r3, r3
 8021a1e:	b2db      	uxtb	r3, r3
 8021a20:	095b      	lsrs	r3, r3, #5
 8021a22:	b2db      	uxtb	r3, r3
 8021a24:	f043 0301 	orr.w	r3, r3, #1
 8021a28:	b2db      	uxtb	r3, r3
 8021a2a:	2b01      	cmp	r3, #1
 8021a2c:	d102      	bne.n	8021a34 <HAL_RCC_ClockConfig+0x128>
 8021a2e:	4b4f      	ldr	r3, [pc, #316]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	e00f      	b.n	8021a54 <HAL_RCC_ClockConfig+0x148>
 8021a34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021a38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021a3c:	fa93 f3a3 	rbit	r3, r3
 8021a40:	647b      	str	r3, [r7, #68]	; 0x44
 8021a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8021a46:	643b      	str	r3, [r7, #64]	; 0x40
 8021a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021a4a:	fa93 f3a3 	rbit	r3, r3
 8021a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021a50:	4b46      	ldr	r3, [pc, #280]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8021a58:	63ba      	str	r2, [r7, #56]	; 0x38
 8021a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021a5c:	fa92 f2a2 	rbit	r2, r2
 8021a60:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8021a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021a64:	fab2 f282 	clz	r2, r2
 8021a68:	b2d2      	uxtb	r2, r2
 8021a6a:	f042 0220 	orr.w	r2, r2, #32
 8021a6e:	b2d2      	uxtb	r2, r2
 8021a70:	f002 021f 	and.w	r2, r2, #31
 8021a74:	2101      	movs	r1, #1
 8021a76:	fa01 f202 	lsl.w	r2, r1, r2
 8021a7a:	4013      	ands	r3, r2
 8021a7c:	2b00      	cmp	r3, #0
 8021a7e:	d13a      	bne.n	8021af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8021a80:	2301      	movs	r3, #1
 8021a82:	e0b2      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
 8021a84:	2302      	movs	r3, #2
 8021a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a8a:	fa93 f3a3 	rbit	r3, r3
 8021a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8021a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021a92:	fab3 f383 	clz	r3, r3
 8021a96:	b2db      	uxtb	r3, r3
 8021a98:	095b      	lsrs	r3, r3, #5
 8021a9a:	b2db      	uxtb	r3, r3
 8021a9c:	f043 0301 	orr.w	r3, r3, #1
 8021aa0:	b2db      	uxtb	r3, r3
 8021aa2:	2b01      	cmp	r3, #1
 8021aa4:	d102      	bne.n	8021aac <HAL_RCC_ClockConfig+0x1a0>
 8021aa6:	4b31      	ldr	r3, [pc, #196]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	e00d      	b.n	8021ac8 <HAL_RCC_ClockConfig+0x1bc>
 8021aac:	2302      	movs	r3, #2
 8021aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ab2:	fa93 f3a3 	rbit	r3, r3
 8021ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ab8:	2302      	movs	r3, #2
 8021aba:	623b      	str	r3, [r7, #32]
 8021abc:	6a3b      	ldr	r3, [r7, #32]
 8021abe:	fa93 f3a3 	rbit	r3, r3
 8021ac2:	61fb      	str	r3, [r7, #28]
 8021ac4:	4b29      	ldr	r3, [pc, #164]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021ac8:	2202      	movs	r2, #2
 8021aca:	61ba      	str	r2, [r7, #24]
 8021acc:	69ba      	ldr	r2, [r7, #24]
 8021ace:	fa92 f2a2 	rbit	r2, r2
 8021ad2:	617a      	str	r2, [r7, #20]
  return result;
 8021ad4:	697a      	ldr	r2, [r7, #20]
 8021ad6:	fab2 f282 	clz	r2, r2
 8021ada:	b2d2      	uxtb	r2, r2
 8021adc:	f042 0220 	orr.w	r2, r2, #32
 8021ae0:	b2d2      	uxtb	r2, r2
 8021ae2:	f002 021f 	and.w	r2, r2, #31
 8021ae6:	2101      	movs	r1, #1
 8021ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8021aec:	4013      	ands	r3, r2
 8021aee:	2b00      	cmp	r3, #0
 8021af0:	d101      	bne.n	8021af6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8021af2:	2301      	movs	r3, #1
 8021af4:	e079      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8021af6:	4b1d      	ldr	r3, [pc, #116]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021af8:	685b      	ldr	r3, [r3, #4]
 8021afa:	f023 0203 	bic.w	r2, r3, #3
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	685b      	ldr	r3, [r3, #4]
 8021b02:	491a      	ldr	r1, [pc, #104]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021b04:	4313      	orrs	r3, r2
 8021b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8021b08:	f7fe fd38 	bl	802057c <HAL_GetTick>
 8021b0c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021b0e:	e00a      	b.n	8021b26 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8021b10:	f7fe fd34 	bl	802057c <HAL_GetTick>
 8021b14:	4602      	mov	r2, r0
 8021b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021b18:	1ad3      	subs	r3, r2, r3
 8021b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8021b1e:	4293      	cmp	r3, r2
 8021b20:	d901      	bls.n	8021b26 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8021b22:	2303      	movs	r3, #3
 8021b24:	e061      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8021b26:	4b11      	ldr	r3, [pc, #68]	; (8021b6c <HAL_RCC_ClockConfig+0x260>)
 8021b28:	685b      	ldr	r3, [r3, #4]
 8021b2a:	f003 020c 	and.w	r2, r3, #12
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	685b      	ldr	r3, [r3, #4]
 8021b32:	009b      	lsls	r3, r3, #2
 8021b34:	429a      	cmp	r2, r3
 8021b36:	d1eb      	bne.n	8021b10 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8021b38:	4b0b      	ldr	r3, [pc, #44]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	f003 0307 	and.w	r3, r3, #7
 8021b40:	683a      	ldr	r2, [r7, #0]
 8021b42:	429a      	cmp	r2, r3
 8021b44:	d214      	bcs.n	8021b70 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8021b46:	4b08      	ldr	r3, [pc, #32]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021b48:	681b      	ldr	r3, [r3, #0]
 8021b4a:	f023 0207 	bic.w	r2, r3, #7
 8021b4e:	4906      	ldr	r1, [pc, #24]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021b50:	683b      	ldr	r3, [r7, #0]
 8021b52:	4313      	orrs	r3, r2
 8021b54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8021b56:	4b04      	ldr	r3, [pc, #16]	; (8021b68 <HAL_RCC_ClockConfig+0x25c>)
 8021b58:	681b      	ldr	r3, [r3, #0]
 8021b5a:	f003 0307 	and.w	r3, r3, #7
 8021b5e:	683a      	ldr	r2, [r7, #0]
 8021b60:	429a      	cmp	r2, r3
 8021b62:	d005      	beq.n	8021b70 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8021b64:	2301      	movs	r3, #1
 8021b66:	e040      	b.n	8021bea <HAL_RCC_ClockConfig+0x2de>
 8021b68:	40022000 	.word	0x40022000
 8021b6c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	f003 0304 	and.w	r3, r3, #4
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d008      	beq.n	8021b8e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8021b7c:	4b1d      	ldr	r3, [pc, #116]	; (8021bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8021b7e:	685b      	ldr	r3, [r3, #4]
 8021b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	68db      	ldr	r3, [r3, #12]
 8021b88:	491a      	ldr	r1, [pc, #104]	; (8021bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8021b8a:	4313      	orrs	r3, r2
 8021b8c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	f003 0308 	and.w	r3, r3, #8
 8021b96:	2b00      	cmp	r3, #0
 8021b98:	d009      	beq.n	8021bae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8021b9a:	4b16      	ldr	r3, [pc, #88]	; (8021bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8021b9c:	685b      	ldr	r3, [r3, #4]
 8021b9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	691b      	ldr	r3, [r3, #16]
 8021ba6:	00db      	lsls	r3, r3, #3
 8021ba8:	4912      	ldr	r1, [pc, #72]	; (8021bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8021baa:	4313      	orrs	r3, r2
 8021bac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8021bae:	f000 f829 	bl	8021c04 <HAL_RCC_GetSysClockFreq>
 8021bb2:	4601      	mov	r1, r0
 8021bb4:	4b0f      	ldr	r3, [pc, #60]	; (8021bf4 <HAL_RCC_ClockConfig+0x2e8>)
 8021bb6:	685b      	ldr	r3, [r3, #4]
 8021bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021bbc:	22f0      	movs	r2, #240	; 0xf0
 8021bbe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021bc0:	693a      	ldr	r2, [r7, #16]
 8021bc2:	fa92 f2a2 	rbit	r2, r2
 8021bc6:	60fa      	str	r2, [r7, #12]
  return result;
 8021bc8:	68fa      	ldr	r2, [r7, #12]
 8021bca:	fab2 f282 	clz	r2, r2
 8021bce:	b2d2      	uxtb	r2, r2
 8021bd0:	40d3      	lsrs	r3, r2
 8021bd2:	4a09      	ldr	r2, [pc, #36]	; (8021bf8 <HAL_RCC_ClockConfig+0x2ec>)
 8021bd4:	5cd3      	ldrb	r3, [r2, r3]
 8021bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8021bda:	4a08      	ldr	r2, [pc, #32]	; (8021bfc <HAL_RCC_ClockConfig+0x2f0>)
 8021bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8021bde:	4b08      	ldr	r3, [pc, #32]	; (8021c00 <HAL_RCC_ClockConfig+0x2f4>)
 8021be0:	681b      	ldr	r3, [r3, #0]
 8021be2:	4618      	mov	r0, r3
 8021be4:	f7fe fc86 	bl	80204f4 <HAL_InitTick>
  
  return HAL_OK;
 8021be8:	2300      	movs	r3, #0
}
 8021bea:	4618      	mov	r0, r3
 8021bec:	3778      	adds	r7, #120	; 0x78
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	bd80      	pop	{r7, pc}
 8021bf2:	bf00      	nop
 8021bf4:	40021000 	.word	0x40021000
 8021bf8:	08021d58 	.word	0x08021d58
 8021bfc:	20000000 	.word	0x20000000
 8021c00:	20000004 	.word	0x20000004

08021c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8021c04:	b480      	push	{r7}
 8021c06:	b08b      	sub	sp, #44	; 0x2c
 8021c08:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	61fb      	str	r3, [r7, #28]
 8021c0e:	2300      	movs	r3, #0
 8021c10:	61bb      	str	r3, [r7, #24]
 8021c12:	2300      	movs	r3, #0
 8021c14:	627b      	str	r3, [r7, #36]	; 0x24
 8021c16:	2300      	movs	r3, #0
 8021c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8021c1a:	2300      	movs	r3, #0
 8021c1c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8021c1e:	4b29      	ldr	r3, [pc, #164]	; (8021cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8021c20:	685b      	ldr	r3, [r3, #4]
 8021c22:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8021c24:	69fb      	ldr	r3, [r7, #28]
 8021c26:	f003 030c 	and.w	r3, r3, #12
 8021c2a:	2b04      	cmp	r3, #4
 8021c2c:	d002      	beq.n	8021c34 <HAL_RCC_GetSysClockFreq+0x30>
 8021c2e:	2b08      	cmp	r3, #8
 8021c30:	d003      	beq.n	8021c3a <HAL_RCC_GetSysClockFreq+0x36>
 8021c32:	e03c      	b.n	8021cae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8021c34:	4b24      	ldr	r3, [pc, #144]	; (8021cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8021c36:	623b      	str	r3, [r7, #32]
      break;
 8021c38:	e03c      	b.n	8021cb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8021c3a:	69fb      	ldr	r3, [r7, #28]
 8021c3c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8021c40:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8021c44:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021c46:	68ba      	ldr	r2, [r7, #8]
 8021c48:	fa92 f2a2 	rbit	r2, r2
 8021c4c:	607a      	str	r2, [r7, #4]
  return result;
 8021c4e:	687a      	ldr	r2, [r7, #4]
 8021c50:	fab2 f282 	clz	r2, r2
 8021c54:	b2d2      	uxtb	r2, r2
 8021c56:	40d3      	lsrs	r3, r2
 8021c58:	4a1c      	ldr	r2, [pc, #112]	; (8021ccc <HAL_RCC_GetSysClockFreq+0xc8>)
 8021c5a:	5cd3      	ldrb	r3, [r2, r3]
 8021c5c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8021c5e:	4b19      	ldr	r3, [pc, #100]	; (8021cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8021c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c62:	f003 030f 	and.w	r3, r3, #15
 8021c66:	220f      	movs	r2, #15
 8021c68:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8021c6a:	693a      	ldr	r2, [r7, #16]
 8021c6c:	fa92 f2a2 	rbit	r2, r2
 8021c70:	60fa      	str	r2, [r7, #12]
  return result;
 8021c72:	68fa      	ldr	r2, [r7, #12]
 8021c74:	fab2 f282 	clz	r2, r2
 8021c78:	b2d2      	uxtb	r2, r2
 8021c7a:	40d3      	lsrs	r3, r2
 8021c7c:	4a14      	ldr	r2, [pc, #80]	; (8021cd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8021c7e:	5cd3      	ldrb	r3, [r2, r3]
 8021c80:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8021c82:	69fb      	ldr	r3, [r7, #28]
 8021c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	d008      	beq.n	8021c9e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8021c8c:	4a0e      	ldr	r2, [pc, #56]	; (8021cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8021c8e:	69bb      	ldr	r3, [r7, #24]
 8021c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	fb02 f303 	mul.w	r3, r2, r3
 8021c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8021c9c:	e004      	b.n	8021ca8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8021c9e:	697b      	ldr	r3, [r7, #20]
 8021ca0:	4a0c      	ldr	r2, [pc, #48]	; (8021cd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8021ca2:	fb02 f303 	mul.w	r3, r2, r3
 8021ca6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8021ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021caa:	623b      	str	r3, [r7, #32]
      break;
 8021cac:	e002      	b.n	8021cb4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8021cae:	4b06      	ldr	r3, [pc, #24]	; (8021cc8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8021cb0:	623b      	str	r3, [r7, #32]
      break;
 8021cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8021cb4:	6a3b      	ldr	r3, [r7, #32]
}
 8021cb6:	4618      	mov	r0, r3
 8021cb8:	372c      	adds	r7, #44	; 0x2c
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cc0:	4770      	bx	lr
 8021cc2:	bf00      	nop
 8021cc4:	40021000 	.word	0x40021000
 8021cc8:	007a1200 	.word	0x007a1200
 8021ccc:	08021d68 	.word	0x08021d68
 8021cd0:	08021d78 	.word	0x08021d78
 8021cd4:	003d0900 	.word	0x003d0900

08021cd8 <__libc_init_array>:
 8021cd8:	b570      	push	{r4, r5, r6, lr}
 8021cda:	4e0d      	ldr	r6, [pc, #52]	; (8021d10 <__libc_init_array+0x38>)
 8021cdc:	4c0d      	ldr	r4, [pc, #52]	; (8021d14 <__libc_init_array+0x3c>)
 8021cde:	1ba4      	subs	r4, r4, r6
 8021ce0:	10a4      	asrs	r4, r4, #2
 8021ce2:	2500      	movs	r5, #0
 8021ce4:	42a5      	cmp	r5, r4
 8021ce6:	d109      	bne.n	8021cfc <__libc_init_array+0x24>
 8021ce8:	4e0b      	ldr	r6, [pc, #44]	; (8021d18 <__libc_init_array+0x40>)
 8021cea:	4c0c      	ldr	r4, [pc, #48]	; (8021d1c <__libc_init_array+0x44>)
 8021cec:	f000 f820 	bl	8021d30 <_init>
 8021cf0:	1ba4      	subs	r4, r4, r6
 8021cf2:	10a4      	asrs	r4, r4, #2
 8021cf4:	2500      	movs	r5, #0
 8021cf6:	42a5      	cmp	r5, r4
 8021cf8:	d105      	bne.n	8021d06 <__libc_init_array+0x2e>
 8021cfa:	bd70      	pop	{r4, r5, r6, pc}
 8021cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d00:	4798      	blx	r3
 8021d02:	3501      	adds	r5, #1
 8021d04:	e7ee      	b.n	8021ce4 <__libc_init_array+0xc>
 8021d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d0a:	4798      	blx	r3
 8021d0c:	3501      	adds	r5, #1
 8021d0e:	e7f2      	b.n	8021cf6 <__libc_init_array+0x1e>
 8021d10:	08021d88 	.word	0x08021d88
 8021d14:	08021d88 	.word	0x08021d88
 8021d18:	08021d88 	.word	0x08021d88
 8021d1c:	08021d8c 	.word	0x08021d8c

08021d20 <memset>:
 8021d20:	4402      	add	r2, r0
 8021d22:	4603      	mov	r3, r0
 8021d24:	4293      	cmp	r3, r2
 8021d26:	d100      	bne.n	8021d2a <memset+0xa>
 8021d28:	4770      	bx	lr
 8021d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8021d2e:	e7f9      	b.n	8021d24 <memset+0x4>

08021d30 <_init>:
 8021d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d32:	bf00      	nop
 8021d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d36:	bc08      	pop	{r3}
 8021d38:	469e      	mov	lr, r3
 8021d3a:	4770      	bx	lr

08021d3c <_fini>:
 8021d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d3e:	bf00      	nop
 8021d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d42:	bc08      	pop	{r3}
 8021d44:	469e      	mov	lr, r3
 8021d46:	4770      	bx	lr

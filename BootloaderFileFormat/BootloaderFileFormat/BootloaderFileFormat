using System;
using System.IO;
using System.Text;

namespace BootloaderFileFormat
{
    public class BootloaderFile
    {
        private static readonly byte[] HeaderBytes = { (byte)'H', (byte)'E', (byte)'A', (byte)'D', (byte)'E', (byte)'R' };
        private static readonly byte[] DataBytes = {(byte) 'D', (byte) 'A', (byte) 'T', (byte) 'A'};
        public String ManufacturerName { set; get; }
        public Byte[] Data { set; get; }
        private Int16 _manufacturerNameSize;
        private Int32 _size;
        private Int64 _unixCreationTime;
        public UInt16[] FirmwareVersion { set; get; }

        public BootloaderFile()
        {
            FirmwareVersion = new UInt16[4];
        }
        
        public BootloaderFile(String filepath)
        {
            FileStream fileStream = new FileStream(filepath, FileMode.Open, FileAccess.Read, FileShare.Read);
            BinaryReader binaryReader = new BinaryReader(fileStream, Encoding.ASCII);
            
            if (binaryReader.ReadBytes(10) != HeaderBytes)
            {
                throw new FormatException();
            }

            _manufacturerNameSize = binaryReader.ReadInt16();
            ManufacturerName = new String(binaryReader.ReadChars(_manufacturerNameSize));
            
            FirmwareVersion = new UInt16[4];
            for (int i = 0; i < 4; i++)
            {
                FirmwareVersion[i] = binaryReader.ReadUInt16();    
            }
            
            _unixCreationTime = binaryReader.ReadInt64();

            if (binaryReader.ReadBytes(4) != DataBytes)
            {
                throw new FormatException();
            }
            
            _size = binaryReader.ReadInt32();
            Data = binaryReader.ReadBytes(_size);
            binaryReader.Close();
        }

        public void WriteBootloaderFile(String filepath)
        {
            FileStream fileStream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write);
            BinaryWriter binaryWriter = new BinaryWriter(fileStream, Encoding.ASCII);
            binaryWriter.Write(HeaderBytes);
            binaryWriter.Write(_manufacturerNameSize);
            binaryWriter.Write(ManufacturerName);
            for (int i = 0; i < 4; i++)
            {
                binaryWriter.Write(FirmwareVersion[i]);    
            }
            binaryWriter.Write(DateTimeOffset.Now.ToUnixTimeSeconds());
            binaryWriter.Write(DataBytes);
            binaryWriter.Write(_size);
            binaryWriter.Write(Data);
            binaryWriter.Close();
        }

        public String ToFancyString()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append("Manufacturer: ");
            stringBuilder.AppendLine(ManufacturerName);
            stringBuilder.Append("Creation time: ");
            stringBuilder.AppendLine(DateTimeOffset.FromUnixTimeSeconds(_unixCreationTime).ToString());
            stringBuilder.Append("Firmware size: ");
            stringBuilder.Append(Data.Length);
            stringBuilder.AppendLine("B");
            return stringBuilder.ToString();
        }

    }
}